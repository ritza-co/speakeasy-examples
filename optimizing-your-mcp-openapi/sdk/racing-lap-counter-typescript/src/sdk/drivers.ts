/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { driversCreateDriver } from "../funcs/driversCreateDriver.js";
import { driversDeleteDriver } from "../funcs/driversDeleteDriver.js";
import { driversGetDriver } from "../funcs/driversGetDriver.js";
import { driversListDrivers } from "../funcs/driversListDrivers.js";
import { driversUpdateDriver } from "../funcs/driversUpdateDriver.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Drivers extends ClientSDK {
  /**
   * Get all drivers
   *
   * @remarks
   * Retrieve a list of all racing drivers in the database
   */
  async listDrivers(
    options?: RequestOptions,
  ): Promise<Array<components.Driver>> {
    return unwrapAsync(driversListDrivers(
      this,
      options,
    ));
  }

  /**
   * Create a new driver
   *
   * @remarks
   * Create a new racing driver in the database
   */
  async createDriver(
    request: components.DriverCreate,
    options?: RequestOptions,
  ): Promise<components.Driver> {
    return unwrapAsync(driversCreateDriver(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific driver
   *
   * @remarks
   * Retrieve details for a specific racing driver by ID
   */
  async getDriver(
    request: operations.GetDriverRequest,
    options?: RequestOptions,
  ): Promise<components.Driver> {
    return unwrapAsync(driversGetDriver(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a driver
   *
   * @remarks
   * Update a racing driver's details by ID
   */
  async updateDriver(
    request: operations.UpdateDriverRequest,
    options?: RequestOptions,
  ): Promise<components.Driver> {
    return unwrapAsync(driversUpdateDriver(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a driver
   *
   * @remarks
   * Delete a racing driver by ID, including all associated lap records
   */
  async deleteDriver(
    request: operations.DeleteDriverRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(driversDeleteDriver(
      this,
      request,
      options,
    ));
  }
}
