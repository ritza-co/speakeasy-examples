/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lapsCreateLap } from "../funcs/lapsCreateLap.js";
import { lapsDeleteLap } from "../funcs/lapsDeleteLap.js";
import { lapsGetLap } from "../funcs/lapsGetLap.js";
import { lapsListLaps } from "../funcs/lapsListLaps.js";
import { lapsUpdateLap } from "../funcs/lapsUpdateLap.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Laps extends ClientSDK {
  /**
   * Create a new lap record
   *
   * @remarks
   * Create a new lap record for a specific driver
   */
  async createLap(
    request: operations.CreateLapRequest,
    options?: RequestOptions,
  ): Promise<components.Lap> {
    return unwrapAsync(lapsCreateLap(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all laps for a driver
   *
   * @remarks
   * Retrieve all lap records for a specific driver
   */
  async listLaps(
    request: operations.ListLapsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Lap>> {
    return unwrapAsync(lapsListLaps(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific lap record
   *
   * @remarks
   * Retrieve a specific lap record for a driver
   */
  async getLap(
    request: operations.GetLapRequest,
    options?: RequestOptions,
  ): Promise<components.Lap> {
    return unwrapAsync(lapsGetLap(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a lap record
   *
   * @remarks
   * Update a specific lap record for a driver
   */
  async updateLap(
    request: operations.UpdateLapRequest,
    options?: RequestOptions,
  ): Promise<components.Lap> {
    return unwrapAsync(lapsUpdateLap(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a lap record
   *
   * @remarks
   * Delete a specific lap record for a driver
   */
  async deleteLap(
    request: operations.DeleteLapRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(lapsDeleteLap(
      this,
      request,
      options,
    ));
  }
}
