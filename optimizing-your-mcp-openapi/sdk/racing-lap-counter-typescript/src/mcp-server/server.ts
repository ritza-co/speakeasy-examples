/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { RacingLapCounterCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope, mcpScopes } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$driversCreateDriver } from "./tools/driversCreateDriver.js";
import { tool$driversDeleteDriver } from "./tools/driversDeleteDriver.js";
import { tool$driversGetDriver } from "./tools/driversGetDriver.js";
import { tool$driversListDrivers } from "./tools/driversListDrivers.js";
import { tool$driversUpdateDriver } from "./tools/driversUpdateDriver.js";
import { tool$lapsCreateLap } from "./tools/lapsCreateLap.js";
import { tool$lapsDeleteLap } from "./tools/lapsDeleteLap.js";
import { tool$lapsGetLap } from "./tools/lapsGetLap.js";
import { tool$lapsListLaps } from "./tools/lapsListLaps.js";
import { tool$lapsUpdateLap } from "./tools/lapsUpdateLap.js";
import { tool$rootGetWelcomeMessage } from "./tools/rootGetWelcomeMessage.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "RacingLapCounter",
    version: "0.0.2",
  });

  const client = new RacingLapCounterCore({
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes ?? mcpScopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$rootGetWelcomeMessage);
  tool(tool$driversListDrivers);
  tool(tool$driversCreateDriver);
  tool(tool$driversGetDriver);
  tool(tool$driversUpdateDriver);
  tool(tool$driversDeleteDriver);
  tool(tool$lapsCreateLap);
  tool(tool$lapsListLaps);
  tool(tool$lapsGetLap);
  tool(tool$lapsUpdateLap);
  tool(tool$lapsDeleteLap);

  return server;
}
