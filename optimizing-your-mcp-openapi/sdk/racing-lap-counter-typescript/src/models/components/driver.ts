/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Lap,
  Lap$inboundSchema,
  Lap$Outbound,
  Lap$outboundSchema,
} from "./lap.js";

export type Driver = {
  /**
   * The full name of the driver
   */
  name: string;
  /**
   * Unique identifier for the driver
   */
  id?: string | null | undefined;
  /**
   * List of laps completed by the driver
   */
  laps?: Array<Lap> | undefined;
};

/** @internal */
export const Driver$inboundSchema: z.ZodType<Driver, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    id: z.nullable(z.string()).optional(),
    laps: z.array(Lap$inboundSchema).optional(),
  });

/** @internal */
export type Driver$Outbound = {
  name: string;
  id?: string | null | undefined;
  laps?: Array<Lap$Outbound> | undefined;
};

/** @internal */
export const Driver$outboundSchema: z.ZodType<
  Driver$Outbound,
  z.ZodTypeDef,
  Driver
> = z.object({
  name: z.string(),
  id: z.nullable(z.string()).optional(),
  laps: z.array(Lap$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Driver$ {
  /** @deprecated use `Driver$inboundSchema` instead. */
  export const inboundSchema = Driver$inboundSchema;
  /** @deprecated use `Driver$outboundSchema` instead. */
  export const outboundSchema = Driver$outboundSchema;
  /** @deprecated use `Driver$Outbound` instead. */
  export type Outbound = Driver$Outbound;
}

export function driverToJSON(driver: Driver): string {
  return JSON.stringify(Driver$outboundSchema.parse(driver));
}

export function driverFromJSON(
  jsonString: string,
): SafeParseResult<Driver, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Driver$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Driver' from JSON`,
  );
}
