/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Lap = {
  /**
   * Unique identifier for the lap
   */
  id?: string | null | undefined;
  /**
   * Lap time in seconds
   */
  lapTime: number;
  /**
   * Name of the track where the lap was recorded
   */
  track: string;
};

/** @internal */
export const Lap$inboundSchema: z.ZodType<Lap, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    lap_time: z.number(),
    track: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "lap_time": "lapTime",
    });
  });

/** @internal */
export type Lap$Outbound = {
  id?: string | null | undefined;
  lap_time: number;
  track: string;
};

/** @internal */
export const Lap$outboundSchema: z.ZodType<Lap$Outbound, z.ZodTypeDef, Lap> = z
  .object({
    id: z.nullable(z.string()).optional(),
    lapTime: z.number(),
    track: z.string(),
  }).transform((v) => {
    return remap$(v, {
      lapTime: "lap_time",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Lap$ {
  /** @deprecated use `Lap$inboundSchema` instead. */
  export const inboundSchema = Lap$inboundSchema;
  /** @deprecated use `Lap$outboundSchema` instead. */
  export const outboundSchema = Lap$outboundSchema;
  /** @deprecated use `Lap$Outbound` instead. */
  export type Outbound = Lap$Outbound;
}

export function lapToJSON(lap: Lap): string {
  return JSON.stringify(Lap$outboundSchema.parse(lap));
}

export function lapFromJSON(
  jsonString: string,
): SafeParseResult<Lap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Lap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Lap' from JSON`,
  );
}
