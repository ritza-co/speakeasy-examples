/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LapUpdate = {
  /**
   * Lap time in seconds
   */
  lapTime: number;
  /**
   * Name of the track where the lap was recorded
   */
  track: string;
};

/** @internal */
export const LapUpdate$inboundSchema: z.ZodType<
  LapUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  lap_time: z.number(),
  track: z.string(),
}).transform((v) => {
  return remap$(v, {
    "lap_time": "lapTime",
  });
});

/** @internal */
export type LapUpdate$Outbound = {
  lap_time: number;
  track: string;
};

/** @internal */
export const LapUpdate$outboundSchema: z.ZodType<
  LapUpdate$Outbound,
  z.ZodTypeDef,
  LapUpdate
> = z.object({
  lapTime: z.number(),
  track: z.string(),
}).transform((v) => {
  return remap$(v, {
    lapTime: "lap_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LapUpdate$ {
  /** @deprecated use `LapUpdate$inboundSchema` instead. */
  export const inboundSchema = LapUpdate$inboundSchema;
  /** @deprecated use `LapUpdate$outboundSchema` instead. */
  export const outboundSchema = LapUpdate$outboundSchema;
  /** @deprecated use `LapUpdate$Outbound` instead. */
  export type Outbound = LapUpdate$Outbound;
}

export function lapUpdateToJSON(lapUpdate: LapUpdate): string {
  return JSON.stringify(LapUpdate$outboundSchema.parse(lapUpdate));
}

export function lapUpdateFromJSON(
  jsonString: string,
): SafeParseResult<LapUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LapUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LapUpdate' from JSON`,
  );
}
