/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DriverCreate = {
  /**
   * The full name of the driver
   */
  name: string;
};

/** @internal */
export const DriverCreate$inboundSchema: z.ZodType<
  DriverCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type DriverCreate$Outbound = {
  name: string;
};

/** @internal */
export const DriverCreate$outboundSchema: z.ZodType<
  DriverCreate$Outbound,
  z.ZodTypeDef,
  DriverCreate
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DriverCreate$ {
  /** @deprecated use `DriverCreate$inboundSchema` instead. */
  export const inboundSchema = DriverCreate$inboundSchema;
  /** @deprecated use `DriverCreate$outboundSchema` instead. */
  export const outboundSchema = DriverCreate$outboundSchema;
  /** @deprecated use `DriverCreate$Outbound` instead. */
  export type Outbound = DriverCreate$Outbound;
}

export function driverCreateToJSON(driverCreate: DriverCreate): string {
  return JSON.stringify(DriverCreate$outboundSchema.parse(driverCreate));
}

export function driverCreateFromJSON(
  jsonString: string,
): SafeParseResult<DriverCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DriverCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DriverCreate' from JSON`,
  );
}
