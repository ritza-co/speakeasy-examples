/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DriverUpdate = {
  /**
   * The full name of the driver
   */
  name: string;
};

/** @internal */
export const DriverUpdate$inboundSchema: z.ZodType<
  DriverUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type DriverUpdate$Outbound = {
  name: string;
};

/** @internal */
export const DriverUpdate$outboundSchema: z.ZodType<
  DriverUpdate$Outbound,
  z.ZodTypeDef,
  DriverUpdate
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DriverUpdate$ {
  /** @deprecated use `DriverUpdate$inboundSchema` instead. */
  export const inboundSchema = DriverUpdate$inboundSchema;
  /** @deprecated use `DriverUpdate$outboundSchema` instead. */
  export const outboundSchema = DriverUpdate$outboundSchema;
  /** @deprecated use `DriverUpdate$Outbound` instead. */
  export type Outbound = DriverUpdate$Outbound;
}

export function driverUpdateToJSON(driverUpdate: DriverUpdate): string {
  return JSON.stringify(DriverUpdate$outboundSchema.parse(driverUpdate));
}

export function driverUpdateFromJSON(
  jsonString: string,
): SafeParseResult<DriverUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DriverUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DriverUpdate' from JSON`,
  );
}
