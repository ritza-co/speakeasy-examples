/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteLapRequest = {
  /**
   * The ID of the driver
   */
  driverId: string;
  /**
   * The ID of the lap record
   */
  lapId: string;
};

/** @internal */
export const DeleteLapRequest$inboundSchema: z.ZodType<
  DeleteLapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  driver_id: z.string(),
  lap_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "driver_id": "driverId",
    "lap_id": "lapId",
  });
});

/** @internal */
export type DeleteLapRequest$Outbound = {
  driver_id: string;
  lap_id: string;
};

/** @internal */
export const DeleteLapRequest$outboundSchema: z.ZodType<
  DeleteLapRequest$Outbound,
  z.ZodTypeDef,
  DeleteLapRequest
> = z.object({
  driverId: z.string(),
  lapId: z.string(),
}).transform((v) => {
  return remap$(v, {
    driverId: "driver_id",
    lapId: "lap_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLapRequest$ {
  /** @deprecated use `DeleteLapRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteLapRequest$inboundSchema;
  /** @deprecated use `DeleteLapRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteLapRequest$outboundSchema;
  /** @deprecated use `DeleteLapRequest$Outbound` instead. */
  export type Outbound = DeleteLapRequest$Outbound;
}

export function deleteLapRequestToJSON(
  deleteLapRequest: DeleteLapRequest,
): string {
  return JSON.stringify(
    DeleteLapRequest$outboundSchema.parse(deleteLapRequest),
  );
}

export function deleteLapRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLapRequest' from JSON`,
  );
}
