/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateDriverRequest = {
  /**
   * The ID of the driver to update
   */
  driverId: string;
  driverUpdate: components.DriverUpdate;
};

/** @internal */
export const UpdateDriverRequest$inboundSchema: z.ZodType<
  UpdateDriverRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  driver_id: z.string(),
  DriverUpdate: components.DriverUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "driver_id": "driverId",
    "DriverUpdate": "driverUpdate",
  });
});

/** @internal */
export type UpdateDriverRequest$Outbound = {
  driver_id: string;
  DriverUpdate: components.DriverUpdate$Outbound;
};

/** @internal */
export const UpdateDriverRequest$outboundSchema: z.ZodType<
  UpdateDriverRequest$Outbound,
  z.ZodTypeDef,
  UpdateDriverRequest
> = z.object({
  driverId: z.string(),
  driverUpdate: components.DriverUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    driverId: "driver_id",
    driverUpdate: "DriverUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDriverRequest$ {
  /** @deprecated use `UpdateDriverRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDriverRequest$inboundSchema;
  /** @deprecated use `UpdateDriverRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDriverRequest$outboundSchema;
  /** @deprecated use `UpdateDriverRequest$Outbound` instead. */
  export type Outbound = UpdateDriverRequest$Outbound;
}

export function updateDriverRequestToJSON(
  updateDriverRequest: UpdateDriverRequest,
): string {
  return JSON.stringify(
    UpdateDriverRequest$outboundSchema.parse(updateDriverRequest),
  );
}

export function updateDriverRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDriverRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDriverRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDriverRequest' from JSON`,
  );
}
