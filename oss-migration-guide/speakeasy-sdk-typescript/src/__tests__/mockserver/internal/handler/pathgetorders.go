// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetOrders(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "get_orders_orders_get-multiple_orders[0]":
			dir.HandlerFunc("get_orders_orders_get", testGetOrdersOrdersGetGetOrdersOrdersGetMultipleOrders0)(w, req)
		case "get_orders_orders_get-latte[0]":
			dir.HandlerFunc("get_orders_orders_get", testGetOrdersOrdersGetGetOrdersOrdersGetLatte0)(w, req)
		case "get_orders_orders_get-espresso[0]":
			dir.HandlerFunc("get_orders_orders_get", testGetOrdersOrdersGetGetOrdersOrdersGetEspresso0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetOrdersOrdersGetGetOrdersOrdersGetMultipleOrders0(w http.ResponseWriter, req *http.Request) {
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.CoffeeOrder{
		components.CoffeeOrder{
			ID:           1,
			CustomerName: "Alice",
			CoffeeType:   "Latte",
			Size:         "Medium",
			Extras: []string{
				"Extra shot",
				"Soy milk",
			},
			Price: 4.5,
		},
		components.CoffeeOrder{
			ID:           2,
			CustomerName: "Bob",
			CoffeeType:   "Espresso",
			Size:         "Small",
			Extras: []string{
				"Extra shot",
			},
			Price: 3.5,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}

func testGetOrdersOrdersGetGetOrdersOrdersGetLatte0(w http.ResponseWriter, req *http.Request) {
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.CoffeeOrder{
		components.CoffeeOrder{
			ID:           5,
			CustomerName: "Eve",
			CoffeeType:   "Mocha",
			Size:         "Large",
			Extras: []string{
				"Whipped cream",
				"Chocolate syrup",
			},
			Price: 6,
		},
		components.CoffeeOrder{
			ID:           6,
			CustomerName: "Grace",
			CoffeeType:   "Cold Brew",
			Size:         "Medium",
			Extras: []string{
				"Vanilla syrup",
			},
			Price: 5.5,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}

func testGetOrdersOrdersGetGetOrdersOrdersGetEspresso0(w http.ResponseWriter, req *http.Request) {
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.CoffeeOrder{
		components.CoffeeOrder{
			ID:           5,
			CustomerName: "Eve",
			CoffeeType:   "Mocha",
			Size:         "Large",
			Extras: []string{
				"Whipped cream",
				"Chocolate syrup",
			},
			Price: 6,
		},
		components.CoffeeOrder{
			ID:           6,
			CustomerName: "Grace",
			CoffeeType:   "Cold Brew",
			Size:         "Medium",
			Extras: []string{
				"Vanilla syrup",
			},
			Price: 5.5,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
