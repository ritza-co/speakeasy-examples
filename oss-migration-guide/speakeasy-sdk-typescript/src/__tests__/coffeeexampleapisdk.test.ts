/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { CoffeeExampleApiSDK } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Coffeeexampleapisdk Get Orders Orders Get Multiple Orders", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_orders_orders_get-multiple_orders",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getOrdersOrdersGet({});
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: 1,
      customerName: "Alice",
      coffeeType: "Latte",
      size: "Medium",
      extras: [
        "Extra shot",
        "Soy milk",
      ],
      price: 4.5,
    },
    {
      id: 2,
      customerName: "Bob",
      coffeeType: "Espresso",
      size: "Small",
      extras: [
        "Extra shot",
      ],
      price: 3.5,
    },
  ]);
});

test("Coffeeexampleapisdk Get Orders Orders Get Latte", async () => {
  const testHttpClient = createTestHTTPClient("get_orders_orders_get-latte");

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getOrdersOrdersGet({
    coffeeType: "Latte",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: 5,
      customerName: "Eve",
      coffeeType: "Mocha",
      size: "Large",
      extras: [
        "Whipped cream",
        "Chocolate syrup",
      ],
      price: 6,
    },
    {
      id: 6,
      customerName: "Grace",
      coffeeType: "Cold Brew",
      size: "Medium",
      extras: [
        "Vanilla syrup",
      ],
      price: 5.5,
    },
  ]);
});

test("Coffeeexampleapisdk Get Orders Orders Get Espresso", async () => {
  const testHttpClient = createTestHTTPClient("get_orders_orders_get-espresso");

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getOrdersOrdersGet({
    coffeeType: "Espresso",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: 5,
      customerName: "Eve",
      coffeeType: "Mocha",
      size: "Large",
      extras: [
        "Whipped cream",
        "Chocolate syrup",
      ],
      price: 6,
    },
    {
      id: 6,
      customerName: "Grace",
      coffeeType: "Cold Brew",
      size: "Medium",
      extras: [
        "Vanilla syrup",
      ],
      price: 5.5,
    },
  ]);
});

test("Coffeeexampleapisdk Create Order Orders Post Simple Order", async () => {
  const testHttpClient = createTestHTTPClient(
    "create_order_orders_post-simple_order",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.createOrderOrdersPost({
    id: 3,
    customerName: "Charlie",
    coffeeType: "Americano",
    size: "Large",
    price: 3.75,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 6,
    customerName: "Grace",
    coffeeType: "Cold Brew",
    size: "Medium",
    extras: [
      "Vanilla syrup",
    ],
    price: 5.5,
  });
});

test("Coffeeexampleapisdk Create Order Orders Post Complex Order", async () => {
  const testHttpClient = createTestHTTPClient(
    "create_order_orders_post-complex_order",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.createOrderOrdersPost({
    id: 4,
    customerName: "Diana",
    coffeeType: "Cappuccino",
    size: "Medium",
    extras: [
      "Whipped cream",
      "Caramel syrup",
    ],
    price: 5.25,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 5,
    customerName: "Eve",
    coffeeType: "Mocha",
    size: "Large",
    extras: [
      "Whipped cream",
      "Chocolate syrup",
    ],
    price: 6,
  });
});

test("Coffeeexampleapisdk Get Order Orders Order Id Get Order1", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_order_orders__order_id__get-order1",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getOrderOrdersOrderIdGet({
    orderId: 1,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 6,
    customerName: "Grace",
    coffeeType: "Cold Brew",
    size: "Medium",
    extras: [
      "Vanilla syrup",
    ],
    price: 5.5,
  });
});

test("Coffeeexampleapisdk Get Order Orders Order Id Get Order2", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_order_orders__order_id__get-order2",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getOrderOrdersOrderIdGet({
    orderId: 2,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 6,
    customerName: "Grace",
    coffeeType: "Cold Brew",
    size: "Medium",
    extras: [
      "Vanilla syrup",
    ],
    price: 5.5,
  });
});

test("Coffeeexampleapisdk Update Order Orders Order Id Put", async () => {
  const testHttpClient = createTestHTTPClient(
    "update_order_orders__order_id__put",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.updateOrderOrdersOrderIdPut({
    orderId: 11411,
    coffeeOrderUpdate: {
      customerName: "Alice",
      coffeeType: "Cappuccino",
      size: "Large",
      extras: [
        "Whipped cream",
      ],
      price: 5,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 1,
    customerName: "Alice",
    coffeeType: "Latte",
    size: "Medium",
    extras: [
      "Extra shot",
      "Soy milk",
    ],
    price: 4.5,
  });
});

test("Coffeeexampleapisdk Delete Order Orders Order Id Delete", async () => {
  const testHttpClient = createTestHTTPClient(
    "delete_order_orders__order_id__delete",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  await coffeeExampleApiSDK.deleteOrderOrdersOrderIdDelete({
    orderId: 229509,
  });
});

test("Coffeeexampleapisdk Get Coffee Types Coffee Types Get Coffee Types", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_coffee_types_coffee_types_get-coffee_types",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getCoffeeTypesCoffeeTypesGet();
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      id: 1,
      name: "Espresso",
      description: "Strong and bold coffee shot",
      priceMultiplier: 1,
    },
    {
      id: 2,
      name: "Latte",
      description: "Espresso with steamed milk",
      priceMultiplier: 1.2,
    },
    {
      id: 3,
      name: "Mocha",
      description: "Espresso with chocolate and steamed milk",
      priceMultiplier: 1.3,
    },
  ]);
});

test("Coffeeexampleapisdk Create Coffee Type Coffee Types Post", async () => {
  const testHttpClient = createTestHTTPClient(
    "create_coffee_type_coffee_types_post",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.createCoffeeTypeCoffeeTypesPost({
    id: 1,
    name: "Latte",
    description: "A milk-based espresso coffee",
    priceMultiplier: 1.2,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 1,
    name: "Latte",
    description: "A milk-based espresso coffee",
    priceMultiplier: 1.2,
  });
});

test("Coffeeexampleapisdk Get Coffee Type Coffee Types Type Id Get Espresso", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_coffee_type_coffee_types__type_id__get-espresso",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getCoffeeTypeCoffeeTypesTypeIdGet({
    typeId: 1,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 5,
    name: "Flat White",
    description: "Espresso with steamed whole milk",
    priceMultiplier: 1.25,
  });
});

test("Coffeeexampleapisdk Get Coffee Type Coffee Types Type Id Get Latte", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_coffee_type_coffee_types__type_id__get-latte",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.getCoffeeTypeCoffeeTypesTypeIdGet({
    typeId: 2,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 4,
    name: "Cold Brew",
    description: "Smooth, cold-steeped coffee",
    priceMultiplier: 1.4,
  });
});

test("Coffeeexampleapisdk Update Coffee Type Coffee Types Type Id Put", async () => {
  const testHttpClient = createTestHTTPClient(
    "update_coffee_type_coffee_types__type_id__put",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await coffeeExampleApiSDK.updateCoffeeTypeCoffeeTypesTypeIdPut(
    {
      typeId: 157866,
      coffeeType: {
        id: 1,
        name: "Latte",
        description: "A milk-based espresso coffee",
        priceMultiplier: 1.2,
      },
    },
  );
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 1,
    name: "Latte",
    description: "A milk-based espresso coffee",
    priceMultiplier: 1.2,
  });
});

test("Coffeeexampleapisdk Delete Coffee Type Coffee Types Type Id Delete", async () => {
  const testHttpClient = createTestHTTPClient(
    "delete_coffee_type_coffee_types__type_id__delete",
  );

  const coffeeExampleApiSDK = new CoffeeExampleApiSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  await coffeeExampleApiSDK.deleteCoffeeTypeCoffeeTypesTypeIdDelete({
    typeId: 366515,
  });
});
