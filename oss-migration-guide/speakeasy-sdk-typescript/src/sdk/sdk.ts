/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { createCoffeeTypeCoffeeTypesPost } from "../funcs/createCoffeeTypeCoffeeTypesPost.js";
import { createOrderOrdersPost } from "../funcs/createOrderOrdersPost.js";
import { deleteCoffeeTypeCoffeeTypesTypeIdDelete } from "../funcs/deleteCoffeeTypeCoffeeTypesTypeIdDelete.js";
import { deleteOrderOrdersOrderIdDelete } from "../funcs/deleteOrderOrdersOrderIdDelete.js";
import { getCoffeeTypeCoffeeTypesTypeIdGet } from "../funcs/getCoffeeTypeCoffeeTypesTypeIdGet.js";
import { getCoffeeTypesCoffeeTypesGet } from "../funcs/getCoffeeTypesCoffeeTypesGet.js";
import { getOrderOrdersOrderIdGet } from "../funcs/getOrderOrdersOrderIdGet.js";
import { getOrdersOrdersGet } from "../funcs/getOrdersOrdersGet.js";
import { updateCoffeeTypeCoffeeTypesTypeIdPut } from "../funcs/updateCoffeeTypeCoffeeTypesTypeIdPut.js";
import { updateOrderOrdersOrderIdPut } from "../funcs/updateOrderOrdersOrderIdPut.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CoffeeExampleApiSDK extends ClientSDK {
  /**
   * Get Orders
   *
   * @remarks
   * Retrieve all coffee orders.
   * If 'coffee_type' is provided, returns orders matching that coffee type.
   */
  async getOrdersOrdersGet(
    request: operations.GetOrdersOrdersGetRequest,
    options?: RequestOptions,
  ): Promise<Array<components.CoffeeOrder>> {
    return unwrapAsync(getOrdersOrdersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Order
   *
   * @remarks
   * Create a new coffee order.
   * Validates that the coffee type exists.
   */
  async createOrderOrdersPost(
    request: components.CoffeeOrder,
    options?: RequestOptions,
  ): Promise<components.CoffeeOrder> {
    return unwrapAsync(createOrderOrdersPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Order
   *
   * @remarks
   * Retrieve a specific coffee order by its ID.
   */
  async getOrderOrdersOrderIdGet(
    request: operations.GetOrderOrdersOrderIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.CoffeeOrder> {
    return unwrapAsync(getOrderOrdersOrderIdGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Order
   *
   * @remarks
   * Update an existing coffee order.
   */
  async updateOrderOrdersOrderIdPut(
    request: operations.UpdateOrderOrdersOrderIdPutRequest,
    options?: RequestOptions,
  ): Promise<components.CoffeeOrder> {
    return unwrapAsync(updateOrderOrdersOrderIdPut(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Order
   *
   * @remarks
   * Delete a coffee order.
   */
  async deleteOrderOrdersOrderIdDelete(
    request: operations.DeleteOrderOrdersOrderIdDeleteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(deleteOrderOrdersOrderIdDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Coffee Types
   *
   * @remarks
   * Retrieve all available coffee types.
   */
  async getCoffeeTypesCoffeeTypesGet(
    options?: RequestOptions,
  ): Promise<Array<components.CoffeeType>> {
    return unwrapAsync(getCoffeeTypesCoffeeTypesGet(
      this,
      options,
    ));
  }

  /**
   * Create Coffee Type
   *
   * @remarks
   * Create a new coffee type.
   */
  async createCoffeeTypeCoffeeTypesPost(
    request: components.CoffeeType,
    options?: RequestOptions,
  ): Promise<components.CoffeeType> {
    return unwrapAsync(createCoffeeTypeCoffeeTypesPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Coffee Type
   *
   * @remarks
   * Retrieve a specific coffee type by its ID.
   */
  async getCoffeeTypeCoffeeTypesTypeIdGet(
    request: operations.GetCoffeeTypeCoffeeTypesTypeIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.CoffeeType> {
    return unwrapAsync(getCoffeeTypeCoffeeTypesTypeIdGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Coffee Type
   *
   * @remarks
   * Update an existing coffee type.
   */
  async updateCoffeeTypeCoffeeTypesTypeIdPut(
    request: operations.UpdateCoffeeTypeCoffeeTypesTypeIdPutRequest,
    options?: RequestOptions,
  ): Promise<components.CoffeeType> {
    return unwrapAsync(updateCoffeeTypeCoffeeTypesTypeIdPut(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Coffee Type
   *
   * @remarks
   * Delete a coffee type.
   */
  async deleteCoffeeTypeCoffeeTypesTypeIdDelete(
    request: operations.DeleteCoffeeTypeCoffeeTypesTypeIdDeleteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(deleteCoffeeTypeCoffeeTypesTypeIdDelete(
      this,
      request,
      options,
    ));
  }
}
