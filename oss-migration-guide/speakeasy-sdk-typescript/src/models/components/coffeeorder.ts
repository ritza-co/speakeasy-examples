/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CoffeeOrder = {
  id: number;
  customerName: string;
  coffeeType: string;
  size: string;
  extras?: Array<string> | null | undefined;
  price: number;
};

/** @internal */
export const CoffeeOrder$inboundSchema: z.ZodType<
  CoffeeOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  customer_name: z.string(),
  coffee_type: z.string(),
  size: z.string(),
  extras: z.nullable(z.array(z.string())).optional(),
  price: z.number(),
}).transform((v) => {
  return remap$(v, {
    "customer_name": "customerName",
    "coffee_type": "coffeeType",
  });
});

/** @internal */
export type CoffeeOrder$Outbound = {
  id: number;
  customer_name: string;
  coffee_type: string;
  size: string;
  extras?: Array<string> | null | undefined;
  price: number;
};

/** @internal */
export const CoffeeOrder$outboundSchema: z.ZodType<
  CoffeeOrder$Outbound,
  z.ZodTypeDef,
  CoffeeOrder
> = z.object({
  id: z.number().int(),
  customerName: z.string(),
  coffeeType: z.string(),
  size: z.string(),
  extras: z.nullable(z.array(z.string())).optional(),
  price: z.number(),
}).transform((v) => {
  return remap$(v, {
    customerName: "customer_name",
    coffeeType: "coffee_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CoffeeOrder$ {
  /** @deprecated use `CoffeeOrder$inboundSchema` instead. */
  export const inboundSchema = CoffeeOrder$inboundSchema;
  /** @deprecated use `CoffeeOrder$outboundSchema` instead. */
  export const outboundSchema = CoffeeOrder$outboundSchema;
  /** @deprecated use `CoffeeOrder$Outbound` instead. */
  export type Outbound = CoffeeOrder$Outbound;
}

export function coffeeOrderToJSON(coffeeOrder: CoffeeOrder): string {
  return JSON.stringify(CoffeeOrder$outboundSchema.parse(coffeeOrder));
}

export function coffeeOrderFromJSON(
  jsonString: string,
): SafeParseResult<CoffeeOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CoffeeOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CoffeeOrder' from JSON`,
  );
}
