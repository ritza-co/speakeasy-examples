/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOrdersOrdersGetRequest = {
  /**
   * Optional filter by coffee type (case-insensitive)
   */
  coffeeType?: string | null | undefined;
};

/** @internal */
export const GetOrdersOrdersGetRequest$inboundSchema: z.ZodType<
  GetOrdersOrdersGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  coffee_type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "coffee_type": "coffeeType",
  });
});

/** @internal */
export type GetOrdersOrdersGetRequest$Outbound = {
  coffee_type?: string | null | undefined;
};

/** @internal */
export const GetOrdersOrdersGetRequest$outboundSchema: z.ZodType<
  GetOrdersOrdersGetRequest$Outbound,
  z.ZodTypeDef,
  GetOrdersOrdersGetRequest
> = z.object({
  coffeeType: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    coffeeType: "coffee_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrdersOrdersGetRequest$ {
  /** @deprecated use `GetOrdersOrdersGetRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrdersOrdersGetRequest$inboundSchema;
  /** @deprecated use `GetOrdersOrdersGetRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrdersOrdersGetRequest$outboundSchema;
  /** @deprecated use `GetOrdersOrdersGetRequest$Outbound` instead. */
  export type Outbound = GetOrdersOrdersGetRequest$Outbound;
}

export function getOrdersOrdersGetRequestToJSON(
  getOrdersOrdersGetRequest: GetOrdersOrdersGetRequest,
): string {
  return JSON.stringify(
    GetOrdersOrdersGetRequest$outboundSchema.parse(getOrdersOrdersGetRequest),
  );
}

export function getOrdersOrdersGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrdersOrdersGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrdersOrdersGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrdersOrdersGetRequest' from JSON`,
  );
}
