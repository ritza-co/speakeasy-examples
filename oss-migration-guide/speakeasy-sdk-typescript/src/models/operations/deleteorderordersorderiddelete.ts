/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteOrderOrdersOrderIdDeleteRequest = {
  orderId: number;
};

/** @internal */
export const DeleteOrderOrdersOrderIdDeleteRequest$inboundSchema: z.ZodType<
  DeleteOrderOrdersOrderIdDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
  });
});

/** @internal */
export type DeleteOrderOrdersOrderIdDeleteRequest$Outbound = {
  order_id: number;
};

/** @internal */
export const DeleteOrderOrdersOrderIdDeleteRequest$outboundSchema: z.ZodType<
  DeleteOrderOrdersOrderIdDeleteRequest$Outbound,
  z.ZodTypeDef,
  DeleteOrderOrdersOrderIdDeleteRequest
> = z.object({
  orderId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOrderOrdersOrderIdDeleteRequest$ {
  /** @deprecated use `DeleteOrderOrdersOrderIdDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteOrderOrdersOrderIdDeleteRequest$inboundSchema;
  /** @deprecated use `DeleteOrderOrdersOrderIdDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteOrderOrdersOrderIdDeleteRequest$outboundSchema;
  /** @deprecated use `DeleteOrderOrdersOrderIdDeleteRequest$Outbound` instead. */
  export type Outbound = DeleteOrderOrdersOrderIdDeleteRequest$Outbound;
}

export function deleteOrderOrdersOrderIdDeleteRequestToJSON(
  deleteOrderOrdersOrderIdDeleteRequest: DeleteOrderOrdersOrderIdDeleteRequest,
): string {
  return JSON.stringify(
    DeleteOrderOrdersOrderIdDeleteRequest$outboundSchema.parse(
      deleteOrderOrdersOrderIdDeleteRequest,
    ),
  );
}

export function deleteOrderOrdersOrderIdDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOrderOrdersOrderIdDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteOrderOrdersOrderIdDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOrderOrdersOrderIdDeleteRequest' from JSON`,
  );
}
