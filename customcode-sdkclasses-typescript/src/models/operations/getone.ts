/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOneRequest = {
  id: string;
};

/** @internal */
export const GetOneRequest$inboundSchema: z.ZodType<
  GetOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetOneRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetOneRequest$outboundSchema: z.ZodType<
  GetOneRequest$Outbound,
  z.ZodTypeDef,
  GetOneRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneRequest$ {
  /** @deprecated use `GetOneRequest$inboundSchema` instead. */
  export const inboundSchema = GetOneRequest$inboundSchema;
  /** @deprecated use `GetOneRequest$outboundSchema` instead. */
  export const outboundSchema = GetOneRequest$outboundSchema;
  /** @deprecated use `GetOneRequest$Outbound` instead. */
  export type Outbound = GetOneRequest$Outbound;
}

export function getOneRequestToJSON(getOneRequest: GetOneRequest): string {
  return JSON.stringify(GetOneRequest$outboundSchema.parse(getOneRequest));
}

export function getOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneRequest' from JSON`,
  );
}
