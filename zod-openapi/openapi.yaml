openapi: 3.1.0
info:
  title: Burger Restaurant API
  description: An API for managing burgers and orders at a restaurant.
  version: 1.0.0
servers:
  - url: https://example.com
    description: The production server.
x-speakeasy-retries:
  strategy: backoff
  backoff:
    initialInterval: 500
    maxInterval: 60000
    maxElapsedTime: 3600000
    exponent: 1.5
  statusCodes:
    - 5XX
  retryConnectionErrors: true
paths:
  /burgers:
    post:
      operationId: createBurger
      summary: Create a new burger
      description: Creates a new burger in the database.
      tags:
        - burgers
      requestBody:
        description: The burger to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BurgerCreate"
      responses:
        "201":
          description: The burger was created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/burgerSchema"
    get:
      operationId: listBurgers
      summary: List burgers
      description: Lists all burgers in the database.
      tags:
        - burgers
      responses:
        "200":
          description: The burgers were retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/burgerSchema"
  /burgers/{id}:
    get:
      operationId: getBurger
      summary: Get a burger
      description: Gets a burger from the database.
      tags:
        - burgers
      parameters:
        - in: path
          name: id
          description: The unique identifier of the burger.
          schema:
            $ref: "#/components/schemas/BurgerId"
          required: true
      responses:
        "200":
          description: The burger was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/burgerSchema"
  /orders:
    post:
      operationId: createOrder
      summary: Create a new order
      description: Creates a new order in the database.
      tags:
        - orders
      requestBody:
        description: The order to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: The order was created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders/{id}:
    get:
      operationId: getOrder
      summary: Get an order
      description: Gets an order from the database.
      tags:
        - orders
      parameters:
        - in: path
          name: id
          description: The unique identifier of the order.
          schema:
            $ref: "#/components/schemas/OrderId"
          required: true
      responses:
        "200":
          description: The order was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
webhooks:
  /burgers:
    post:
      operationId: createBurgerWebhook
      summary: New burger webhook
      description: A webhook that is called when a new burger is created.
      tags:
        - burgers
      requestBody:
        description: The burger that was created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/burgerSchema"
      responses:
        "200":
          description: The webhook was processed successfully.
components:
  schemas:
    burgerSchema:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/BurgerId"
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: The name of the burger.
          example: Veggie Burger
        description:
          type: string
          maxLength: 255
          description: The description of the burger.
          example: A delicious bean burger with avocado.
      required:
        - id
        - name
    BurgerCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: The name of the burger.
          example: Veggie Burger
        description:
          type: string
          maxLength: 255
          description: The description of the burger.
          example: A delicious bean burger with avocado.
      required:
        - name
      description: A burger to create.
    BurgerId:
      type: number
      minimum: 1
      description: The unique identifier of the burger.
      example: 1
    Order:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
        burger_ids:
          type: array
          items:
            $ref: "#/components/schemas/BurgerId"
          minItems: 1
          description: The burgers in the order.
          example: &a1
            - 1
            - 2
        time:
          type: string
          format: date-time
          description: The time the order was placed.
          example: 2021-01-01T00:00:00.000Z
        table:
          type: number
          minimum: 1
          description: The table the order is for.
          example: 1
        status:
          type: string
          enum: &a2
            - pending
            - in_progress
            - ready
            - delivered
          description: The status of the order.
          example: pending
        note:
          type: string
          description: A note for the order.
          example: No onions.
      required:
        - id
        - burger_ids
        - time
        - table
        - status
      description: An order placed at the restaurant.
    OrderCreate:
      type: object
      properties:
        burger_ids:
          type: array
          items:
            $ref: "#/components/schemas/BurgerId"
          minItems: 1
          description: The burgers in the order.
          example: *a1
        time:
          type: string
          format: date-time
          description: The time the order was placed.
          example: 2021-01-01T00:00:00.000Z
        table:
          type: number
          minimum: 1
          description: The table the order is for.
          example: 1
        status:
          type: string
          enum: *a2
          description: The status of the order.
          example: pending
        note:
          type: string
          description: A note for the order.
          example: No onions.
      required:
        - burger_ids
        - time
        - table
        - status
      description: An order to create.
    OrderId:
      type: number
      minimum: 1
      description: The unique identifier of the order.
      example: 1

