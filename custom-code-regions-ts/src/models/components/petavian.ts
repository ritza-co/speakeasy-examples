/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PetAvian = {
  id: string;
  species: string;
  /**
   * Length from wingtip to wingtip, in cm.
   */
  wingspan: number;
};

/** @internal */
export const PetAvian$inboundSchema: z.ZodType<
  PetAvian,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  species: z.string(),
  wingspan: z.number(),
});

/** @internal */
export type PetAvian$Outbound = {
  id: string;
  species: string;
  wingspan: number;
};

/** @internal */
export const PetAvian$outboundSchema: z.ZodType<
  PetAvian$Outbound,
  z.ZodTypeDef,
  PetAvian
> = z.object({
  id: z.string(),
  species: z.string(),
  wingspan: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PetAvian$ {
  /** @deprecated use `PetAvian$inboundSchema` instead. */
  export const inboundSchema = PetAvian$inboundSchema;
  /** @deprecated use `PetAvian$outboundSchema` instead. */
  export const outboundSchema = PetAvian$outboundSchema;
  /** @deprecated use `PetAvian$Outbound` instead. */
  export type Outbound = PetAvian$Outbound;
}

export function petAvianToJSON(petAvian: PetAvian): string {
  return JSON.stringify(PetAvian$outboundSchema.parse(petAvian));
}

export function petAvianFromJSON(
  jsonString: string,
): SafeParseResult<PetAvian, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PetAvian$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PetAvian' from JSON`,
  );
}
