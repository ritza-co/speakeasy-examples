/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PetCanine = {
  id: string;
  breed: string;
  /**
   * Length from nose to tail, in cm.
   */
  length: number;
};

/** @internal */
export const PetCanine$inboundSchema: z.ZodType<
  PetCanine,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  breed: z.string(),
  length: z.number(),
});

/** @internal */
export type PetCanine$Outbound = {
  id: string;
  breed: string;
  length: number;
};

/** @internal */
export const PetCanine$outboundSchema: z.ZodType<
  PetCanine$Outbound,
  z.ZodTypeDef,
  PetCanine
> = z.object({
  id: z.string(),
  breed: z.string(),
  length: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PetCanine$ {
  /** @deprecated use `PetCanine$inboundSchema` instead. */
  export const inboundSchema = PetCanine$inboundSchema;
  /** @deprecated use `PetCanine$outboundSchema` instead. */
  export const outboundSchema = PetCanine$outboundSchema;
  /** @deprecated use `PetCanine$Outbound` instead. */
  export type Outbound = PetCanine$Outbound;
}

export function petCanineToJSON(petCanine: PetCanine): string {
  return JSON.stringify(PetCanine$outboundSchema.parse(petCanine));
}

export function petCanineFromJSON(
  jsonString: string,
): SafeParseResult<PetCanine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PetCanine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PetCanine' from JSON`,
  );
}
