/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AcmeTodoApiCore } from "../core.js";
import { updateTodo } from "../funcs/updateTodo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAcmeTodoApiContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type UpdateTodoMutationVariables = {
  request: operations.UpdateTodoRequest;
  options?: RequestOptions;
};

export type UpdateTodoMutationData = components.Todo;

/**
 * Update a todo item
 */
export function useUpdateTodoMutation(
  options?: MutationHookOptions<
    UpdateTodoMutationData,
    Error,
    UpdateTodoMutationVariables
  >,
): UseMutationResult<
  UpdateTodoMutationData,
  Error,
  UpdateTodoMutationVariables
> {
  const client = useAcmeTodoApiContext();
  return useMutation({
    ...buildUpdateTodoMutation(client, options),
    ...options,
  });
}

export function mutationKeyUpdateTodo(): MutationKey {
  return ["@acme/todo-sdk", "updateTodo"];
}

export function buildUpdateTodoMutation(
  client$: AcmeTodoApiCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: UpdateTodoMutationVariables,
  ) => Promise<UpdateTodoMutationData>;
} {
  return {
    mutationKey: mutationKeyUpdateTodo(),
    mutationFn: function updateTodoMutationFn({
      request,
      options,
    }): Promise<UpdateTodoMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(updateTodo(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
