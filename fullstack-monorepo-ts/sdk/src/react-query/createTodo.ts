/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { AcmeTodoApiCore } from "../core.js";
import { createTodo } from "../funcs/createTodo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useAcmeTodoApiContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CreateTodoMutationVariables = {
  request?: components.CreateTodoRequest | undefined;
  options?: RequestOptions;
};

export type CreateTodoMutationData = components.Todo;

/**
 * Create a todo item
 */
export function useCreateTodoMutation(
  options?: MutationHookOptions<
    CreateTodoMutationData,
    Error,
    CreateTodoMutationVariables
  >,
): UseMutationResult<
  CreateTodoMutationData,
  Error,
  CreateTodoMutationVariables
> {
  const client = useAcmeTodoApiContext();
  return useMutation({
    ...buildCreateTodoMutation(client, options),
    ...options,
  });
}

export function mutationKeyCreateTodo(): MutationKey {
  return ["@acme/todo-sdk", "createTodo"];
}

export function buildCreateTodoMutation(
  client$: AcmeTodoApiCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CreateTodoMutationVariables,
  ) => Promise<CreateTodoMutationData>;
} {
  return {
    mutationKey: mutationKeyCreateTodo(),
    mutationFn: function createTodoMutationFn({
      request,
      options,
    }): Promise<CreateTodoMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(createTodo(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
