/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTodoRequest = {
  id: string;
  updateTodoRequest?: components.UpdateTodoRequest | undefined;
};

/** @internal */
export const UpdateTodoRequest$inboundSchema: z.ZodType<
  UpdateTodoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  UpdateTodoRequest: components.UpdateTodoRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "UpdateTodoRequest": "updateTodoRequest",
  });
});

/** @internal */
export type UpdateTodoRequest$Outbound = {
  id: string;
  UpdateTodoRequest?: components.UpdateTodoRequest$Outbound | undefined;
};

/** @internal */
export const UpdateTodoRequest$outboundSchema: z.ZodType<
  UpdateTodoRequest$Outbound,
  z.ZodTypeDef,
  UpdateTodoRequest
> = z.object({
  id: z.string(),
  updateTodoRequest: components.UpdateTodoRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    updateTodoRequest: "UpdateTodoRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTodoRequest$ {
  /** @deprecated use `UpdateTodoRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTodoRequest$inboundSchema;
  /** @deprecated use `UpdateTodoRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTodoRequest$outboundSchema;
  /** @deprecated use `UpdateTodoRequest$Outbound` instead. */
  export type Outbound = UpdateTodoRequest$Outbound;
}

export function updateTodoRequestToJSON(
  updateTodoRequest: UpdateTodoRequest,
): string {
  return JSON.stringify(
    UpdateTodoRequest$outboundSchema.parse(updateTodoRequest),
  );
}

export function updateTodoRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTodoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTodoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTodoRequest' from JSON`,
  );
}
