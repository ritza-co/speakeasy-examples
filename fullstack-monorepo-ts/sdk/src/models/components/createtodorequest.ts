/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTodoRequest = {
  title: string;
  dueDate?: RFCDate | undefined;
  completed?: boolean | undefined;
};

/** @internal */
export const CreateTodoRequest$inboundSchema: z.ZodType<
  CreateTodoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  due_date: z.string().transform(v => new RFCDate(v)).optional(),
  completed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "due_date": "dueDate",
  });
});

/** @internal */
export type CreateTodoRequest$Outbound = {
  title: string;
  due_date?: string | undefined;
  completed?: boolean | undefined;
};

/** @internal */
export const CreateTodoRequest$outboundSchema: z.ZodType<
  CreateTodoRequest$Outbound,
  z.ZodTypeDef,
  CreateTodoRequest
> = z.object({
  title: z.string(),
  dueDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  completed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    dueDate: "due_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTodoRequest$ {
  /** @deprecated use `CreateTodoRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTodoRequest$inboundSchema;
  /** @deprecated use `CreateTodoRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTodoRequest$outboundSchema;
  /** @deprecated use `CreateTodoRequest$Outbound` instead. */
  export type Outbound = CreateTodoRequest$Outbound;
}

export function createTodoRequestToJSON(
  createTodoRequest: CreateTodoRequest,
): string {
  return JSON.stringify(
    CreateTodoRequest$outboundSchema.parse(createTodoRequest),
  );
}

export function createTodoRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTodoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTodoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTodoRequest' from JSON`,
  );
}
