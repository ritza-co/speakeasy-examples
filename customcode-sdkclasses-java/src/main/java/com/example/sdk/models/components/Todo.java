/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.example.sdk.models.components;

import java.util.Objects;

import com.example.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
// #region imports
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;
// #endregion imports

public class Todo {

    @JsonProperty("id")
    private String id;

    @JsonProperty("title")
    private String title;

    @JsonProperty("description")
    private String description;

    @JsonProperty("completed")
    private boolean completed;

    @JsonCreator
    public Todo(
            @JsonProperty("id") String id,
            @JsonProperty("title") String title,
            @JsonProperty("description") String description,
            @JsonProperty("completed") boolean completed) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(completed, "completed");
        this.id = id;
        this.title = title;
        this.description = description;
        this.completed = completed;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public String description() {
        return description;
    }

    @JsonIgnore
    public boolean completed() {
        return completed;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Todo withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Todo withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Todo withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public Todo withCompleted(boolean completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = completed;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Todo other = (Todo) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.completed, other.completed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            title,
            description,
            completed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Todo.class,
                "id", id,
                "title", title,
                "description", description,
                "completed", completed);
    }

    // #region class-body
    public String render() throws Exception {
        Parser parser = Parser.builder().build();
        HtmlRenderer renderer = HtmlRenderer.builder().build();
        String markdown = String.format("# %s\n\n%s", title(), description());

        return renderer.render(parser.parse(markdown));
    }
    // #endregion class-body
    
    public final static class Builder {
 
        private String id;
 
        private String title;
 
        private String description;
 
        private Boolean completed;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder completed(boolean completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = completed;
            return this;
        }
        
        public Todo build() {
            return new Todo(
                id,
                title,
                description,
                completed);
        }
    }
}
