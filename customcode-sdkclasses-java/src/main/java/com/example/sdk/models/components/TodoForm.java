/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.example.sdk.models.components;

import com.example.sdk.utils.LazySingletonValue;
import com.example.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class TodoForm {

    @JsonProperty("title")
    private String title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed")
    private Optional<Boolean> completed;

    @JsonCreator
    public TodoForm(
            @JsonProperty("title") String title,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("completed") Optional<Boolean> completed) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(completed, "completed");
        this.title = title;
        this.description = description;
        this.completed = completed;
    }
    
    public TodoForm(
            String title) {
        this(title, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<Boolean> completed() {
        return completed;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public TodoForm withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public TodoForm withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public TodoForm withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public TodoForm withCompleted(boolean completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = Optional.ofNullable(completed);
        return this;
    }

    public TodoForm withCompleted(Optional<Boolean> completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = completed;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TodoForm other = (TodoForm) o;
        return 
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.completed, other.completed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            title,
            description,
            completed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TodoForm.class,
                "title", title,
                "description", description,
                "completed", completed);
    }
    
    public final static class Builder {
 
        private String title;
 
        private Optional<String> description;
 
        private Optional<Boolean> completed;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder completed(boolean completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = Optional.ofNullable(completed);
            return this;
        }

        public Builder completed(Optional<Boolean> completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = completed;
            return this;
        }
        
        public TodoForm build() {
            if (description == null) {
                description = _SINGLETON_VALUE_Description.value();
            }
            if (completed == null) {
                completed = _SINGLETON_VALUE_Completed.value();
            }
            return new TodoForm(
                title,
                description,
                completed);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Description =
                new LazySingletonValue<>(
                        "description",
                        "\"\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Completed =
                new LazySingletonValue<>(
                        "completed",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
