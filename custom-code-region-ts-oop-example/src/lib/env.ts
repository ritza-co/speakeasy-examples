/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dlv } from "./dlv.js";

import * as z from "zod";
import { SDKOptions } from "./config.js";

export interface Env {
  API_API_KEY?: string | undefined;

  /**
   * Sets the tenant parameter for all supported operations
   */
  API_TENANT?: string | undefined;

  /**
   * Sets the tenantId parameter for all supported operations
   */
  API_TENANT_ID?: string | undefined;

  /**
   * Sets the databaseName parameter for all supported operations
   */
  API_DATABASE_NAME?: string | undefined;

  API_DEBUG?: boolean | undefined;
}

export const envSchema: z.ZodType<Env, z.ZodTypeDef, unknown> = z.object({
  API_API_KEY: z.string().optional(),

  API_TENANT: z.string().optional(),
  API_TENANT_ID: z.string().optional(),
  API_DATABASE_NAME: z.string().optional(),

  API_DEBUG: z.coerce.boolean().optional(),
});

let envMemo: Env | undefined = undefined;
/**
 * Reads and validates environment variables.
 */
export function env(): Env {
  if (envMemo) {
    return envMemo;
  }

  envMemo = envSchema.parse(
    dlv(globalThis, "process.env") ?? dlv(globalThis, "Deno.env") ?? {},
  );
  return envMemo;
}

/**
 * Clears the cached env object. Useful for testing with a fresh environment.
 */
export function resetEnv() {
  envMemo = undefined;
}

/**
 * Populates global parameters with environment variables.
 */
export function fillGlobals(options: SDKOptions): SDKOptions {
  const clone = { ...options };

  const envVars = env();

  if (typeof envVars.API_TENANT !== "undefined") {
    clone.tenant ??= envVars.API_TENANT;
  }
  if (typeof envVars.API_TENANT_ID !== "undefined") {
    clone.tenantId ??= envVars.API_TENANT_ID;
  }
  if (typeof envVars.API_DATABASE_NAME !== "undefined") {
    clone.databaseName ??= envVars.API_DATABASE_NAME;
  }

  return clone;
}
