/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { collectionsAdd } from "../funcs/collectionsAdd.js";
import { collectionsCount } from "../funcs/collectionsCount.js";
import { collectionsCountRecords } from "../funcs/collectionsCountRecords.js";
import { collectionsCreate } from "../funcs/collectionsCreate.js";
import { collectionsDelete } from "../funcs/collectionsDelete.js";
import { collectionsDeleteRecords } from "../funcs/collectionsDeleteRecords.js";
import { collectionsGet } from "../funcs/collectionsGet.js";
import { collectionsList } from "../funcs/collectionsList.js";
import { collectionsQuery } from "../funcs/collectionsQuery.js";
import { collectionsRetrieveRecords } from "../funcs/collectionsRetrieveRecords.js";
import { collectionsUpdate } from "../funcs/collectionsUpdate.js";
import { collectionsUpdateById } from "../funcs/collectionsUpdateById.js";
import { collectionsUpsert } from "../funcs/collectionsUpsert.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
// #region imports
import { collectionsGetOrCreate } from "../funcs/collectionsGetOrCreate.js";
import { Collection } from "../records/collection.js";
// #endregion imports

export class Collections extends ClientSDK {
  // #region sdk-class-body
  async getOrCreate(
    request: Omit<operations.CreateCollectionRequest["createCollectionPayload"], "getOrCreate">,
    options?: RequestOptions,
  ): Promise<Collection> {
    return unwrapAsync(collectionsGetOrCreate(this, {
      databaseName: this._options.databaseName,
      tenantId: this._options.tenantId,
      createCollectionPayload: {
        ...request,
        getOrCreate: true,
      },
    }, options));
  }
  // #endregion sdk-class-body

  /**
   * Lists all collections in the specified database.
   */
  async list(
    request: operations.ListCollectionsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Vec>> {
    return unwrapAsync(collectionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new collection under the specified database.
   */
  async create(
    request: operations.CreateCollectionRequest,
    options?: RequestOptions,
  ): Promise<components.Collection> {
    return unwrapAsync(collectionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a collection by ID or name.
   */
  async get(
    request: operations.GetCollectionRequest,
    options?: RequestOptions,
  ): Promise<components.Collection> {
    return unwrapAsync(collectionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an existing collection's name or metadata.
   */
  async update(
    request: operations.UpdateCollectionRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateCollectionResponse> {
    return unwrapAsync(collectionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a collection in a given database.
   */
  async delete(
    request: operations.DeleteCollectionRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateCollectionResponse> {
    return unwrapAsync(collectionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves the number of records in a collection.
   */
  async countRecords(
    request: operations.CollectionCountRequest,
    options?: RequestOptions,
  ): Promise<number> {
    return unwrapAsync(collectionsCountRecords(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves records from a collection by ID or metadata filter.
   */
  async retrieveRecords(
    request: operations.CollectionGetRequest,
    options?: RequestOptions,
  ): Promise<components.GetResponse> {
    return unwrapAsync(collectionsRetrieveRecords(
      this,
      request,
      options,
    ));
  }

  /**
   * Query a collection in a variety of ways, including vector search, metadata filtering, and full-text search
   */
  async query(
    request: operations.CollectionQueryRequest,
    options?: RequestOptions,
  ): Promise<components.QueryResponse> {
    return unwrapAsync(collectionsQuery(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves the total number of collections in a given database.
   */
  async count(
    request: operations.CountCollectionsRequest,
    options?: RequestOptions,
  ): Promise<number> {
    return unwrapAsync(collectionsCount(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds records to a collection.
   */
  async add(
    request: operations.CollectionAddRequest,
    options?: RequestOptions,
  ): Promise<components.AddCollectionRecordsResponse> {
    return unwrapAsync(collectionsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes records in a collection. Can filter by IDs or metadata.
   */
  async deleteRecords(
    request: operations.CollectionDeleteRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteCollectionRecordsResponse> {
    return unwrapAsync(collectionsDeleteRecords(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates records in a collection by ID.
   */
  async updateById(
    request: operations.CollectionUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateCollectionRecordsResponse> {
    return unwrapAsync(collectionsUpdateById(
      this,
      request,
      options,
    ));
  }

  /**
   * Upserts records in a collection (create if not exists, otherwise update).
   */
  async upsert(
    request: operations.CollectionUpsertRequest,
    options?: RequestOptions,
  ): Promise<components.UpsertCollectionRecordsResponse> {
    return unwrapAsync(collectionsUpsert(
      this,
      request,
      options,
    ));
  }
}
