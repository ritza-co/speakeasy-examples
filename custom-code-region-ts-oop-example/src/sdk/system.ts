/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { systemGetHealthcheck } from "../funcs/systemGetHealthcheck.js";
import { systemGetHeartbeat } from "../funcs/systemGetHeartbeat.js";
import { systemGetPreFlightChecks } from "../funcs/systemGetPreFlightChecks.js";
import { systemGetVersion } from "../funcs/systemGetVersion.js";
import { systemReset } from "../funcs/systemReset.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class System extends ClientSDK {
  /**
   * Health check endpoint that returns 200 if the server and executor are ready
   */
  async getHealthcheck(
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(systemGetHealthcheck(
      this,
      options,
    ));
  }

  /**
   * Heartbeat endpoint that returns a nanosecond timestamp of the current time. Useful for making sure the client remains connected.
   */
  async getHeartbeat(
    options?: RequestOptions,
  ): Promise<components.HeartbeatResponse> {
    return unwrapAsync(systemGetHeartbeat(
      this,
      options,
    ));
  }

  /**
   * Pre-flight checks endpoint reporting basic readiness info.
   */
  async getPreFlightChecks(
    options?: RequestOptions,
  ): Promise<components.ChecklistResponse> {
    return unwrapAsync(systemGetPreFlightChecks(
      this,
      options,
    ));
  }

  /**
   * Reset endpoint allowing authorized users to reset the database.
   */
  async reset(
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(systemReset(
      this,
      options,
    ));
  }

  /**
   * Returns the version of the server.
   */
  async getVersion(
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(systemGetVersion(
      this,
      options,
    ));
  }
}
