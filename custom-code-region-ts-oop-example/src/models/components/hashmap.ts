/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HashMap = boolean | number | number | string;

/** @internal */
export const HashMap$inboundSchema: z.ZodType<HashMap, z.ZodTypeDef, unknown> =
  z.union([z.boolean(), z.number().int(), z.number(), z.string()]);

/** @internal */
export type HashMap$Outbound = boolean | number | number | string;

/** @internal */
export const HashMap$outboundSchema: z.ZodType<
  HashMap$Outbound,
  z.ZodTypeDef,
  HashMap
> = z.union([z.boolean(), z.number().int(), z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HashMap$ {
  /** @deprecated use `HashMap$inboundSchema` instead. */
  export const inboundSchema = HashMap$inboundSchema;
  /** @deprecated use `HashMap$outboundSchema` instead. */
  export const outboundSchema = HashMap$outboundSchema;
  /** @deprecated use `HashMap$Outbound` instead. */
  export type Outbound = HashMap$Outbound;
}

export function hashMapToJSON(hashMap: HashMap): string {
  return JSON.stringify(HashMap$outboundSchema.parse(hashMap));
}

export function hashMapFromJSON(
  jsonString: string,
): SafeParseResult<HashMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HashMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HashMap' from JSON`,
  );
}
