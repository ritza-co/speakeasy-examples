/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HashMap,
  HashMap$inboundSchema,
  HashMap$Outbound,
  HashMap$outboundSchema,
} from "./hashmap.js";

export type CreateCollectionPayload = {
  configuration?: any | undefined;
  getOrCreate: boolean;
  metadata?: { [k: string]: HashMap } | null | undefined;
  name: string;
};

/** @internal */
export const CreateCollectionPayload$inboundSchema: z.ZodType<
  CreateCollectionPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration: z.any().optional(),
  get_or_create: z.boolean(),
  metadata: z.nullable(z.record(HashMap$inboundSchema)).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "get_or_create": "getOrCreate",
  });
});

/** @internal */
export type CreateCollectionPayload$Outbound = {
  configuration?: any | undefined;
  get_or_create: boolean;
  metadata?: { [k: string]: HashMap$Outbound } | null | undefined;
  name: string;
};

/** @internal */
export const CreateCollectionPayload$outboundSchema: z.ZodType<
  CreateCollectionPayload$Outbound,
  z.ZodTypeDef,
  CreateCollectionPayload
> = z.object({
  configuration: z.any().optional(),
  getOrCreate: z.boolean(),
  metadata: z.nullable(z.record(HashMap$outboundSchema)).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    getOrCreate: "get_or_create",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCollectionPayload$ {
  /** @deprecated use `CreateCollectionPayload$inboundSchema` instead. */
  export const inboundSchema = CreateCollectionPayload$inboundSchema;
  /** @deprecated use `CreateCollectionPayload$outboundSchema` instead. */
  export const outboundSchema = CreateCollectionPayload$outboundSchema;
  /** @deprecated use `CreateCollectionPayload$Outbound` instead. */
  export type Outbound = CreateCollectionPayload$Outbound;
}

export function createCollectionPayloadToJSON(
  createCollectionPayload: CreateCollectionPayload,
): string {
  return JSON.stringify(
    CreateCollectionPayload$outboundSchema.parse(createCollectionPayload),
  );
}

export function createCollectionPayloadFromJSON(
  jsonString: string,
): SafeParseResult<CreateCollectionPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCollectionPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCollectionPayload' from JSON`,
  );
}
