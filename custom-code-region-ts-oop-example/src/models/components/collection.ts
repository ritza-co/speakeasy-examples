/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HashMap,
  HashMap$inboundSchema,
  HashMap$Outbound,
  HashMap$outboundSchema,
} from "./hashmap.js";

export type Collection = {
  /**
   * CollectionUuid is a wrapper around Uuid to provide a type for the collection id.
   */
  collectionId: string;
  configurationJson?: any | undefined;
  database: string;
  dimension?: number | null | undefined;
  logPosition: number;
  metadata?: { [k: string]: HashMap } | null | undefined;
  name: string;
  tenant: string;
  version: number;
};

/** @internal */
export const Collection$inboundSchema: z.ZodType<
  Collection,
  z.ZodTypeDef,
  unknown
> = z.object({
  collection_id: z.string(),
  configuration_json: z.any().optional(),
  database: z.string(),
  dimension: z.nullable(z.number().int()).optional(),
  log_position: z.number().int(),
  metadata: z.nullable(z.record(HashMap$inboundSchema)).optional(),
  name: z.string(),
  tenant: z.string(),
  version: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "collection_id": "collectionId",
    "configuration_json": "configurationJson",
    "log_position": "logPosition",
  });
});

/** @internal */
export type Collection$Outbound = {
  collection_id: string;
  configuration_json?: any | undefined;
  database: string;
  dimension?: number | null | undefined;
  log_position: number;
  metadata?: { [k: string]: HashMap$Outbound } | null | undefined;
  name: string;
  tenant: string;
  version: number;
};

/** @internal */
export const Collection$outboundSchema: z.ZodType<
  Collection$Outbound,
  z.ZodTypeDef,
  Collection
> = z.object({
  collectionId: z.string(),
  configurationJson: z.any().optional(),
  database: z.string(),
  dimension: z.nullable(z.number().int()).optional(),
  logPosition: z.number().int(),
  metadata: z.nullable(z.record(HashMap$outboundSchema)).optional(),
  name: z.string(),
  tenant: z.string(),
  version: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    collectionId: "collection_id",
    configurationJson: "configuration_json",
    logPosition: "log_position",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Collection$ {
  /** @deprecated use `Collection$inboundSchema` instead. */
  export const inboundSchema = Collection$inboundSchema;
  /** @deprecated use `Collection$outboundSchema` instead. */
  export const outboundSchema = Collection$outboundSchema;
  /** @deprecated use `Collection$Outbound` instead. */
  export type Outbound = Collection$Outbound;
}

export function collectionToJSON(collection: Collection): string {
  return JSON.stringify(Collection$outboundSchema.parse(collection));
}

export function collectionFromJSON(
  jsonString: string,
): SafeParseResult<Collection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Collection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Collection' from JSON`,
  );
}
