/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCollectionRecordsPayload = {
  where?: any | undefined;
  whereDocument?: any | undefined;
  ids?: Array<string> | null | undefined;
};

/** @internal */
export const DeleteCollectionRecordsPayload$inboundSchema: z.ZodType<
  DeleteCollectionRecordsPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  where: z.any().optional(),
  where_document: z.any().optional(),
  ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "where_document": "whereDocument",
  });
});

/** @internal */
export type DeleteCollectionRecordsPayload$Outbound = {
  where?: any | undefined;
  where_document?: any | undefined;
  ids?: Array<string> | null | undefined;
};

/** @internal */
export const DeleteCollectionRecordsPayload$outboundSchema: z.ZodType<
  DeleteCollectionRecordsPayload$Outbound,
  z.ZodTypeDef,
  DeleteCollectionRecordsPayload
> = z.object({
  where: z.any().optional(),
  whereDocument: z.any().optional(),
  ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    whereDocument: "where_document",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCollectionRecordsPayload$ {
  /** @deprecated use `DeleteCollectionRecordsPayload$inboundSchema` instead. */
  export const inboundSchema = DeleteCollectionRecordsPayload$inboundSchema;
  /** @deprecated use `DeleteCollectionRecordsPayload$outboundSchema` instead. */
  export const outboundSchema = DeleteCollectionRecordsPayload$outboundSchema;
  /** @deprecated use `DeleteCollectionRecordsPayload$Outbound` instead. */
  export type Outbound = DeleteCollectionRecordsPayload$Outbound;
}

export function deleteCollectionRecordsPayloadToJSON(
  deleteCollectionRecordsPayload: DeleteCollectionRecordsPayload,
): string {
  return JSON.stringify(
    DeleteCollectionRecordsPayload$outboundSchema.parse(
      deleteCollectionRecordsPayload,
    ),
  );
}

export function deleteCollectionRecordsPayloadFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCollectionRecordsPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCollectionRecordsPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCollectionRecordsPayload' from JSON`,
  );
}
