/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HashMap,
  HashMap$inboundSchema,
  HashMap$Outbound,
  HashMap$outboundSchema,
} from "./hashmap.js";
import {
  Include,
  Include$inboundSchema,
  Include$outboundSchema,
} from "./include.js";

export type QueryResponse = {
  distances?: Array<Array<number | null>> | null | undefined;
  documents?: Array<Array<string | null>> | null | undefined;
  embeddings?: Array<Array<Array<number> | null>> | null | undefined;
  ids: Array<Array<string>>;
  include: Array<Include>;
  metadatas?: Array<Array<{ [k: string]: HashMap } | null>> | null | undefined;
  uris?: Array<Array<string | null>> | null | undefined;
};

/** @internal */
export const QueryResponse$inboundSchema: z.ZodType<
  QueryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  distances: z.nullable(z.array(z.array(z.nullable(z.number())))).optional(),
  documents: z.nullable(z.array(z.array(z.nullable(z.string())))).optional(),
  embeddings: z.nullable(z.array(z.array(z.nullable(z.array(z.number())))))
    .optional(),
  ids: z.array(z.array(z.string())),
  include: z.array(Include$inboundSchema),
  metadatas: z.nullable(
    z.array(z.array(z.nullable(z.record(HashMap$inboundSchema)))),
  ).optional(),
  uris: z.nullable(z.array(z.array(z.nullable(z.string())))).optional(),
});

/** @internal */
export type QueryResponse$Outbound = {
  distances?: Array<Array<number | null>> | null | undefined;
  documents?: Array<Array<string | null>> | null | undefined;
  embeddings?: Array<Array<Array<number> | null>> | null | undefined;
  ids: Array<Array<string>>;
  include: Array<string>;
  metadatas?:
    | Array<Array<{ [k: string]: HashMap$Outbound } | null>>
    | null
    | undefined;
  uris?: Array<Array<string | null>> | null | undefined;
};

/** @internal */
export const QueryResponse$outboundSchema: z.ZodType<
  QueryResponse$Outbound,
  z.ZodTypeDef,
  QueryResponse
> = z.object({
  distances: z.nullable(z.array(z.array(z.nullable(z.number())))).optional(),
  documents: z.nullable(z.array(z.array(z.nullable(z.string())))).optional(),
  embeddings: z.nullable(z.array(z.array(z.nullable(z.array(z.number())))))
    .optional(),
  ids: z.array(z.array(z.string())),
  include: z.array(Include$outboundSchema),
  metadatas: z.nullable(
    z.array(z.array(z.nullable(z.record(HashMap$outboundSchema)))),
  ).optional(),
  uris: z.nullable(z.array(z.array(z.nullable(z.string())))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryResponse$ {
  /** @deprecated use `QueryResponse$inboundSchema` instead. */
  export const inboundSchema = QueryResponse$inboundSchema;
  /** @deprecated use `QueryResponse$outboundSchema` instead. */
  export const outboundSchema = QueryResponse$outboundSchema;
  /** @deprecated use `QueryResponse$Outbound` instead. */
  export type Outbound = QueryResponse$Outbound;
}

export function queryResponseToJSON(queryResponse: QueryResponse): string {
  return JSON.stringify(QueryResponse$outboundSchema.parse(queryResponse));
}

export function queryResponseFromJSON(
  jsonString: string,
): SafeParseResult<QueryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryResponse' from JSON`,
  );
}
