/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Include,
  Include$inboundSchema,
  Include$outboundSchema,
} from "./include.js";

export type QueryRequestPayload = {
  where?: any | undefined;
  whereDocument?: any | undefined;
  ids?: Array<string> | null | undefined;
  include?: Array<Include> | undefined;
  nResults?: number | null | undefined;
  queryEmbeddings: Array<Array<number>>;
};

/** @internal */
export const QueryRequestPayload$inboundSchema: z.ZodType<
  QueryRequestPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  where: z.any().optional(),
  where_document: z.any().optional(),
  ids: z.nullable(z.array(z.string())).optional(),
  include: z.array(Include$inboundSchema).optional(),
  n_results: z.nullable(z.number().int()).optional(),
  query_embeddings: z.array(z.array(z.number())),
}).transform((v) => {
  return remap$(v, {
    "where_document": "whereDocument",
    "n_results": "nResults",
    "query_embeddings": "queryEmbeddings",
  });
});

/** @internal */
export type QueryRequestPayload$Outbound = {
  where?: any | undefined;
  where_document?: any | undefined;
  ids?: Array<string> | null | undefined;
  include?: Array<string> | undefined;
  n_results?: number | null | undefined;
  query_embeddings: Array<Array<number>>;
};

/** @internal */
export const QueryRequestPayload$outboundSchema: z.ZodType<
  QueryRequestPayload$Outbound,
  z.ZodTypeDef,
  QueryRequestPayload
> = z.object({
  where: z.any().optional(),
  whereDocument: z.any().optional(),
  ids: z.nullable(z.array(z.string())).optional(),
  include: z.array(Include$outboundSchema).optional(),
  nResults: z.nullable(z.number().int()).optional(),
  queryEmbeddings: z.array(z.array(z.number())),
}).transform((v) => {
  return remap$(v, {
    whereDocument: "where_document",
    nResults: "n_results",
    queryEmbeddings: "query_embeddings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryRequestPayload$ {
  /** @deprecated use `QueryRequestPayload$inboundSchema` instead. */
  export const inboundSchema = QueryRequestPayload$inboundSchema;
  /** @deprecated use `QueryRequestPayload$outboundSchema` instead. */
  export const outboundSchema = QueryRequestPayload$outboundSchema;
  /** @deprecated use `QueryRequestPayload$Outbound` instead. */
  export type Outbound = QueryRequestPayload$Outbound;
}

export function queryRequestPayloadToJSON(
  queryRequestPayload: QueryRequestPayload,
): string {
  return JSON.stringify(
    QueryRequestPayload$outboundSchema.parse(queryRequestPayload),
  );
}

export function queryRequestPayloadFromJSON(
  jsonString: string,
): SafeParseResult<QueryRequestPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryRequestPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryRequestPayload' from JSON`,
  );
}
