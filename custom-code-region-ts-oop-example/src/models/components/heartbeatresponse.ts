/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HeartbeatResponse = {
  nanosecondHeartbeat: number;
};

/** @internal */
export const HeartbeatResponse$inboundSchema: z.ZodType<
  HeartbeatResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nanosecond_heartbeat: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "nanosecond_heartbeat": "nanosecondHeartbeat",
  });
});

/** @internal */
export type HeartbeatResponse$Outbound = {
  nanosecond_heartbeat: number;
};

/** @internal */
export const HeartbeatResponse$outboundSchema: z.ZodType<
  HeartbeatResponse$Outbound,
  z.ZodTypeDef,
  HeartbeatResponse
> = z.object({
  nanosecondHeartbeat: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    nanosecondHeartbeat: "nanosecond_heartbeat",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeartbeatResponse$ {
  /** @deprecated use `HeartbeatResponse$inboundSchema` instead. */
  export const inboundSchema = HeartbeatResponse$inboundSchema;
  /** @deprecated use `HeartbeatResponse$outboundSchema` instead. */
  export const outboundSchema = HeartbeatResponse$outboundSchema;
  /** @deprecated use `HeartbeatResponse$Outbound` instead. */
  export type Outbound = HeartbeatResponse$Outbound;
}

export function heartbeatResponseToJSON(
  heartbeatResponse: HeartbeatResponse,
): string {
  return JSON.stringify(
    HeartbeatResponse$outboundSchema.parse(heartbeatResponse),
  );
}

export function heartbeatResponseFromJSON(
  jsonString: string,
): SafeParseResult<HeartbeatResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HeartbeatResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HeartbeatResponse' from JSON`,
  );
}
