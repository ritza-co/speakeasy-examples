/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HashMap,
  HashMap$inboundSchema,
  HashMap$Outbound,
  HashMap$outboundSchema,
} from "./hashmap.js";

export type UpdateCollectionRecordsPayload = {
  documents?: Array<string | null> | null | undefined;
  embeddings?: Array<Array<number> | null> | null | undefined;
  ids: Array<string>;
  metadatas?: Array<{ [k: string]: HashMap } | null> | null | undefined;
  uris?: Array<string | null> | null | undefined;
};

/** @internal */
export const UpdateCollectionRecordsPayload$inboundSchema: z.ZodType<
  UpdateCollectionRecordsPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  documents: z.nullable(z.array(z.nullable(z.string()))).optional(),
  embeddings: z.nullable(z.array(z.nullable(z.array(z.number())))).optional(),
  ids: z.array(z.string()),
  metadatas: z.nullable(z.array(z.nullable(z.record(HashMap$inboundSchema))))
    .optional(),
  uris: z.nullable(z.array(z.nullable(z.string()))).optional(),
});

/** @internal */
export type UpdateCollectionRecordsPayload$Outbound = {
  documents?: Array<string | null> | null | undefined;
  embeddings?: Array<Array<number> | null> | null | undefined;
  ids: Array<string>;
  metadatas?:
    | Array<{ [k: string]: HashMap$Outbound } | null>
    | null
    | undefined;
  uris?: Array<string | null> | null | undefined;
};

/** @internal */
export const UpdateCollectionRecordsPayload$outboundSchema: z.ZodType<
  UpdateCollectionRecordsPayload$Outbound,
  z.ZodTypeDef,
  UpdateCollectionRecordsPayload
> = z.object({
  documents: z.nullable(z.array(z.nullable(z.string()))).optional(),
  embeddings: z.nullable(z.array(z.nullable(z.array(z.number())))).optional(),
  ids: z.array(z.string()),
  metadatas: z.nullable(z.array(z.nullable(z.record(HashMap$outboundSchema))))
    .optional(),
  uris: z.nullable(z.array(z.nullable(z.string()))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCollectionRecordsPayload$ {
  /** @deprecated use `UpdateCollectionRecordsPayload$inboundSchema` instead. */
  export const inboundSchema = UpdateCollectionRecordsPayload$inboundSchema;
  /** @deprecated use `UpdateCollectionRecordsPayload$outboundSchema` instead. */
  export const outboundSchema = UpdateCollectionRecordsPayload$outboundSchema;
  /** @deprecated use `UpdateCollectionRecordsPayload$Outbound` instead. */
  export type Outbound = UpdateCollectionRecordsPayload$Outbound;
}

export function updateCollectionRecordsPayloadToJSON(
  updateCollectionRecordsPayload: UpdateCollectionRecordsPayload,
): string {
  return JSON.stringify(
    UpdateCollectionRecordsPayload$outboundSchema.parse(
      updateCollectionRecordsPayload,
    ),
  );
}

export function updateCollectionRecordsPayloadFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCollectionRecordsPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCollectionRecordsPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCollectionRecordsPayload' from JSON`,
  );
}
