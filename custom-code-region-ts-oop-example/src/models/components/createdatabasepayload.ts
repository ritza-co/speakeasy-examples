/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateDatabasePayload = {
  name: string;
};

/** @internal */
export const CreateDatabasePayload$inboundSchema: z.ZodType<
  CreateDatabasePayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type CreateDatabasePayload$Outbound = {
  name: string;
};

/** @internal */
export const CreateDatabasePayload$outboundSchema: z.ZodType<
  CreateDatabasePayload$Outbound,
  z.ZodTypeDef,
  CreateDatabasePayload
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDatabasePayload$ {
  /** @deprecated use `CreateDatabasePayload$inboundSchema` instead. */
  export const inboundSchema = CreateDatabasePayload$inboundSchema;
  /** @deprecated use `CreateDatabasePayload$outboundSchema` instead. */
  export const outboundSchema = CreateDatabasePayload$outboundSchema;
  /** @deprecated use `CreateDatabasePayload$Outbound` instead. */
  export type Outbound = CreateDatabasePayload$Outbound;
}

export function createDatabasePayloadToJSON(
  createDatabasePayload: CreateDatabasePayload,
): string {
  return JSON.stringify(
    CreateDatabasePayload$outboundSchema.parse(createDatabasePayload),
  );
}

export function createDatabasePayloadFromJSON(
  jsonString: string,
): SafeParseResult<CreateDatabasePayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDatabasePayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDatabasePayload' from JSON`,
  );
}
