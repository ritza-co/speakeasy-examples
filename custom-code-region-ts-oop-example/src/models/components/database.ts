/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Database = {
  id: string;
  name: string;
  tenant: string;
};

/** @internal */
export const Database$inboundSchema: z.ZodType<
  Database,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  tenant: z.string(),
});

/** @internal */
export type Database$Outbound = {
  id: string;
  name: string;
  tenant: string;
};

/** @internal */
export const Database$outboundSchema: z.ZodType<
  Database$Outbound,
  z.ZodTypeDef,
  Database
> = z.object({
  id: z.string(),
  name: z.string(),
  tenant: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Database$ {
  /** @deprecated use `Database$inboundSchema` instead. */
  export const inboundSchema = Database$inboundSchema;
  /** @deprecated use `Database$outboundSchema` instead. */
  export const outboundSchema = Database$outboundSchema;
  /** @deprecated use `Database$Outbound` instead. */
  export type Outbound = Database$Outbound;
}

export function databaseToJSON(database: Database): string {
  return JSON.stringify(Database$outboundSchema.parse(database));
}

export function databaseFromJSON(
  jsonString: string,
): SafeParseResult<Database, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Database$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Database' from JSON`,
  );
}
