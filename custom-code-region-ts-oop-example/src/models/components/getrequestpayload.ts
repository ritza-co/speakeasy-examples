/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Include,
  Include$inboundSchema,
  Include$outboundSchema,
} from "./include.js";

export type GetRequestPayload = {
  where?: any | undefined;
  whereDocument?: any | undefined;
  ids?: Array<string> | null | undefined;
  include?: Array<Include> | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
};

/** @internal */
export const GetRequestPayload$inboundSchema: z.ZodType<
  GetRequestPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  where: z.any().optional(),
  where_document: z.any().optional(),
  ids: z.nullable(z.array(z.string())).optional(),
  include: z.array(Include$inboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "where_document": "whereDocument",
  });
});

/** @internal */
export type GetRequestPayload$Outbound = {
  where?: any | undefined;
  where_document?: any | undefined;
  ids?: Array<string> | null | undefined;
  include?: Array<string> | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
};

/** @internal */
export const GetRequestPayload$outboundSchema: z.ZodType<
  GetRequestPayload$Outbound,
  z.ZodTypeDef,
  GetRequestPayload
> = z.object({
  where: z.any().optional(),
  whereDocument: z.any().optional(),
  ids: z.nullable(z.array(z.string())).optional(),
  include: z.array(Include$outboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    whereDocument: "where_document",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRequestPayload$ {
  /** @deprecated use `GetRequestPayload$inboundSchema` instead. */
  export const inboundSchema = GetRequestPayload$inboundSchema;
  /** @deprecated use `GetRequestPayload$outboundSchema` instead. */
  export const outboundSchema = GetRequestPayload$outboundSchema;
  /** @deprecated use `GetRequestPayload$Outbound` instead. */
  export type Outbound = GetRequestPayload$Outbound;
}

export function getRequestPayloadToJSON(
  getRequestPayload: GetRequestPayload,
): string {
  return JSON.stringify(
    GetRequestPayload$outboundSchema.parse(getRequestPayload),
  );
}

export function getRequestPayloadFromJSON(
  jsonString: string,
): SafeParseResult<GetRequestPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRequestPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRequestPayload' from JSON`,
  );
}
