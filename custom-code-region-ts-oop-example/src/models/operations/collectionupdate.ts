/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionUpdateGlobals = {
  tenant?: string | undefined;
  databaseName?: string | undefined;
};

export type CollectionUpdateRequest = {
  tenant?: string | undefined;
  databaseName?: string | undefined;
  collectionId: string;
  updateCollectionRecordsPayload: components.UpdateCollectionRecordsPayload;
};

/** @internal */
export const CollectionUpdateGlobals$inboundSchema: z.ZodType<
  CollectionUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
  });
});

/** @internal */
export type CollectionUpdateGlobals$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CollectionUpdateGlobals$outboundSchema: z.ZodType<
  CollectionUpdateGlobals$Outbound,
  z.ZodTypeDef,
  CollectionUpdateGlobals
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionUpdateGlobals$ {
  /** @deprecated use `CollectionUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = CollectionUpdateGlobals$inboundSchema;
  /** @deprecated use `CollectionUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = CollectionUpdateGlobals$outboundSchema;
  /** @deprecated use `CollectionUpdateGlobals$Outbound` instead. */
  export type Outbound = CollectionUpdateGlobals$Outbound;
}

export function collectionUpdateGlobalsToJSON(
  collectionUpdateGlobals: CollectionUpdateGlobals,
): string {
  return JSON.stringify(
    CollectionUpdateGlobals$outboundSchema.parse(collectionUpdateGlobals),
  );
}

export function collectionUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CollectionUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const CollectionUpdateRequest$inboundSchema: z.ZodType<
  CollectionUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
  UpdateCollectionRecordsPayload:
    components.UpdateCollectionRecordsPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
    "collection_id": "collectionId",
    "UpdateCollectionRecordsPayload": "updateCollectionRecordsPayload",
  });
});

/** @internal */
export type CollectionUpdateRequest$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
  UpdateCollectionRecordsPayload:
    components.UpdateCollectionRecordsPayload$Outbound;
};

/** @internal */
export const CollectionUpdateRequest$outboundSchema: z.ZodType<
  CollectionUpdateRequest$Outbound,
  z.ZodTypeDef,
  CollectionUpdateRequest
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
  updateCollectionRecordsPayload:
    components.UpdateCollectionRecordsPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
    collectionId: "collection_id",
    updateCollectionRecordsPayload: "UpdateCollectionRecordsPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionUpdateRequest$ {
  /** @deprecated use `CollectionUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CollectionUpdateRequest$inboundSchema;
  /** @deprecated use `CollectionUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CollectionUpdateRequest$outboundSchema;
  /** @deprecated use `CollectionUpdateRequest$Outbound` instead. */
  export type Outbound = CollectionUpdateRequest$Outbound;
}

export function collectionUpdateRequestToJSON(
  collectionUpdateRequest: CollectionUpdateRequest,
): string {
  return JSON.stringify(
    CollectionUpdateRequest$outboundSchema.parse(collectionUpdateRequest),
  );
}

export function collectionUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CollectionUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionUpdateRequest' from JSON`,
  );
}
