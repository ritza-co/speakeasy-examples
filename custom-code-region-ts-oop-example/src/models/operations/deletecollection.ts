/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCollectionGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type DeleteCollectionRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Database name
   */
  databaseName?: string | undefined;
  /**
   * UUID of the collection to delete
   */
  collectionId: string;
};

/** @internal */
export const DeleteCollectionGlobals$inboundSchema: z.ZodType<
  DeleteCollectionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type DeleteCollectionGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const DeleteCollectionGlobals$outboundSchema: z.ZodType<
  DeleteCollectionGlobals$Outbound,
  z.ZodTypeDef,
  DeleteCollectionGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCollectionGlobals$ {
  /** @deprecated use `DeleteCollectionGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteCollectionGlobals$inboundSchema;
  /** @deprecated use `DeleteCollectionGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteCollectionGlobals$outboundSchema;
  /** @deprecated use `DeleteCollectionGlobals$Outbound` instead. */
  export type Outbound = DeleteCollectionGlobals$Outbound;
}

export function deleteCollectionGlobalsToJSON(
  deleteCollectionGlobals: DeleteCollectionGlobals,
): string {
  return JSON.stringify(
    DeleteCollectionGlobals$outboundSchema.parse(deleteCollectionGlobals),
  );
}

export function deleteCollectionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCollectionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCollectionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCollectionGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteCollectionRequest$inboundSchema: z.ZodType<
  DeleteCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
    "collection_id": "collectionId",
  });
});

/** @internal */
export type DeleteCollectionRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
};

/** @internal */
export const DeleteCollectionRequest$outboundSchema: z.ZodType<
  DeleteCollectionRequest$Outbound,
  z.ZodTypeDef,
  DeleteCollectionRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
    collectionId: "collection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCollectionRequest$ {
  /** @deprecated use `DeleteCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCollectionRequest$inboundSchema;
  /** @deprecated use `DeleteCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCollectionRequest$outboundSchema;
  /** @deprecated use `DeleteCollectionRequest$Outbound` instead. */
  export type Outbound = DeleteCollectionRequest$Outbound;
}

export function deleteCollectionRequestToJSON(
  deleteCollectionRequest: DeleteCollectionRequest,
): string {
  return JSON.stringify(
    DeleteCollectionRequest$outboundSchema.parse(deleteCollectionRequest),
  );
}

export function deleteCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCollectionRequest' from JSON`,
  );
}
