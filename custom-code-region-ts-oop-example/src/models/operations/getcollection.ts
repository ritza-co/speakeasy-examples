/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCollectionGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type GetCollectionRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Database name
   */
  databaseName?: string | undefined;
  /**
   * UUID of the collection
   */
  collectionId: string;
};

/** @internal */
export const GetCollectionGlobals$inboundSchema: z.ZodType<
  GetCollectionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type GetCollectionGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const GetCollectionGlobals$outboundSchema: z.ZodType<
  GetCollectionGlobals$Outbound,
  z.ZodTypeDef,
  GetCollectionGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollectionGlobals$ {
  /** @deprecated use `GetCollectionGlobals$inboundSchema` instead. */
  export const inboundSchema = GetCollectionGlobals$inboundSchema;
  /** @deprecated use `GetCollectionGlobals$outboundSchema` instead. */
  export const outboundSchema = GetCollectionGlobals$outboundSchema;
  /** @deprecated use `GetCollectionGlobals$Outbound` instead. */
  export type Outbound = GetCollectionGlobals$Outbound;
}

export function getCollectionGlobalsToJSON(
  getCollectionGlobals: GetCollectionGlobals,
): string {
  return JSON.stringify(
    GetCollectionGlobals$outboundSchema.parse(getCollectionGlobals),
  );
}

export function getCollectionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetCollectionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCollectionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCollectionGlobals' from JSON`,
  );
}

/** @internal */
export const GetCollectionRequest$inboundSchema: z.ZodType<
  GetCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
    "collection_id": "collectionId",
  });
});

/** @internal */
export type GetCollectionRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
};

/** @internal */
export const GetCollectionRequest$outboundSchema: z.ZodType<
  GetCollectionRequest$Outbound,
  z.ZodTypeDef,
  GetCollectionRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
    collectionId: "collection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollectionRequest$ {
  /** @deprecated use `GetCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = GetCollectionRequest$inboundSchema;
  /** @deprecated use `GetCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = GetCollectionRequest$outboundSchema;
  /** @deprecated use `GetCollectionRequest$Outbound` instead. */
  export type Outbound = GetCollectionRequest$Outbound;
}

export function getCollectionRequestToJSON(
  getCollectionRequest: GetCollectionRequest,
): string {
  return JSON.stringify(
    GetCollectionRequest$outboundSchema.parse(getCollectionRequest),
  );
}

export function getCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCollectionRequest' from JSON`,
  );
}
