/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionCountGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type CollectionCountRequest = {
  /**
   * Tenant ID for the collection
   */
  tenantId?: string | undefined;
  /**
   * Database containing this collection
   */
  databaseName?: string | undefined;
  /**
   * Collection ID whose records are counted
   */
  collectionId: string;
};

/** @internal */
export const CollectionCountGlobals$inboundSchema: z.ZodType<
  CollectionCountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type CollectionCountGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CollectionCountGlobals$outboundSchema: z.ZodType<
  CollectionCountGlobals$Outbound,
  z.ZodTypeDef,
  CollectionCountGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionCountGlobals$ {
  /** @deprecated use `CollectionCountGlobals$inboundSchema` instead. */
  export const inboundSchema = CollectionCountGlobals$inboundSchema;
  /** @deprecated use `CollectionCountGlobals$outboundSchema` instead. */
  export const outboundSchema = CollectionCountGlobals$outboundSchema;
  /** @deprecated use `CollectionCountGlobals$Outbound` instead. */
  export type Outbound = CollectionCountGlobals$Outbound;
}

export function collectionCountGlobalsToJSON(
  collectionCountGlobals: CollectionCountGlobals,
): string {
  return JSON.stringify(
    CollectionCountGlobals$outboundSchema.parse(collectionCountGlobals),
  );
}

export function collectionCountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CollectionCountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionCountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionCountGlobals' from JSON`,
  );
}

/** @internal */
export const CollectionCountRequest$inboundSchema: z.ZodType<
  CollectionCountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
    "collection_id": "collectionId",
  });
});

/** @internal */
export type CollectionCountRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
};

/** @internal */
export const CollectionCountRequest$outboundSchema: z.ZodType<
  CollectionCountRequest$Outbound,
  z.ZodTypeDef,
  CollectionCountRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
    collectionId: "collection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionCountRequest$ {
  /** @deprecated use `CollectionCountRequest$inboundSchema` instead. */
  export const inboundSchema = CollectionCountRequest$inboundSchema;
  /** @deprecated use `CollectionCountRequest$outboundSchema` instead. */
  export const outboundSchema = CollectionCountRequest$outboundSchema;
  /** @deprecated use `CollectionCountRequest$Outbound` instead. */
  export type Outbound = CollectionCountRequest$Outbound;
}

export function collectionCountRequestToJSON(
  collectionCountRequest: CollectionCountRequest,
): string {
  return JSON.stringify(
    CollectionCountRequest$outboundSchema.parse(collectionCountRequest),
  );
}

export function collectionCountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CollectionCountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionCountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionCountRequest' from JSON`,
  );
}
