/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCollectionGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type UpdateCollectionRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Database name
   */
  databaseName?: string | undefined;
  /**
   * UUID of the collection to update
   */
  collectionId: string;
  updateCollectionPayload: components.UpdateCollectionPayload;
};

/** @internal */
export const UpdateCollectionGlobals$inboundSchema: z.ZodType<
  UpdateCollectionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type UpdateCollectionGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const UpdateCollectionGlobals$outboundSchema: z.ZodType<
  UpdateCollectionGlobals$Outbound,
  z.ZodTypeDef,
  UpdateCollectionGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCollectionGlobals$ {
  /** @deprecated use `UpdateCollectionGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateCollectionGlobals$inboundSchema;
  /** @deprecated use `UpdateCollectionGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateCollectionGlobals$outboundSchema;
  /** @deprecated use `UpdateCollectionGlobals$Outbound` instead. */
  export type Outbound = UpdateCollectionGlobals$Outbound;
}

export function updateCollectionGlobalsToJSON(
  updateCollectionGlobals: UpdateCollectionGlobals,
): string {
  return JSON.stringify(
    UpdateCollectionGlobals$outboundSchema.parse(updateCollectionGlobals),
  );
}

export function updateCollectionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCollectionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCollectionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCollectionGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateCollectionRequest$inboundSchema: z.ZodType<
  UpdateCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
  UpdateCollectionPayload: components.UpdateCollectionPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
    "collection_id": "collectionId",
    "UpdateCollectionPayload": "updateCollectionPayload",
  });
});

/** @internal */
export type UpdateCollectionRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
  UpdateCollectionPayload: components.UpdateCollectionPayload$Outbound;
};

/** @internal */
export const UpdateCollectionRequest$outboundSchema: z.ZodType<
  UpdateCollectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateCollectionRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
  updateCollectionPayload: components.UpdateCollectionPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
    collectionId: "collection_id",
    updateCollectionPayload: "UpdateCollectionPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCollectionRequest$ {
  /** @deprecated use `UpdateCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCollectionRequest$inboundSchema;
  /** @deprecated use `UpdateCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCollectionRequest$outboundSchema;
  /** @deprecated use `UpdateCollectionRequest$Outbound` instead. */
  export type Outbound = UpdateCollectionRequest$Outbound;
}

export function updateCollectionRequestToJSON(
  updateCollectionRequest: UpdateCollectionRequest,
): string {
  return JSON.stringify(
    UpdateCollectionRequest$outboundSchema.parse(updateCollectionRequest),
  );
}

export function updateCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCollectionRequest' from JSON`,
  );
}
