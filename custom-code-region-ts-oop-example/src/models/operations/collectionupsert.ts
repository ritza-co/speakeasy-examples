/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionUpsertGlobals = {
  tenant?: string | undefined;
  databaseName?: string | undefined;
};

export type CollectionUpsertRequest = {
  /**
   * Tenant ID
   */
  tenant?: string | undefined;
  /**
   * Database name
   */
  databaseName?: string | undefined;
  /**
   * Collection ID
   */
  collectionId: string;
  upsertCollectionRecordsPayload: components.UpsertCollectionRecordsPayload;
};

/** @internal */
export const CollectionUpsertGlobals$inboundSchema: z.ZodType<
  CollectionUpsertGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
  });
});

/** @internal */
export type CollectionUpsertGlobals$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CollectionUpsertGlobals$outboundSchema: z.ZodType<
  CollectionUpsertGlobals$Outbound,
  z.ZodTypeDef,
  CollectionUpsertGlobals
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionUpsertGlobals$ {
  /** @deprecated use `CollectionUpsertGlobals$inboundSchema` instead. */
  export const inboundSchema = CollectionUpsertGlobals$inboundSchema;
  /** @deprecated use `CollectionUpsertGlobals$outboundSchema` instead. */
  export const outboundSchema = CollectionUpsertGlobals$outboundSchema;
  /** @deprecated use `CollectionUpsertGlobals$Outbound` instead. */
  export type Outbound = CollectionUpsertGlobals$Outbound;
}

export function collectionUpsertGlobalsToJSON(
  collectionUpsertGlobals: CollectionUpsertGlobals,
): string {
  return JSON.stringify(
    CollectionUpsertGlobals$outboundSchema.parse(collectionUpsertGlobals),
  );
}

export function collectionUpsertGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CollectionUpsertGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionUpsertGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionUpsertGlobals' from JSON`,
  );
}

/** @internal */
export const CollectionUpsertRequest$inboundSchema: z.ZodType<
  CollectionUpsertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
  UpsertCollectionRecordsPayload:
    components.UpsertCollectionRecordsPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
    "collection_id": "collectionId",
    "UpsertCollectionRecordsPayload": "upsertCollectionRecordsPayload",
  });
});

/** @internal */
export type CollectionUpsertRequest$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
  UpsertCollectionRecordsPayload:
    components.UpsertCollectionRecordsPayload$Outbound;
};

/** @internal */
export const CollectionUpsertRequest$outboundSchema: z.ZodType<
  CollectionUpsertRequest$Outbound,
  z.ZodTypeDef,
  CollectionUpsertRequest
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
  upsertCollectionRecordsPayload:
    components.UpsertCollectionRecordsPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
    collectionId: "collection_id",
    upsertCollectionRecordsPayload: "UpsertCollectionRecordsPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionUpsertRequest$ {
  /** @deprecated use `CollectionUpsertRequest$inboundSchema` instead. */
  export const inboundSchema = CollectionUpsertRequest$inboundSchema;
  /** @deprecated use `CollectionUpsertRequest$outboundSchema` instead. */
  export const outboundSchema = CollectionUpsertRequest$outboundSchema;
  /** @deprecated use `CollectionUpsertRequest$Outbound` instead. */
  export type Outbound = CollectionUpsertRequest$Outbound;
}

export function collectionUpsertRequestToJSON(
  collectionUpsertRequest: CollectionUpsertRequest,
): string {
  return JSON.stringify(
    CollectionUpsertRequest$outboundSchema.parse(collectionUpsertRequest),
  );
}

export function collectionUpsertRequestFromJSON(
  jsonString: string,
): SafeParseResult<CollectionUpsertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionUpsertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionUpsertRequest' from JSON`,
  );
}
