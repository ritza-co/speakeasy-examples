/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListDatabasesGlobals = {
  tenantId?: string | undefined;
};

export type ListDatabasesRequest = {
  /**
   * Tenant ID to list databases for
   */
  tenantId?: string | undefined;
  /**
   * Limit for pagination
   */
  limit?: number | undefined;
  /**
   * Offset for pagination
   */
  offset?: number | undefined;
};

/** @internal */
export const ListDatabasesGlobals$inboundSchema: z.ZodType<
  ListDatabasesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListDatabasesGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListDatabasesGlobals$outboundSchema: z.ZodType<
  ListDatabasesGlobals$Outbound,
  z.ZodTypeDef,
  ListDatabasesGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDatabasesGlobals$ {
  /** @deprecated use `ListDatabasesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListDatabasesGlobals$inboundSchema;
  /** @deprecated use `ListDatabasesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListDatabasesGlobals$outboundSchema;
  /** @deprecated use `ListDatabasesGlobals$Outbound` instead. */
  export type Outbound = ListDatabasesGlobals$Outbound;
}

export function listDatabasesGlobalsToJSON(
  listDatabasesGlobals: ListDatabasesGlobals,
): string {
  return JSON.stringify(
    ListDatabasesGlobals$outboundSchema.parse(listDatabasesGlobals),
  );
}

export function listDatabasesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListDatabasesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDatabasesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDatabasesGlobals' from JSON`,
  );
}

/** @internal */
export const ListDatabasesRequest$inboundSchema: z.ZodType<
  ListDatabasesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListDatabasesRequest$Outbound = {
  tenant_id?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const ListDatabasesRequest$outboundSchema: z.ZodType<
  ListDatabasesRequest$Outbound,
  z.ZodTypeDef,
  ListDatabasesRequest
> = z.object({
  tenantId: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDatabasesRequest$ {
  /** @deprecated use `ListDatabasesRequest$inboundSchema` instead. */
  export const inboundSchema = ListDatabasesRequest$inboundSchema;
  /** @deprecated use `ListDatabasesRequest$outboundSchema` instead. */
  export const outboundSchema = ListDatabasesRequest$outboundSchema;
  /** @deprecated use `ListDatabasesRequest$Outbound` instead. */
  export type Outbound = ListDatabasesRequest$Outbound;
}

export function listDatabasesRequestToJSON(
  listDatabasesRequest: ListDatabasesRequest,
): string {
  return JSON.stringify(
    ListDatabasesRequest$outboundSchema.parse(listDatabasesRequest),
  );
}

export function listDatabasesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListDatabasesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDatabasesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDatabasesRequest' from JSON`,
  );
}
