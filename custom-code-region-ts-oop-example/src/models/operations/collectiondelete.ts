/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionDeleteGlobals = {
  tenant?: string | undefined;
  databaseName?: string | undefined;
};

export type CollectionDeleteRequest = {
  /**
   * Tenant ID
   */
  tenant?: string | undefined;
  /**
   * Database name
   */
  databaseName?: string | undefined;
  /**
   * Collection ID
   */
  collectionId: string;
  deleteCollectionRecordsPayload: components.DeleteCollectionRecordsPayload;
};

/** @internal */
export const CollectionDeleteGlobals$inboundSchema: z.ZodType<
  CollectionDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
  });
});

/** @internal */
export type CollectionDeleteGlobals$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CollectionDeleteGlobals$outboundSchema: z.ZodType<
  CollectionDeleteGlobals$Outbound,
  z.ZodTypeDef,
  CollectionDeleteGlobals
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionDeleteGlobals$ {
  /** @deprecated use `CollectionDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = CollectionDeleteGlobals$inboundSchema;
  /** @deprecated use `CollectionDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = CollectionDeleteGlobals$outboundSchema;
  /** @deprecated use `CollectionDeleteGlobals$Outbound` instead. */
  export type Outbound = CollectionDeleteGlobals$Outbound;
}

export function collectionDeleteGlobalsToJSON(
  collectionDeleteGlobals: CollectionDeleteGlobals,
): string {
  return JSON.stringify(
    CollectionDeleteGlobals$outboundSchema.parse(collectionDeleteGlobals),
  );
}

export function collectionDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CollectionDeleteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionDeleteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const CollectionDeleteRequest$inboundSchema: z.ZodType<
  CollectionDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
  DeleteCollectionRecordsPayload:
    components.DeleteCollectionRecordsPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
    "collection_id": "collectionId",
    "DeleteCollectionRecordsPayload": "deleteCollectionRecordsPayload",
  });
});

/** @internal */
export type CollectionDeleteRequest$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
  DeleteCollectionRecordsPayload:
    components.DeleteCollectionRecordsPayload$Outbound;
};

/** @internal */
export const CollectionDeleteRequest$outboundSchema: z.ZodType<
  CollectionDeleteRequest$Outbound,
  z.ZodTypeDef,
  CollectionDeleteRequest
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
  deleteCollectionRecordsPayload:
    components.DeleteCollectionRecordsPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
    collectionId: "collection_id",
    deleteCollectionRecordsPayload: "DeleteCollectionRecordsPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionDeleteRequest$ {
  /** @deprecated use `CollectionDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = CollectionDeleteRequest$inboundSchema;
  /** @deprecated use `CollectionDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = CollectionDeleteRequest$outboundSchema;
  /** @deprecated use `CollectionDeleteRequest$Outbound` instead. */
  export type Outbound = CollectionDeleteRequest$Outbound;
}

export function collectionDeleteRequestToJSON(
  collectionDeleteRequest: CollectionDeleteRequest,
): string {
  return JSON.stringify(
    CollectionDeleteRequest$outboundSchema.parse(collectionDeleteRequest),
  );
}

export function collectionDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<CollectionDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionDeleteRequest' from JSON`,
  );
}
