/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionQueryGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type CollectionQueryRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Database name containing the collection
   */
  databaseName?: string | undefined;
  /**
   * Collection ID to query
   */
  collectionId: string;
  /**
   * Limit for pagination
   */
  limit?: number | undefined;
  /**
   * Offset for pagination
   */
  offset?: number | undefined;
  queryRequestPayload: components.QueryRequestPayload;
};

/** @internal */
export const CollectionQueryGlobals$inboundSchema: z.ZodType<
  CollectionQueryGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type CollectionQueryGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CollectionQueryGlobals$outboundSchema: z.ZodType<
  CollectionQueryGlobals$Outbound,
  z.ZodTypeDef,
  CollectionQueryGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionQueryGlobals$ {
  /** @deprecated use `CollectionQueryGlobals$inboundSchema` instead. */
  export const inboundSchema = CollectionQueryGlobals$inboundSchema;
  /** @deprecated use `CollectionQueryGlobals$outboundSchema` instead. */
  export const outboundSchema = CollectionQueryGlobals$outboundSchema;
  /** @deprecated use `CollectionQueryGlobals$Outbound` instead. */
  export type Outbound = CollectionQueryGlobals$Outbound;
}

export function collectionQueryGlobalsToJSON(
  collectionQueryGlobals: CollectionQueryGlobals,
): string {
  return JSON.stringify(
    CollectionQueryGlobals$outboundSchema.parse(collectionQueryGlobals),
  );
}

export function collectionQueryGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CollectionQueryGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionQueryGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionQueryGlobals' from JSON`,
  );
}

/** @internal */
export const CollectionQueryRequest$inboundSchema: z.ZodType<
  CollectionQueryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  QueryRequestPayload: components.QueryRequestPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
    "collection_id": "collectionId",
    "QueryRequestPayload": "queryRequestPayload",
  });
});

/** @internal */
export type CollectionQueryRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
  limit?: number | undefined;
  offset?: number | undefined;
  QueryRequestPayload: components.QueryRequestPayload$Outbound;
};

/** @internal */
export const CollectionQueryRequest$outboundSchema: z.ZodType<
  CollectionQueryRequest$Outbound,
  z.ZodTypeDef,
  CollectionQueryRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  queryRequestPayload: components.QueryRequestPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
    collectionId: "collection_id",
    queryRequestPayload: "QueryRequestPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionQueryRequest$ {
  /** @deprecated use `CollectionQueryRequest$inboundSchema` instead. */
  export const inboundSchema = CollectionQueryRequest$inboundSchema;
  /** @deprecated use `CollectionQueryRequest$outboundSchema` instead. */
  export const outboundSchema = CollectionQueryRequest$outboundSchema;
  /** @deprecated use `CollectionQueryRequest$Outbound` instead. */
  export type Outbound = CollectionQueryRequest$Outbound;
}

export function collectionQueryRequestToJSON(
  collectionQueryRequest: CollectionQueryRequest,
): string {
  return JSON.stringify(
    CollectionQueryRequest$outboundSchema.parse(collectionQueryRequest),
  );
}

export function collectionQueryRequestFromJSON(
  jsonString: string,
): SafeParseResult<CollectionQueryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionQueryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionQueryRequest' from JSON`,
  );
}
