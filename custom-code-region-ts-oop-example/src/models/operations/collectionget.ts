/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionGetGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type CollectionGetRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Database name for the collection
   */
  databaseName?: string | undefined;
  /**
   * Collection ID to fetch records from
   */
  collectionId: string;
  getRequestPayload: components.GetRequestPayload;
};

/** @internal */
export const CollectionGetGlobals$inboundSchema: z.ZodType<
  CollectionGetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type CollectionGetGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CollectionGetGlobals$outboundSchema: z.ZodType<
  CollectionGetGlobals$Outbound,
  z.ZodTypeDef,
  CollectionGetGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionGetGlobals$ {
  /** @deprecated use `CollectionGetGlobals$inboundSchema` instead. */
  export const inboundSchema = CollectionGetGlobals$inboundSchema;
  /** @deprecated use `CollectionGetGlobals$outboundSchema` instead. */
  export const outboundSchema = CollectionGetGlobals$outboundSchema;
  /** @deprecated use `CollectionGetGlobals$Outbound` instead. */
  export type Outbound = CollectionGetGlobals$Outbound;
}

export function collectionGetGlobalsToJSON(
  collectionGetGlobals: CollectionGetGlobals,
): string {
  return JSON.stringify(
    CollectionGetGlobals$outboundSchema.parse(collectionGetGlobals),
  );
}

export function collectionGetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CollectionGetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionGetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionGetGlobals' from JSON`,
  );
}

/** @internal */
export const CollectionGetRequest$inboundSchema: z.ZodType<
  CollectionGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
  GetRequestPayload: components.GetRequestPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
    "collection_id": "collectionId",
    "GetRequestPayload": "getRequestPayload",
  });
});

/** @internal */
export type CollectionGetRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
  GetRequestPayload: components.GetRequestPayload$Outbound;
};

/** @internal */
export const CollectionGetRequest$outboundSchema: z.ZodType<
  CollectionGetRequest$Outbound,
  z.ZodTypeDef,
  CollectionGetRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
  getRequestPayload: components.GetRequestPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
    collectionId: "collection_id",
    getRequestPayload: "GetRequestPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionGetRequest$ {
  /** @deprecated use `CollectionGetRequest$inboundSchema` instead. */
  export const inboundSchema = CollectionGetRequest$inboundSchema;
  /** @deprecated use `CollectionGetRequest$outboundSchema` instead. */
  export const outboundSchema = CollectionGetRequest$outboundSchema;
  /** @deprecated use `CollectionGetRequest$Outbound` instead. */
  export type Outbound = CollectionGetRequest$Outbound;
}

export function collectionGetRequestToJSON(
  collectionGetRequest: CollectionGetRequest,
): string {
  return JSON.stringify(
    CollectionGetRequest$outboundSchema.parse(collectionGetRequest),
  );
}

export function collectionGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CollectionGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionGetRequest' from JSON`,
  );
}
