/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDatabaseGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type DeleteDatabaseRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Name of the database to delete
   */
  databaseName?: string | undefined;
};

/** @internal */
export const DeleteDatabaseGlobals$inboundSchema: z.ZodType<
  DeleteDatabaseGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type DeleteDatabaseGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const DeleteDatabaseGlobals$outboundSchema: z.ZodType<
  DeleteDatabaseGlobals$Outbound,
  z.ZodTypeDef,
  DeleteDatabaseGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatabaseGlobals$ {
  /** @deprecated use `DeleteDatabaseGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteDatabaseGlobals$inboundSchema;
  /** @deprecated use `DeleteDatabaseGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteDatabaseGlobals$outboundSchema;
  /** @deprecated use `DeleteDatabaseGlobals$Outbound` instead. */
  export type Outbound = DeleteDatabaseGlobals$Outbound;
}

export function deleteDatabaseGlobalsToJSON(
  deleteDatabaseGlobals: DeleteDatabaseGlobals,
): string {
  return JSON.stringify(
    DeleteDatabaseGlobals$outboundSchema.parse(deleteDatabaseGlobals),
  );
}

export function deleteDatabaseGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatabaseGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatabaseGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatabaseGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteDatabaseRequest$inboundSchema: z.ZodType<
  DeleteDatabaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type DeleteDatabaseRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const DeleteDatabaseRequest$outboundSchema: z.ZodType<
  DeleteDatabaseRequest$Outbound,
  z.ZodTypeDef,
  DeleteDatabaseRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDatabaseRequest$ {
  /** @deprecated use `DeleteDatabaseRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDatabaseRequest$inboundSchema;
  /** @deprecated use `DeleteDatabaseRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDatabaseRequest$outboundSchema;
  /** @deprecated use `DeleteDatabaseRequest$Outbound` instead. */
  export type Outbound = DeleteDatabaseRequest$Outbound;
}

export function deleteDatabaseRequestToJSON(
  deleteDatabaseRequest: DeleteDatabaseRequest,
): string {
  return JSON.stringify(
    DeleteDatabaseRequest$outboundSchema.parse(deleteDatabaseRequest),
  );
}

export function deleteDatabaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDatabaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDatabaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDatabaseRequest' from JSON`,
  );
}
