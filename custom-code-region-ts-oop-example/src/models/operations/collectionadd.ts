/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionAddGlobals = {
  tenant?: string | undefined;
  databaseName?: string | undefined;
};

export type CollectionAddRequest = {
  tenant?: string | undefined;
  databaseName?: string | undefined;
  collectionId: string;
  addCollectionRecordsPayload: components.AddCollectionRecordsPayload;
};

/** @internal */
export const CollectionAddGlobals$inboundSchema: z.ZodType<
  CollectionAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
  });
});

/** @internal */
export type CollectionAddGlobals$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CollectionAddGlobals$outboundSchema: z.ZodType<
  CollectionAddGlobals$Outbound,
  z.ZodTypeDef,
  CollectionAddGlobals
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionAddGlobals$ {
  /** @deprecated use `CollectionAddGlobals$inboundSchema` instead. */
  export const inboundSchema = CollectionAddGlobals$inboundSchema;
  /** @deprecated use `CollectionAddGlobals$outboundSchema` instead. */
  export const outboundSchema = CollectionAddGlobals$outboundSchema;
  /** @deprecated use `CollectionAddGlobals$Outbound` instead. */
  export type Outbound = CollectionAddGlobals$Outbound;
}

export function collectionAddGlobalsToJSON(
  collectionAddGlobals: CollectionAddGlobals,
): string {
  return JSON.stringify(
    CollectionAddGlobals$outboundSchema.parse(collectionAddGlobals),
  );
}

export function collectionAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CollectionAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionAddGlobals' from JSON`,
  );
}

/** @internal */
export const CollectionAddRequest$inboundSchema: z.ZodType<
  CollectionAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant: z.string().optional(),
  database_name: z.string().optional(),
  collection_id: z.string(),
  AddCollectionRecordsPayload:
    components.AddCollectionRecordsPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "database_name": "databaseName",
    "collection_id": "collectionId",
    "AddCollectionRecordsPayload": "addCollectionRecordsPayload",
  });
});

/** @internal */
export type CollectionAddRequest$Outbound = {
  tenant?: string | undefined;
  database_name?: string | undefined;
  collection_id: string;
  AddCollectionRecordsPayload: components.AddCollectionRecordsPayload$Outbound;
};

/** @internal */
export const CollectionAddRequest$outboundSchema: z.ZodType<
  CollectionAddRequest$Outbound,
  z.ZodTypeDef,
  CollectionAddRequest
> = z.object({
  tenant: z.string().optional(),
  databaseName: z.string().optional(),
  collectionId: z.string(),
  addCollectionRecordsPayload:
    components.AddCollectionRecordsPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    databaseName: "database_name",
    collectionId: "collection_id",
    addCollectionRecordsPayload: "AddCollectionRecordsPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionAddRequest$ {
  /** @deprecated use `CollectionAddRequest$inboundSchema` instead. */
  export const inboundSchema = CollectionAddRequest$inboundSchema;
  /** @deprecated use `CollectionAddRequest$outboundSchema` instead. */
  export const outboundSchema = CollectionAddRequest$outboundSchema;
  /** @deprecated use `CollectionAddRequest$Outbound` instead. */
  export type Outbound = CollectionAddRequest$Outbound;
}

export function collectionAddRequestToJSON(
  collectionAddRequest: CollectionAddRequest,
): string {
  return JSON.stringify(
    CollectionAddRequest$outboundSchema.parse(collectionAddRequest),
  );
}

export function collectionAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<CollectionAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionAddRequest' from JSON`,
  );
}
