/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CountCollectionsGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type CountCollectionsRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Database name to count collections from
   */
  databaseName?: string | undefined;
};

/** @internal */
export const CountCollectionsGlobals$inboundSchema: z.ZodType<
  CountCollectionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type CountCollectionsGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CountCollectionsGlobals$outboundSchema: z.ZodType<
  CountCollectionsGlobals$Outbound,
  z.ZodTypeDef,
  CountCollectionsGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCollectionsGlobals$ {
  /** @deprecated use `CountCollectionsGlobals$inboundSchema` instead. */
  export const inboundSchema = CountCollectionsGlobals$inboundSchema;
  /** @deprecated use `CountCollectionsGlobals$outboundSchema` instead. */
  export const outboundSchema = CountCollectionsGlobals$outboundSchema;
  /** @deprecated use `CountCollectionsGlobals$Outbound` instead. */
  export type Outbound = CountCollectionsGlobals$Outbound;
}

export function countCollectionsGlobalsToJSON(
  countCollectionsGlobals: CountCollectionsGlobals,
): string {
  return JSON.stringify(
    CountCollectionsGlobals$outboundSchema.parse(countCollectionsGlobals),
  );
}

export function countCollectionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CountCollectionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCollectionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCollectionsGlobals' from JSON`,
  );
}

/** @internal */
export const CountCollectionsRequest$inboundSchema: z.ZodType<
  CountCollectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type CountCollectionsRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CountCollectionsRequest$outboundSchema: z.ZodType<
  CountCollectionsRequest$Outbound,
  z.ZodTypeDef,
  CountCollectionsRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCollectionsRequest$ {
  /** @deprecated use `CountCollectionsRequest$inboundSchema` instead. */
  export const inboundSchema = CountCollectionsRequest$inboundSchema;
  /** @deprecated use `CountCollectionsRequest$outboundSchema` instead. */
  export const outboundSchema = CountCollectionsRequest$outboundSchema;
  /** @deprecated use `CountCollectionsRequest$Outbound` instead. */
  export type Outbound = CountCollectionsRequest$Outbound;
}

export function countCollectionsRequestToJSON(
  countCollectionsRequest: CountCollectionsRequest,
): string {
  return JSON.stringify(
    CountCollectionsRequest$outboundSchema.parse(countCollectionsRequest),
  );
}

export function countCollectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CountCollectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCollectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCollectionsRequest' from JSON`,
  );
}
