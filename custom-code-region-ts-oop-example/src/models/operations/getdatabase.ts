/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDatabaseGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type GetDatabaseRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Name of the database to retrieve
   */
  databaseName?: string | undefined;
};

/** @internal */
export const GetDatabaseGlobals$inboundSchema: z.ZodType<
  GetDatabaseGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type GetDatabaseGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const GetDatabaseGlobals$outboundSchema: z.ZodType<
  GetDatabaseGlobals$Outbound,
  z.ZodTypeDef,
  GetDatabaseGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDatabaseGlobals$ {
  /** @deprecated use `GetDatabaseGlobals$inboundSchema` instead. */
  export const inboundSchema = GetDatabaseGlobals$inboundSchema;
  /** @deprecated use `GetDatabaseGlobals$outboundSchema` instead. */
  export const outboundSchema = GetDatabaseGlobals$outboundSchema;
  /** @deprecated use `GetDatabaseGlobals$Outbound` instead. */
  export type Outbound = GetDatabaseGlobals$Outbound;
}

export function getDatabaseGlobalsToJSON(
  getDatabaseGlobals: GetDatabaseGlobals,
): string {
  return JSON.stringify(
    GetDatabaseGlobals$outboundSchema.parse(getDatabaseGlobals),
  );
}

export function getDatabaseGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetDatabaseGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDatabaseGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDatabaseGlobals' from JSON`,
  );
}

/** @internal */
export const GetDatabaseRequest$inboundSchema: z.ZodType<
  GetDatabaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type GetDatabaseRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const GetDatabaseRequest$outboundSchema: z.ZodType<
  GetDatabaseRequest$Outbound,
  z.ZodTypeDef,
  GetDatabaseRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDatabaseRequest$ {
  /** @deprecated use `GetDatabaseRequest$inboundSchema` instead. */
  export const inboundSchema = GetDatabaseRequest$inboundSchema;
  /** @deprecated use `GetDatabaseRequest$outboundSchema` instead. */
  export const outboundSchema = GetDatabaseRequest$outboundSchema;
  /** @deprecated use `GetDatabaseRequest$Outbound` instead. */
  export type Outbound = GetDatabaseRequest$Outbound;
}

export function getDatabaseRequestToJSON(
  getDatabaseRequest: GetDatabaseRequest,
): string {
  return JSON.stringify(
    GetDatabaseRequest$outboundSchema.parse(getDatabaseRequest),
  );
}

export function getDatabaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDatabaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDatabaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDatabaseRequest' from JSON`,
  );
}
