/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCollectionGlobals = {
  tenantId?: string | undefined;
  databaseName?: string | undefined;
};

export type CreateCollectionRequest = {
  /**
   * Tenant ID
   */
  tenantId?: string | undefined;
  /**
   * Database name containing the new collection
   */
  databaseName?: string | undefined;
  createCollectionPayload: components.CreateCollectionPayload;
};

/** @internal */
export const CreateCollectionGlobals$inboundSchema: z.ZodType<
  CreateCollectionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
  });
});

/** @internal */
export type CreateCollectionGlobals$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
};

/** @internal */
export const CreateCollectionGlobals$outboundSchema: z.ZodType<
  CreateCollectionGlobals$Outbound,
  z.ZodTypeDef,
  CreateCollectionGlobals
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCollectionGlobals$ {
  /** @deprecated use `CreateCollectionGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateCollectionGlobals$inboundSchema;
  /** @deprecated use `CreateCollectionGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateCollectionGlobals$outboundSchema;
  /** @deprecated use `CreateCollectionGlobals$Outbound` instead. */
  export type Outbound = CreateCollectionGlobals$Outbound;
}

export function createCollectionGlobalsToJSON(
  createCollectionGlobals: CreateCollectionGlobals,
): string {
  return JSON.stringify(
    CreateCollectionGlobals$outboundSchema.parse(createCollectionGlobals),
  );
}

export function createCollectionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateCollectionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCollectionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCollectionGlobals' from JSON`,
  );
}

/** @internal */
export const CreateCollectionRequest$inboundSchema: z.ZodType<
  CreateCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  database_name: z.string().optional(),
  CreateCollectionPayload: components.CreateCollectionPayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "database_name": "databaseName",
    "CreateCollectionPayload": "createCollectionPayload",
  });
});

/** @internal */
export type CreateCollectionRequest$Outbound = {
  tenant_id?: string | undefined;
  database_name?: string | undefined;
  CreateCollectionPayload: components.CreateCollectionPayload$Outbound;
};

/** @internal */
export const CreateCollectionRequest$outboundSchema: z.ZodType<
  CreateCollectionRequest$Outbound,
  z.ZodTypeDef,
  CreateCollectionRequest
> = z.object({
  tenantId: z.string().optional(),
  databaseName: z.string().optional(),
  createCollectionPayload: components.CreateCollectionPayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    databaseName: "database_name",
    createCollectionPayload: "CreateCollectionPayload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCollectionRequest$ {
  /** @deprecated use `CreateCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCollectionRequest$inboundSchema;
  /** @deprecated use `CreateCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCollectionRequest$outboundSchema;
  /** @deprecated use `CreateCollectionRequest$Outbound` instead. */
  export type Outbound = CreateCollectionRequest$Outbound;
}

export function createCollectionRequestToJSON(
  createCollectionRequest: CreateCollectionRequest,
): string {
  return JSON.stringify(
    CreateCollectionRequest$outboundSchema.parse(createCollectionRequest),
  );
}

export function createCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCollectionRequest' from JSON`,
  );
}
