/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { API } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Collections List Collections", async () => {
  const testHttpClient = createTestHTTPClient("list_collections");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.list({
    tenantId: "<id>",
    databaseName: "<value>",
  });
  expect(result).toBeDefined();
});

test("Collections Create Collection", async () => {
  const testHttpClient = createTestHTTPClient("create_collection");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.create({
    tenantId: "<id>",
    databaseName: "<value>",
    createCollectionPayload: {
      getOrCreate: true,
      name: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Collections Get Collection", async () => {
  const testHttpClient = createTestHTTPClient("get_collection");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.get({
    tenantId: "<id>",
    databaseName: "<value>",
    collectionId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Collections Update Collection", async () => {
  const testHttpClient = createTestHTTPClient("update_collection");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.update({
    tenantId: "<id>",
    databaseName: "<value>",
    collectionId: "<id>",
    updateCollectionPayload: {},
  });
  expect(result).toBeDefined();
});

test("Collections Delete Collection", async () => {
  const testHttpClient = createTestHTTPClient("delete_collection");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.delete({
    tenantId: "<id>",
    databaseName: "<value>",
    collectionId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Collections Collection Count", async () => {
  const testHttpClient = createTestHTTPClient("collection_count");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.countRecords({
    tenantId: "<id>",
    databaseName: "<value>",
    collectionId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Collections Collection Get", async () => {
  const testHttpClient = createTestHTTPClient("collection_get");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.retrieveRecords({
    tenantId: "<id>",
    databaseName: "<value>",
    collectionId: "<id>",
    getRequestPayload: {},
  });
  expect(result).toBeDefined();
});

test("Collections Collection Query", async () => {
  const testHttpClient = createTestHTTPClient("collection_query");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.query({
    tenantId: "<id>",
    databaseName: "<value>",
    collectionId: "<id>",
    queryRequestPayload: {
      queryEmbeddings: [
        [
          510.9,
          8580.37,
          6368.5,
        ],
        [
          6399.17,
          7442.89,
        ],
        [
          9708.31,
          8997.26,
          4020.95,
        ],
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Collections Count Collections", async () => {
  const testHttpClient = createTestHTTPClient("count_collections");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.count({
    tenantId: "<id>",
    databaseName: "<value>",
  });
  expect(result).toBeDefined();
});

test("Collections Collection Add", async () => {
  const testHttpClient = createTestHTTPClient("collection_add");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.add({
    tenant: "<value>",
    databaseName: "<value>",
    collectionId: "<id>",
    addCollectionRecordsPayload: {
      ids: [
        "<value>",
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Collections Collection Delete", async () => {
  const testHttpClient = createTestHTTPClient("collection_delete");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.deleteRecords({
    tenant: "<value>",
    databaseName: "<value>",
    collectionId: "<id>",
    deleteCollectionRecordsPayload: {},
  });
  expect(result).toBeDefined();
});

test("Collections Collection Update", async () => {
  const testHttpClient = createTestHTTPClient("collection_update");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.updateById({
    tenant: "<value>",
    databaseName: "<value>",
    collectionId: "<id>",
    updateCollectionRecordsPayload: {
      ids: [
        "<value>",
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Collections Collection Upsert", async () => {
  const testHttpClient = createTestHTTPClient("collection_upsert");

  const API = new API({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["API_API_KEY"] ?? "value",
  });

  const result = await API.collections.upsert({
    tenant: "<value>",
    databaseName: "<value>",
    collectionId: "<id>",
    upsertCollectionRecordsPayload: {
      ids: [
        "<value>",
        "<value>",
      ],
    },
  });
  expect(result).toBeDefined();
});
