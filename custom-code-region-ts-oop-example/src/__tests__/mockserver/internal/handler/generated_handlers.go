// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"context"
	"mockserver/internal/logging"
	"mockserver/internal/tracking"
	"net/http"
)

// GeneratedHandlers returns all generated handlers.
func GeneratedHandlers(ctx context.Context, dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) []*GeneratedHandler {
	return []*GeneratedHandler{
		NewGeneratedHandler(ctx, http.MethodDelete, "/api/v2/tenants/{tenant_id}/databases/{database_name}", pathDeleteAPIV2TenantsTenantIDDatabasesDatabaseName(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodDelete, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections/{collection_id}", pathDeleteAPIV2TenantsTenantIDDatabasesDatabaseNameCollectionsCollectionID(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/auth/identity", pathGetAPIV2AuthIdentity(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/healthcheck", pathGetAPIV2Healthcheck(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/heartbeat", pathGetAPIV2Heartbeat(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/pre-flight-checks", pathGetAPIV2PreFlightChecks(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/tenants/{tenant_id}/databases", pathGetAPIV2TenantsTenantIDDatabases(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/tenants/{tenant_id}/databases/{database_name}", pathGetAPIV2TenantsTenantIDDatabasesDatabaseName(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections", pathGetAPIV2TenantsTenantIDDatabasesDatabaseNameCollections(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections/{collection_id}", pathGetAPIV2TenantsTenantIDDatabasesDatabaseNameCollectionsCollectionID(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections/{collection_id}/count", pathGetAPIV2TenantsTenantIDDatabasesDatabaseNameCollectionsCollectionIDCount(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections_count", pathGetAPIV2TenantsTenantIDDatabasesDatabaseNameCollectionsCount(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodGet, "/api/v2/tenants/{tenant_name}", pathGetAPIV2TenantsTenantName(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants", pathPostAPIV2Tenants(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant_id}/databases", pathPostAPIV2TenantsTenantIDDatabases(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections", pathPostAPIV2TenantsTenantIDDatabasesDatabaseNameCollections(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections/{collection_id}/get", pathPostAPIV2TenantsTenantIDDatabasesDatabaseNameCollectionsCollectionIDGet(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections/{collection_id}/query", pathPostAPIV2TenantsTenantIDDatabasesDatabaseNameCollectionsCollectionIDQuery(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/add", pathPostAPIV2TenantsTenantDatabasesDatabaseNameCollectionsCollectionIDAdd(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/delete", pathPostAPIV2TenantsTenantDatabasesDatabaseNameCollectionsCollectionIDDelete(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/update", pathPostAPIV2TenantsTenantDatabasesDatabaseNameCollectionsCollectionIDUpdate(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPost, "/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/upsert", pathPostAPIV2TenantsTenantDatabasesDatabaseNameCollectionsCollectionIDUpsert(dir, rt)),
		NewGeneratedHandler(ctx, http.MethodPut, "/api/v2/tenants/{tenant_id}/databases/{database_name}/collections/{collection_id}", pathPutAPIV2TenantsTenantIDDatabasesDatabaseNameCollectionsCollectionID(dir, rt)),
	}
}
