// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAPIV2TenantsTenantIDDatabases(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "list_databases[0]":
			dir.HandlerFunc("list_databases", testListDatabasesListDatabases0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListDatabasesListDatabases0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityHeader(req, "x-API-token", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.Vec{
		components.Vec{
			CollectionID: "8a232aa0-b11b-48a0-8057-1e9e705d0e6e",
			Database:     "<value>",
			LogPosition:  75058,
			Name:         "<value>",
			Tenant:       "<value>",
			Version:      897069,
		},
		components.Vec{
			CollectionID: "2766718d-6d46-412e-80ae-e1b9ddf121dc",
			Database:     "<value>",
			LogPosition:  664080,
			Name:         "<value>",
			Tenant:       "<value>",
			Version:      284580,
		},
		components.Vec{
			CollectionID: "c8104fb4-51a7-40cf-8c8f-e07fbc60ab96",
			Database:     "<value>",
			LogPosition:  829409,
			Name:         "<value>",
			Tenant:       "<value>",
			Version:      329360,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
