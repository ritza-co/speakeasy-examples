// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type HashMapType string

const (
	HashMapTypeBoolean HashMapType = "boolean"
	HashMapTypeInteger HashMapType = "integer"
	HashMapTypeNumber  HashMapType = "number"
	HashMapTypeStr     HashMapType = "str"
)

type HashMap struct {
	Boolean *bool
	Integer *int64
	Number  *float64
	Str     *string

	Type HashMapType
}

func CreateHashMapBoolean(boolean bool) HashMap {
	typ := HashMapTypeBoolean

	return HashMap{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateHashMapInteger(integer int64) HashMap {
	typ := HashMapTypeInteger

	return HashMap{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateHashMapNumber(number float64) HashMap {
	typ := HashMapTypeNumber

	return HashMap{
		Number: &number,
		Type:   typ,
	}
}

func CreateHashMapStr(str string) HashMap {
	typ := HashMapTypeStr

	return HashMap{
		Str:  &str,
		Type: typ,
	}
}

func (u *HashMap) UnmarshalJSON(data []byte) error {

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = HashMapTypeBoolean
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = HashMapTypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = HashMapTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = HashMapTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for HashMap", string(data))
}

func (u HashMap) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type HashMap: all fields are null")
}
