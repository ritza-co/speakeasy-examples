/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InteractionType,
  InteractionType$inboundSchema,
  InteractionType$outboundSchema,
} from "./interactiontype.js";

export type TargetSDK = {
  /**
   * Unique identifier of the target the same as `generate_gen_lock_id`
   */
  id: string;
  /**
   * Unique identifier of the last event for the target
   */
  lastEventId: string;
  /**
   * Timestamp when the event was created in the database.
   */
  lastEventCreatedAt: Date;
  /**
   * Type of interaction.
   */
  lastEventInteractionType: InteractionType;
  /**
   * Indicates whether the event was successful.
   */
  success?: boolean | undefined;
  /**
   * Remote commit ID.
   */
  commitHead?: string | undefined;
  /**
   * Default owner for git remote.
   */
  gitRemoteDefaultOwner?: string | undefined;
  /**
   * Default repository name for git remote.
   */
  gitRemoteDefaultRepo?: string | undefined;
  /**
   * Current working directory relative to the git root.
   */
  gitRelativeCwd?: string | undefined;
  /**
   * eg `typescript`, `terraform`, `python`
   */
  generateTarget: string;
  /**
   * The workflow name of the target.
   */
  generateTargetName?: string | undefined;
  /**
   * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
   */
  generateGenLockId: string;
  /**
   * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
   */
  generateTargetVersion?: string | undefined;
  /**
   * Version of the generated target (post generation)
   */
  generateConfigPostVersion?: string | undefined;
  /**
   * Features prior to generation
   */
  generateGenLockPreFeatures?: string | undefined;
  /**
   * Artifact version for the Previous Generation
   */
  generateGenLockPreVersion?: string | undefined;
  /**
   * Eligible feature set during generation
   */
  generateEligibleFeatures?: string | undefined;
  /**
   * The number of operations ignored in generation.
   */
  generateNumberOfOperationsIgnored?: number | undefined;
  /**
   * The number of operations used in generation.
   */
  generateNumberOfOperationsUsed?: number | undefined;
  /**
   * The number of terraform resources used in generation.
   */
  generateNumberOfTerraformResources?: number | undefined;
  /**
   * Indicates whether the target was considered published.
   */
  generatePublished?: boolean | undefined;
  /**
   * Name of the CI environment.
   */
  continuousIntegrationEnvironment?: string | undefined;
  /**
   * GitHub Action ref value.
   */
  ghActionRef?: string | undefined;
  /**
   * Link to the GitHub action run.
   */
  ghActionRunLink?: string | undefined;
  /**
   * Version of the GitHub action.
   */
  ghActionVersion?: string | undefined;
  /**
   * GitHub organization of the action.
   */
  ghActionOrganization?: string | undefined;
  /**
   * GitHub repository of the action.
   */
  ghActionRepository?: string | undefined;
  /**
   * Label of the git repository.
   */
  repoLabel?: string | undefined;
  /**
   * Remote hostname.
   */
  hostname?: string | undefined;
  /**
   * User's name from git configuration. (not GitHub username)
   */
  gitUserName?: string | undefined;
  /**
   * User email from git configuration.
   */
  gitUserEmail?: string | undefined;
  /**
   * The revision digest of the source.
   */
  sourceRevisionDigest?: string | undefined;
  /**
   * The blob digest of the source.
   */
  sourceBlobDigest?: string | undefined;
  /**
   * The namespace name of the source.
   */
  sourceNamespaceName?: string | undefined;
  /**
   * Error message if the last event was not successful.
   */
  error?: string | undefined;
  /**
   * Workflow file (prior to execution)
   */
  workflowPreRaw?: string | undefined;
  /**
   * Workflow file (post execution)
   */
  workflowPostRaw?: string | undefined;
  /**
   * Workflow lock file (prior to execution)
   */
  workflowLockPreRaw?: string | undefined;
  /**
   * Workflow lock file (post execution)
   */
  workflowLockPostRaw?: string | undefined;
  /**
   * URL of the published package.
   */
  publishPackageUrl?: string | undefined;
  /**
   * Name of the published package.
   */
  publishPackageName?: string | undefined;
  /**
   * Version of the published package.
   */
  publishPackageVersion?: string | undefined;
  /**
   * Name of the registry where the package was published.
   */
  publishPackageRegistryName?: string | undefined;
  /**
   * Timestamp when the last publishing event was created.
   */
  lastPublishCreatedAt?: Date | undefined;
  /**
   * Link to the GitHub action run for the last publishing event.
   */
  lastPublishGhActionRunLink?: string | undefined;
};

/** @internal */
export const TargetSDK$inboundSchema: z.ZodType<
  TargetSDK,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  last_event_id: z.string(),
  last_event_created_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  last_event_interaction_type: InteractionType$inboundSchema,
  success: z.boolean().optional(),
  commit_head: z.string().optional(),
  git_remote_default_owner: z.string().optional(),
  git_remote_default_repo: z.string().optional(),
  git_relative_cwd: z.string().optional(),
  generate_target: z.string(),
  generate_target_name: z.string().optional(),
  generate_gen_lock_id: z.string(),
  generate_target_version: z.string().optional(),
  generate_config_post_version: z.string().optional(),
  generate_gen_lock_pre_features: z.string().optional(),
  generate_gen_lock_pre_version: z.string().optional(),
  generate_eligible_features: z.string().optional(),
  generate_number_of_operations_ignored: z.number().int().optional(),
  generate_number_of_operations_used: z.number().int().optional(),
  generate_number_of_terraform_resources: z.number().int().optional(),
  generate_published: z.boolean().optional(),
  continuous_integration_environment: z.string().optional(),
  gh_action_ref: z.string().optional(),
  gh_action_run_link: z.string().optional(),
  gh_action_version: z.string().optional(),
  gh_action_organization: z.string().optional(),
  gh_action_repository: z.string().optional(),
  repo_label: z.string().optional(),
  hostname: z.string().optional(),
  git_user_name: z.string().optional(),
  git_user_email: z.string().optional(),
  source_revision_digest: z.string().optional(),
  source_blob_digest: z.string().optional(),
  source_namespace_name: z.string().optional(),
  error: z.string().optional(),
  workflow_pre_raw: z.string().optional(),
  workflow_post_raw: z.string().optional(),
  workflow_lock_pre_raw: z.string().optional(),
  workflow_lock_post_raw: z.string().optional(),
  publish_package_url: z.string().optional(),
  publish_package_name: z.string().optional(),
  publish_package_version: z.string().optional(),
  publish_package_registry_name: z.string().optional(),
  last_publish_created_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  last_publish_gh_action_run_link: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "last_event_id": "lastEventId",
    "last_event_created_at": "lastEventCreatedAt",
    "last_event_interaction_type": "lastEventInteractionType",
    "commit_head": "commitHead",
    "git_remote_default_owner": "gitRemoteDefaultOwner",
    "git_remote_default_repo": "gitRemoteDefaultRepo",
    "git_relative_cwd": "gitRelativeCwd",
    "generate_target": "generateTarget",
    "generate_target_name": "generateTargetName",
    "generate_gen_lock_id": "generateGenLockId",
    "generate_target_version": "generateTargetVersion",
    "generate_config_post_version": "generateConfigPostVersion",
    "generate_gen_lock_pre_features": "generateGenLockPreFeatures",
    "generate_gen_lock_pre_version": "generateGenLockPreVersion",
    "generate_eligible_features": "generateEligibleFeatures",
    "generate_number_of_operations_ignored":
      "generateNumberOfOperationsIgnored",
    "generate_number_of_operations_used": "generateNumberOfOperationsUsed",
    "generate_number_of_terraform_resources":
      "generateNumberOfTerraformResources",
    "generate_published": "generatePublished",
    "continuous_integration_environment": "continuousIntegrationEnvironment",
    "gh_action_ref": "ghActionRef",
    "gh_action_run_link": "ghActionRunLink",
    "gh_action_version": "ghActionVersion",
    "gh_action_organization": "ghActionOrganization",
    "gh_action_repository": "ghActionRepository",
    "repo_label": "repoLabel",
    "git_user_name": "gitUserName",
    "git_user_email": "gitUserEmail",
    "source_revision_digest": "sourceRevisionDigest",
    "source_blob_digest": "sourceBlobDigest",
    "source_namespace_name": "sourceNamespaceName",
    "workflow_pre_raw": "workflowPreRaw",
    "workflow_post_raw": "workflowPostRaw",
    "workflow_lock_pre_raw": "workflowLockPreRaw",
    "workflow_lock_post_raw": "workflowLockPostRaw",
    "publish_package_url": "publishPackageUrl",
    "publish_package_name": "publishPackageName",
    "publish_package_version": "publishPackageVersion",
    "publish_package_registry_name": "publishPackageRegistryName",
    "last_publish_created_at": "lastPublishCreatedAt",
    "last_publish_gh_action_run_link": "lastPublishGhActionRunLink",
  });
});

/** @internal */
export type TargetSDK$Outbound = {
  id: string;
  last_event_id: string;
  last_event_created_at: string;
  last_event_interaction_type: string;
  success?: boolean | undefined;
  commit_head?: string | undefined;
  git_remote_default_owner?: string | undefined;
  git_remote_default_repo?: string | undefined;
  git_relative_cwd?: string | undefined;
  generate_target: string;
  generate_target_name?: string | undefined;
  generate_gen_lock_id: string;
  generate_target_version?: string | undefined;
  generate_config_post_version?: string | undefined;
  generate_gen_lock_pre_features?: string | undefined;
  generate_gen_lock_pre_version?: string | undefined;
  generate_eligible_features?: string | undefined;
  generate_number_of_operations_ignored?: number | undefined;
  generate_number_of_operations_used?: number | undefined;
  generate_number_of_terraform_resources?: number | undefined;
  generate_published?: boolean | undefined;
  continuous_integration_environment?: string | undefined;
  gh_action_ref?: string | undefined;
  gh_action_run_link?: string | undefined;
  gh_action_version?: string | undefined;
  gh_action_organization?: string | undefined;
  gh_action_repository?: string | undefined;
  repo_label?: string | undefined;
  hostname?: string | undefined;
  git_user_name?: string | undefined;
  git_user_email?: string | undefined;
  source_revision_digest?: string | undefined;
  source_blob_digest?: string | undefined;
  source_namespace_name?: string | undefined;
  error?: string | undefined;
  workflow_pre_raw?: string | undefined;
  workflow_post_raw?: string | undefined;
  workflow_lock_pre_raw?: string | undefined;
  workflow_lock_post_raw?: string | undefined;
  publish_package_url?: string | undefined;
  publish_package_name?: string | undefined;
  publish_package_version?: string | undefined;
  publish_package_registry_name?: string | undefined;
  last_publish_created_at?: string | undefined;
  last_publish_gh_action_run_link?: string | undefined;
};

/** @internal */
export const TargetSDK$outboundSchema: z.ZodType<
  TargetSDK$Outbound,
  z.ZodTypeDef,
  TargetSDK
> = z.object({
  id: z.string(),
  lastEventId: z.string(),
  lastEventCreatedAt: z.date().transform(v => v.toISOString()),
  lastEventInteractionType: InteractionType$outboundSchema,
  success: z.boolean().optional(),
  commitHead: z.string().optional(),
  gitRemoteDefaultOwner: z.string().optional(),
  gitRemoteDefaultRepo: z.string().optional(),
  gitRelativeCwd: z.string().optional(),
  generateTarget: z.string(),
  generateTargetName: z.string().optional(),
  generateGenLockId: z.string(),
  generateTargetVersion: z.string().optional(),
  generateConfigPostVersion: z.string().optional(),
  generateGenLockPreFeatures: z.string().optional(),
  generateGenLockPreVersion: z.string().optional(),
  generateEligibleFeatures: z.string().optional(),
  generateNumberOfOperationsIgnored: z.number().int().optional(),
  generateNumberOfOperationsUsed: z.number().int().optional(),
  generateNumberOfTerraformResources: z.number().int().optional(),
  generatePublished: z.boolean().optional(),
  continuousIntegrationEnvironment: z.string().optional(),
  ghActionRef: z.string().optional(),
  ghActionRunLink: z.string().optional(),
  ghActionVersion: z.string().optional(),
  ghActionOrganization: z.string().optional(),
  ghActionRepository: z.string().optional(),
  repoLabel: z.string().optional(),
  hostname: z.string().optional(),
  gitUserName: z.string().optional(),
  gitUserEmail: z.string().optional(),
  sourceRevisionDigest: z.string().optional(),
  sourceBlobDigest: z.string().optional(),
  sourceNamespaceName: z.string().optional(),
  error: z.string().optional(),
  workflowPreRaw: z.string().optional(),
  workflowPostRaw: z.string().optional(),
  workflowLockPreRaw: z.string().optional(),
  workflowLockPostRaw: z.string().optional(),
  publishPackageUrl: z.string().optional(),
  publishPackageName: z.string().optional(),
  publishPackageVersion: z.string().optional(),
  publishPackageRegistryName: z.string().optional(),
  lastPublishCreatedAt: z.date().transform(v => v.toISOString()).optional(),
  lastPublishGhActionRunLink: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    lastEventId: "last_event_id",
    lastEventCreatedAt: "last_event_created_at",
    lastEventInteractionType: "last_event_interaction_type",
    commitHead: "commit_head",
    gitRemoteDefaultOwner: "git_remote_default_owner",
    gitRemoteDefaultRepo: "git_remote_default_repo",
    gitRelativeCwd: "git_relative_cwd",
    generateTarget: "generate_target",
    generateTargetName: "generate_target_name",
    generateGenLockId: "generate_gen_lock_id",
    generateTargetVersion: "generate_target_version",
    generateConfigPostVersion: "generate_config_post_version",
    generateGenLockPreFeatures: "generate_gen_lock_pre_features",
    generateGenLockPreVersion: "generate_gen_lock_pre_version",
    generateEligibleFeatures: "generate_eligible_features",
    generateNumberOfOperationsIgnored: "generate_number_of_operations_ignored",
    generateNumberOfOperationsUsed: "generate_number_of_operations_used",
    generateNumberOfTerraformResources:
      "generate_number_of_terraform_resources",
    generatePublished: "generate_published",
    continuousIntegrationEnvironment: "continuous_integration_environment",
    ghActionRef: "gh_action_ref",
    ghActionRunLink: "gh_action_run_link",
    ghActionVersion: "gh_action_version",
    ghActionOrganization: "gh_action_organization",
    ghActionRepository: "gh_action_repository",
    repoLabel: "repo_label",
    gitUserName: "git_user_name",
    gitUserEmail: "git_user_email",
    sourceRevisionDigest: "source_revision_digest",
    sourceBlobDigest: "source_blob_digest",
    sourceNamespaceName: "source_namespace_name",
    workflowPreRaw: "workflow_pre_raw",
    workflowPostRaw: "workflow_post_raw",
    workflowLockPreRaw: "workflow_lock_pre_raw",
    workflowLockPostRaw: "workflow_lock_post_raw",
    publishPackageUrl: "publish_package_url",
    publishPackageName: "publish_package_name",
    publishPackageVersion: "publish_package_version",
    publishPackageRegistryName: "publish_package_registry_name",
    lastPublishCreatedAt: "last_publish_created_at",
    lastPublishGhActionRunLink: "last_publish_gh_action_run_link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetSDK$ {
  /** @deprecated use `TargetSDK$inboundSchema` instead. */
  export const inboundSchema = TargetSDK$inboundSchema;
  /** @deprecated use `TargetSDK$outboundSchema` instead. */
  export const outboundSchema = TargetSDK$outboundSchema;
  /** @deprecated use `TargetSDK$Outbound` instead. */
  export type Outbound = TargetSDK$Outbound;
}

export function targetSDKToJSON(targetSDK: TargetSDK): string {
  return JSON.stringify(TargetSDK$outboundSchema.parse(targetSDK));
}

export function targetSDKFromJSON(
  jsonString: string,
): SafeParseResult<TargetSDK, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TargetSDK$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TargetSDK' from JSON`,
  );
}
