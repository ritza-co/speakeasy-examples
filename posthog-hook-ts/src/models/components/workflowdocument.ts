/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Auth = {
  header: string;
  secret: string;
};

/**
 * A document referenced by a workflow
 */
export type WorkflowDocument = {
  location: string;
  auth?: Auth | undefined;
};

/** @internal */
export const Auth$inboundSchema: z.ZodType<Auth, z.ZodTypeDef, unknown> = z
  .object({
    header: z.string(),
    secret: z.string(),
  });

/** @internal */
export type Auth$Outbound = {
  header: string;
  secret: string;
};

/** @internal */
export const Auth$outboundSchema: z.ZodType<Auth$Outbound, z.ZodTypeDef, Auth> =
  z.object({
    header: z.string(),
    secret: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Auth$ {
  /** @deprecated use `Auth$inboundSchema` instead. */
  export const inboundSchema = Auth$inboundSchema;
  /** @deprecated use `Auth$outboundSchema` instead. */
  export const outboundSchema = Auth$outboundSchema;
  /** @deprecated use `Auth$Outbound` instead. */
  export type Outbound = Auth$Outbound;
}

export function authToJSON(auth: Auth): string {
  return JSON.stringify(Auth$outboundSchema.parse(auth));
}

export function authFromJSON(
  jsonString: string,
): SafeParseResult<Auth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Auth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Auth' from JSON`,
  );
}

/** @internal */
export const WorkflowDocument$inboundSchema: z.ZodType<
  WorkflowDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  location: z.string(),
  auth: z.lazy(() => Auth$inboundSchema).optional(),
});

/** @internal */
export type WorkflowDocument$Outbound = {
  location: string;
  auth?: Auth$Outbound | undefined;
};

/** @internal */
export const WorkflowDocument$outboundSchema: z.ZodType<
  WorkflowDocument$Outbound,
  z.ZodTypeDef,
  WorkflowDocument
> = z.object({
  location: z.string(),
  auth: z.lazy(() => Auth$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowDocument$ {
  /** @deprecated use `WorkflowDocument$inboundSchema` instead. */
  export const inboundSchema = WorkflowDocument$inboundSchema;
  /** @deprecated use `WorkflowDocument$outboundSchema` instead. */
  export const outboundSchema = WorkflowDocument$outboundSchema;
  /** @deprecated use `WorkflowDocument$Outbound` instead. */
  export type Outbound = WorkflowDocument$Outbound;
}

export function workflowDocumentToJSON(
  workflowDocument: WorkflowDocument,
): string {
  return JSON.stringify(
    WorkflowDocument$outboundSchema.parse(workflowDocument),
  );
}

export function workflowDocumentFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowDocument, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowDocument$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowDocument' from JSON`,
  );
}
