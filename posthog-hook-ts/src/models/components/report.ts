/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ReportType = {
  Linting: "linting",
  Changes: "changes",
} as const;
export type ReportType = ClosedEnum<typeof ReportType>;

export type Report = {
  type?: ReportType | undefined;
};

/** @internal */
export const ReportType$inboundSchema: z.ZodNativeEnum<typeof ReportType> = z
  .nativeEnum(ReportType);

/** @internal */
export const ReportType$outboundSchema: z.ZodNativeEnum<typeof ReportType> =
  ReportType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportType$ {
  /** @deprecated use `ReportType$inboundSchema` instead. */
  export const inboundSchema = ReportType$inboundSchema;
  /** @deprecated use `ReportType$outboundSchema` instead. */
  export const outboundSchema = ReportType$outboundSchema;
}

/** @internal */
export const Report$inboundSchema: z.ZodType<Report, z.ZodTypeDef, unknown> = z
  .object({
    type: ReportType$inboundSchema.optional(),
  });

/** @internal */
export type Report$Outbound = {
  type?: string | undefined;
};

/** @internal */
export const Report$outboundSchema: z.ZodType<
  Report$Outbound,
  z.ZodTypeDef,
  Report
> = z.object({
  type: ReportType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Report$ {
  /** @deprecated use `Report$inboundSchema` instead. */
  export const inboundSchema = Report$inboundSchema;
  /** @deprecated use `Report$outboundSchema` instead. */
  export const outboundSchema = Report$outboundSchema;
  /** @deprecated use `Report$Outbound` instead. */
  export type Outbound = Report$Outbound;
}

export function reportToJSON(report: Report): string {
  return JSON.stringify(Report$outboundSchema.parse(report));
}

export function reportFromJSON(
  jsonString: string,
): SafeParseResult<Report, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Report$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Report' from JSON`,
  );
}
