/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MagazineRequest = {};

export type MagazineRequestUnion = MagazineRequest | string;

export type BookRequest = {};

export type BookRequestUnion = BookRequest | string;

export type CreatePublicationRequest =
  | BookRequest
  | string
  | MagazineRequest
  | string;

export type CreatePublicationMagazineResponse = {};

export type CreatePublicationMagazineResponseUnion =
  | CreatePublicationMagazineResponse
  | string;

export type CreatePublicationBookResponse = {};

export type CreatePublicationBookResponseUnion =
  | CreatePublicationBookResponse
  | string;

/**
 * Successful operation
 */
export type CreatePublicationResponseBody =
  | CreatePublicationBookResponse
  | string
  | CreatePublicationMagazineResponse
  | string;

/** @internal */
export const MagazineRequest$inboundSchema: z.ZodType<
  MagazineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MagazineRequest$Outbound = {};

/** @internal */
export const MagazineRequest$outboundSchema: z.ZodType<
  MagazineRequest$Outbound,
  z.ZodTypeDef,
  MagazineRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MagazineRequest$ {
  /** @deprecated use `MagazineRequest$inboundSchema` instead. */
  export const inboundSchema = MagazineRequest$inboundSchema;
  /** @deprecated use `MagazineRequest$outboundSchema` instead. */
  export const outboundSchema = MagazineRequest$outboundSchema;
  /** @deprecated use `MagazineRequest$Outbound` instead. */
  export type Outbound = MagazineRequest$Outbound;
}

export function magazineRequestToJSON(
  magazineRequest: MagazineRequest,
): string {
  return JSON.stringify(MagazineRequest$outboundSchema.parse(magazineRequest));
}

export function magazineRequestFromJSON(
  jsonString: string,
): SafeParseResult<MagazineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MagazineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MagazineRequest' from JSON`,
  );
}

/** @internal */
export const MagazineRequestUnion$inboundSchema: z.ZodType<
  MagazineRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => MagazineRequest$inboundSchema), z.string()]);

/** @internal */
export type MagazineRequestUnion$Outbound = MagazineRequest$Outbound | string;

/** @internal */
export const MagazineRequestUnion$outboundSchema: z.ZodType<
  MagazineRequestUnion$Outbound,
  z.ZodTypeDef,
  MagazineRequestUnion
> = z.union([z.lazy(() => MagazineRequest$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MagazineRequestUnion$ {
  /** @deprecated use `MagazineRequestUnion$inboundSchema` instead. */
  export const inboundSchema = MagazineRequestUnion$inboundSchema;
  /** @deprecated use `MagazineRequestUnion$outboundSchema` instead. */
  export const outboundSchema = MagazineRequestUnion$outboundSchema;
  /** @deprecated use `MagazineRequestUnion$Outbound` instead. */
  export type Outbound = MagazineRequestUnion$Outbound;
}

export function magazineRequestUnionToJSON(
  magazineRequestUnion: MagazineRequestUnion,
): string {
  return JSON.stringify(
    MagazineRequestUnion$outboundSchema.parse(magazineRequestUnion),
  );
}

export function magazineRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<MagazineRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MagazineRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MagazineRequestUnion' from JSON`,
  );
}

/** @internal */
export const BookRequest$inboundSchema: z.ZodType<
  BookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BookRequest$Outbound = {};

/** @internal */
export const BookRequest$outboundSchema: z.ZodType<
  BookRequest$Outbound,
  z.ZodTypeDef,
  BookRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookRequest$ {
  /** @deprecated use `BookRequest$inboundSchema` instead. */
  export const inboundSchema = BookRequest$inboundSchema;
  /** @deprecated use `BookRequest$outboundSchema` instead. */
  export const outboundSchema = BookRequest$outboundSchema;
  /** @deprecated use `BookRequest$Outbound` instead. */
  export type Outbound = BookRequest$Outbound;
}

export function bookRequestToJSON(bookRequest: BookRequest): string {
  return JSON.stringify(BookRequest$outboundSchema.parse(bookRequest));
}

export function bookRequestFromJSON(
  jsonString: string,
): SafeParseResult<BookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BookRequest' from JSON`,
  );
}

/** @internal */
export const BookRequestUnion$inboundSchema: z.ZodType<
  BookRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => BookRequest$inboundSchema), z.string()]);

/** @internal */
export type BookRequestUnion$Outbound = BookRequest$Outbound | string;

/** @internal */
export const BookRequestUnion$outboundSchema: z.ZodType<
  BookRequestUnion$Outbound,
  z.ZodTypeDef,
  BookRequestUnion
> = z.union([z.lazy(() => BookRequest$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookRequestUnion$ {
  /** @deprecated use `BookRequestUnion$inboundSchema` instead. */
  export const inboundSchema = BookRequestUnion$inboundSchema;
  /** @deprecated use `BookRequestUnion$outboundSchema` instead. */
  export const outboundSchema = BookRequestUnion$outboundSchema;
  /** @deprecated use `BookRequestUnion$Outbound` instead. */
  export type Outbound = BookRequestUnion$Outbound;
}

export function bookRequestUnionToJSON(
  bookRequestUnion: BookRequestUnion,
): string {
  return JSON.stringify(
    BookRequestUnion$outboundSchema.parse(bookRequestUnion),
  );
}

export function bookRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<BookRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BookRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BookRequestUnion' from JSON`,
  );
}

/** @internal */
export const CreatePublicationRequest$inboundSchema: z.ZodType<
  CreatePublicationRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([z.lazy(() => BookRequest$inboundSchema), z.string()]),
  z.union([z.lazy(() => MagazineRequest$inboundSchema), z.string()]),
]);

/** @internal */
export type CreatePublicationRequest$Outbound =
  | BookRequest$Outbound
  | string
  | MagazineRequest$Outbound
  | string;

/** @internal */
export const CreatePublicationRequest$outboundSchema: z.ZodType<
  CreatePublicationRequest$Outbound,
  z.ZodTypeDef,
  CreatePublicationRequest
> = z.union([
  z.union([z.lazy(() => BookRequest$outboundSchema), z.string()]),
  z.union([z.lazy(() => MagazineRequest$outboundSchema), z.string()]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationRequest$ {
  /** @deprecated use `CreatePublicationRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePublicationRequest$inboundSchema;
  /** @deprecated use `CreatePublicationRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePublicationRequest$outboundSchema;
  /** @deprecated use `CreatePublicationRequest$Outbound` instead. */
  export type Outbound = CreatePublicationRequest$Outbound;
}

export function createPublicationRequestToJSON(
  createPublicationRequest: CreatePublicationRequest,
): string {
  return JSON.stringify(
    CreatePublicationRequest$outboundSchema.parse(createPublicationRequest),
  );
}

export function createPublicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePublicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationRequest' from JSON`,
  );
}

/** @internal */
export const CreatePublicationMagazineResponse$inboundSchema: z.ZodType<
  CreatePublicationMagazineResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreatePublicationMagazineResponse$Outbound = {};

/** @internal */
export const CreatePublicationMagazineResponse$outboundSchema: z.ZodType<
  CreatePublicationMagazineResponse$Outbound,
  z.ZodTypeDef,
  CreatePublicationMagazineResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationMagazineResponse$ {
  /** @deprecated use `CreatePublicationMagazineResponse$inboundSchema` instead. */
  export const inboundSchema = CreatePublicationMagazineResponse$inboundSchema;
  /** @deprecated use `CreatePublicationMagazineResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreatePublicationMagazineResponse$outboundSchema;
  /** @deprecated use `CreatePublicationMagazineResponse$Outbound` instead. */
  export type Outbound = CreatePublicationMagazineResponse$Outbound;
}

export function createPublicationMagazineResponseToJSON(
  createPublicationMagazineResponse: CreatePublicationMagazineResponse,
): string {
  return JSON.stringify(
    CreatePublicationMagazineResponse$outboundSchema.parse(
      createPublicationMagazineResponse,
    ),
  );
}

export function createPublicationMagazineResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationMagazineResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePublicationMagazineResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationMagazineResponse' from JSON`,
  );
}

/** @internal */
export const CreatePublicationMagazineResponseUnion$inboundSchema: z.ZodType<
  CreatePublicationMagazineResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePublicationMagazineResponse$inboundSchema),
  z.string(),
]);

/** @internal */
export type CreatePublicationMagazineResponseUnion$Outbound =
  | CreatePublicationMagazineResponse$Outbound
  | string;

/** @internal */
export const CreatePublicationMagazineResponseUnion$outboundSchema: z.ZodType<
  CreatePublicationMagazineResponseUnion$Outbound,
  z.ZodTypeDef,
  CreatePublicationMagazineResponseUnion
> = z.union([
  z.lazy(() => CreatePublicationMagazineResponse$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationMagazineResponseUnion$ {
  /** @deprecated use `CreatePublicationMagazineResponseUnion$inboundSchema` instead. */
  export const inboundSchema =
    CreatePublicationMagazineResponseUnion$inboundSchema;
  /** @deprecated use `CreatePublicationMagazineResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreatePublicationMagazineResponseUnion$outboundSchema;
  /** @deprecated use `CreatePublicationMagazineResponseUnion$Outbound` instead. */
  export type Outbound = CreatePublicationMagazineResponseUnion$Outbound;
}

export function createPublicationMagazineResponseUnionToJSON(
  createPublicationMagazineResponseUnion:
    CreatePublicationMagazineResponseUnion,
): string {
  return JSON.stringify(
    CreatePublicationMagazineResponseUnion$outboundSchema.parse(
      createPublicationMagazineResponseUnion,
    ),
  );
}

export function createPublicationMagazineResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationMagazineResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePublicationMagazineResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationMagazineResponseUnion' from JSON`,
  );
}

/** @internal */
export const CreatePublicationBookResponse$inboundSchema: z.ZodType<
  CreatePublicationBookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreatePublicationBookResponse$Outbound = {};

/** @internal */
export const CreatePublicationBookResponse$outboundSchema: z.ZodType<
  CreatePublicationBookResponse$Outbound,
  z.ZodTypeDef,
  CreatePublicationBookResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationBookResponse$ {
  /** @deprecated use `CreatePublicationBookResponse$inboundSchema` instead. */
  export const inboundSchema = CreatePublicationBookResponse$inboundSchema;
  /** @deprecated use `CreatePublicationBookResponse$outboundSchema` instead. */
  export const outboundSchema = CreatePublicationBookResponse$outboundSchema;
  /** @deprecated use `CreatePublicationBookResponse$Outbound` instead. */
  export type Outbound = CreatePublicationBookResponse$Outbound;
}

export function createPublicationBookResponseToJSON(
  createPublicationBookResponse: CreatePublicationBookResponse,
): string {
  return JSON.stringify(
    CreatePublicationBookResponse$outboundSchema.parse(
      createPublicationBookResponse,
    ),
  );
}

export function createPublicationBookResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationBookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePublicationBookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationBookResponse' from JSON`,
  );
}

/** @internal */
export const CreatePublicationBookResponseUnion$inboundSchema: z.ZodType<
  CreatePublicationBookResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePublicationBookResponse$inboundSchema),
  z.string(),
]);

/** @internal */
export type CreatePublicationBookResponseUnion$Outbound =
  | CreatePublicationBookResponse$Outbound
  | string;

/** @internal */
export const CreatePublicationBookResponseUnion$outboundSchema: z.ZodType<
  CreatePublicationBookResponseUnion$Outbound,
  z.ZodTypeDef,
  CreatePublicationBookResponseUnion
> = z.union([
  z.lazy(() => CreatePublicationBookResponse$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationBookResponseUnion$ {
  /** @deprecated use `CreatePublicationBookResponseUnion$inboundSchema` instead. */
  export const inboundSchema = CreatePublicationBookResponseUnion$inboundSchema;
  /** @deprecated use `CreatePublicationBookResponseUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreatePublicationBookResponseUnion$outboundSchema;
  /** @deprecated use `CreatePublicationBookResponseUnion$Outbound` instead. */
  export type Outbound = CreatePublicationBookResponseUnion$Outbound;
}

export function createPublicationBookResponseUnionToJSON(
  createPublicationBookResponseUnion: CreatePublicationBookResponseUnion,
): string {
  return JSON.stringify(
    CreatePublicationBookResponseUnion$outboundSchema.parse(
      createPublicationBookResponseUnion,
    ),
  );
}

export function createPublicationBookResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationBookResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePublicationBookResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationBookResponseUnion' from JSON`,
  );
}

/** @internal */
export const CreatePublicationResponseBody$inboundSchema: z.ZodType<
  CreatePublicationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.lazy(() => CreatePublicationBookResponse$inboundSchema),
    z.string(),
  ]),
  z.union([
    z.lazy(() => CreatePublicationMagazineResponse$inboundSchema),
    z.string(),
  ]),
]);

/** @internal */
export type CreatePublicationResponseBody$Outbound =
  | CreatePublicationBookResponse$Outbound
  | string
  | CreatePublicationMagazineResponse$Outbound
  | string;

/** @internal */
export const CreatePublicationResponseBody$outboundSchema: z.ZodType<
  CreatePublicationResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePublicationResponseBody
> = z.union([
  z.union([
    z.lazy(() => CreatePublicationBookResponse$outboundSchema),
    z.string(),
  ]),
  z.union([
    z.lazy(() => CreatePublicationMagazineResponse$outboundSchema),
    z.string(),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePublicationResponseBody$ {
  /** @deprecated use `CreatePublicationResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePublicationResponseBody$inboundSchema;
  /** @deprecated use `CreatePublicationResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePublicationResponseBody$outboundSchema;
  /** @deprecated use `CreatePublicationResponseBody$Outbound` instead. */
  export type Outbound = CreatePublicationResponseBody$Outbound;
}

export function createPublicationResponseBodyToJSON(
  createPublicationResponseBody: CreatePublicationResponseBody,
): string {
  return JSON.stringify(
    CreatePublicationResponseBody$outboundSchema.parse(
      createPublicationResponseBody,
    ),
  );
}

export function createPublicationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePublicationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePublicationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePublicationResponseBody' from JSON`,
  );
}
