/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InteractionType,
  InteractionType$inboundSchema,
  InteractionType$outboundSchema,
} from "./interactiontype.js";

/**
 * Bump type of the lock file (calculated semver delta, custom change (manual release), or prerelease/graduate)
 */
export const GenerateBumpType = {
  Major: "major",
  Minor: "minor",
  Patch: "patch",
  Custom: "custom",
  Graduate: "graduate",
  Prerelease: "prerelease",
  None: "none",
} as const;
/**
 * Bump type of the lock file (calculated semver delta, custom change (manual release), or prerelease/graduate)
 */
export type GenerateBumpType = ClosedEnum<typeof GenerateBumpType>;

/**
 * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
 */
export const OpenapiDiffBumpType = {
  Major: "major",
  Minor: "minor",
  Patch: "patch",
  None: "none",
} as const;
/**
 * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
 */
export type OpenapiDiffBumpType = ClosedEnum<typeof OpenapiDiffBumpType>;

export type CliEvent = {
  /**
   * Unique identifier for each event.
   */
  id: string;
  /**
   * Unique identifier for each execution of the CLI.
   */
  executionId: string;
  /**
   * Identifier of the workspace.
   */
  workspaceId: string;
  /**
   * Identifier of the Speakeasy API key.
   */
  speakeasyApiKeyName: string;
  /**
   * Type of interaction.
   */
  interactionType: InteractionType;
  /**
   * Timestamp when the event started, in local time.
   */
  localStartedAt: Date;
  /**
   * Timestamp when the event completed, in local time.
   */
  localCompletedAt?: Date | undefined;
  /**
   * Timestamp when the event was created in the database.
   */
  createdAt: Date;
  /**
   * Version of the Speakeasy CLI.
   */
  speakeasyVersion: string;
  /**
   * Indicates whether the event was successful.
   */
  success: boolean;
  /**
   * Full CLI command.
   */
  rawCommand?: string | undefined;
  /**
   * Duration of the event in milliseconds.
   */
  durationMs?: number | undefined;
  /**
   * Name of the CI environment.
   */
  continuousIntegrationEnvironment?: string | undefined;
  /**
   * Link to the GitHub action run.
   */
  ghActionRunLink?: string | undefined;
  /**
   * Version of the GitHub action.
   */
  ghActionVersion?: string | undefined;
  /**
   * GitHub organization of the action.
   */
  ghActionOrganization?: string | undefined;
  /**
   * The reference to a created pull request URL.
   */
  ghPullRequest?: string | undefined;
  /**
   * Whether or not changes were committed from generation in the Github Action.
   */
  ghChangesCommitted?: boolean | undefined;
  /**
   * GitHub Action ref value.
   */
  ghActionRef?: string | undefined;
  /**
   * GitHub repository of the action.
   */
  ghActionRepository?: string | undefined;
  /**
   * Label of the git repository.
   */
  repoLabel?: string | undefined;
  /**
   * Remote commit ID.
   */
  commitHead?: string | undefined;
  /**
   * Remote hostname.
   */
  hostname?: string | undefined;
  /**
   * User's name from git configuration. (not GitHub username)
   */
  gitUserName?: string | undefined;
  /**
   * User email from git configuration.
   */
  gitUserEmail?: string | undefined;
  /**
   * Default owner for git remote.
   */
  gitRemoteDefaultOwner?: string | undefined;
  /**
   * Default repository name for git remote.
   */
  gitRemoteDefaultRepo?: string | undefined;
  /**
   * Current working directory relative to the git root.
   */
  gitRelativeCwd?: string | undefined;
  /**
   * The target of the event.
   */
  generateTarget?: string | undefined;
  /**
   * The workflow name of the target.
   */
  generateTargetName?: string | undefined;
  /**
   * The version of the target.
   */
  generateTargetVersion?: string | undefined;
  /**
   * gen.lock ID (expected to be a uuid).
   */
  generateGenLockId?: string | undefined;
  /**
   * Checksum of the currently Rendered OpenAPI document.
   */
  managementDocChecksum?: string | undefined;
  /**
   * Version taken from info.version field of the Rendered OpenAPI document.
   */
  managementDocVersion?: string | undefined;
  /**
   * Version of the generation logic used.
   */
  generateVersion?: string | undefined;
  /**
   * Indicates whether tests were output.
   */
  generateOutputTests?: boolean | undefined;
  /**
   * Rendered configuration file (prior to generation)
   */
  generateConfigPreRaw?: string | undefined;
  /**
   * Rendered configuration file (post generation)
   */
  generateConfigPostRaw?: string | undefined;
  /**
   * The version of the customer's SDK before we generated
   */
  generateConfigPreVersion?: string | undefined;
  /**
   * The version of the customer's SDK that we just generated
   */
  generateConfigPostVersion?: string | undefined;
  /**
   * Checksum of the configuration file (prior to generation)
   */
  generateConfigPreChecksum?: string | undefined;
  /**
   * Checksum of the configuration file (post generation)
   */
  generateConfigPostChecksum?: string | undefined;
  /**
   * Eligible feature set during generation
   */
  generateEligibleFeatures?: string | undefined;
  /**
   * Features prior to generation
   */
  generateGenLockPreFeatures?: string | undefined;
  /**
   * Features post generation
   */
  generateGenLockPostFeatures?: string | undefined;
  /**
   * info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
   */
  generateGenLockPreDocVersion?: string | undefined;
  /**
   * Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
   */
  generateGenLockPreDocChecksum?: string | undefined;
  /**
   * Artifact version for the Previous Generation
   */
  generateGenLockPreVersion?: string | undefined;
  /**
   * Revision digest of the Previous Generation
   */
  generateGenLockPreRevisionDigest?: string | undefined;
  /**
   * Blob digest of the Previous Generation
   */
  generateGenLockPreBlobDigest?: string | undefined;
  /**
   * Namespace name of the Previous Generation
   */
  generateGenLockPreNamespaceName?: string | undefined;
  /**
   * Bump type of the lock file (calculated semver delta, custom change (manual release), or prerelease/graduate)
   */
  generateBumpType?: GenerateBumpType | undefined;
  /**
   * The number of operations ignored in generation.
   */
  generateNumberOfOperationsIgnored?: number | undefined;
  /**
   * The number of operations used in generation.
   */
  generateNumberOfOperationsUsed?: number | undefined;
  /**
   * The number of terraform resources used in generation.
   */
  generateNumberOfTerraformResources?: number | undefined;
  /**
   * Indicates whether the target was considered published.
   */
  generatePublished?: boolean | undefined;
  /**
   * Expected Repo URL, for use in documentation generation.
   */
  generateRepoUrl?: string | undefined;
  /**
   * URL of the published package.
   */
  publishPackageUrl?: string | undefined;
  /**
   * Name of the published package.
   */
  publishPackageName?: string | undefined;
  /**
   * Version of the published package.
   */
  publishPackageVersion?: string | undefined;
  /**
   * Name of the registry where the package was published.
   */
  publishPackageRegistryName?: string | undefined;
  /**
   * The revision digest of the source.
   */
  sourceRevisionDigest?: string | undefined;
  /**
   * The blob digest of the source.
   */
  sourceBlobDigest?: string | undefined;
  /**
   * The namespace name of the source.
   */
  sourceNamespaceName?: string | undefined;
  /**
   * The checksum of the lint report.
   */
  lintReportDigest?: string | undefined;
  /**
   * The number of errors in the lint report.
   */
  lintReportErrorCount?: number | undefined;
  /**
   * The number of warnings in the lint report.
   */
  lintReportWarningCount?: number | undefined;
  /**
   * The number of info messages in the lint report.
   */
  lintReportInfoCount?: number | undefined;
  /**
   * The checksum of the openapi diff report.
   */
  openapiDiffReportDigest?: string | undefined;
  /**
   * The revision digest of the base source.
   */
  openapiDiffBaseSourceRevisionDigest?: string | undefined;
  /**
   * The blob digest of the base source.
   */
  openapiDiffBaseSourceBlobDigest?: string | undefined;
  /**
   * The namespace name of the base source.
   */
  openapiDiffBaseSourceNamespaceName?: string | undefined;
  /**
   * The number of breaking changes in the openapi diff report.
   */
  openapiDiffBreakingChangesCount?: number | undefined;
  /**
   * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
   */
  openapiDiffBumpType?: OpenapiDiffBumpType | undefined;
  /**
   * Error message if the event was not successful.
   */
  error?: string | undefined;
  /**
   * Mermaid diagram
   */
  mermaidDiagram?: string | undefined;
  /**
   * The last step of the event.
   */
  lastStep?: string | undefined;
  /**
   * The raw test report xml
   */
  testReportRaw?: string | undefined;
  /**
   * Workflow file (prior to execution)
   */
  workflowPreRaw?: string | undefined;
  /**
   * Workflow file (post execution)
   */
  workflowPostRaw?: string | undefined;
  /**
   * Workflow lock file (prior to execution)
   */
  workflowLockPreRaw?: string | undefined;
  /**
   * Workflow lock file (post execution)
   */
  workflowLockPostRaw?: string | undefined;
};

/** @internal */
export const GenerateBumpType$inboundSchema: z.ZodNativeEnum<
  typeof GenerateBumpType
> = z.nativeEnum(GenerateBumpType);

/** @internal */
export const GenerateBumpType$outboundSchema: z.ZodNativeEnum<
  typeof GenerateBumpType
> = GenerateBumpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateBumpType$ {
  /** @deprecated use `GenerateBumpType$inboundSchema` instead. */
  export const inboundSchema = GenerateBumpType$inboundSchema;
  /** @deprecated use `GenerateBumpType$outboundSchema` instead. */
  export const outboundSchema = GenerateBumpType$outboundSchema;
}

/** @internal */
export const OpenapiDiffBumpType$inboundSchema: z.ZodNativeEnum<
  typeof OpenapiDiffBumpType
> = z.nativeEnum(OpenapiDiffBumpType);

/** @internal */
export const OpenapiDiffBumpType$outboundSchema: z.ZodNativeEnum<
  typeof OpenapiDiffBumpType
> = OpenapiDiffBumpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenapiDiffBumpType$ {
  /** @deprecated use `OpenapiDiffBumpType$inboundSchema` instead. */
  export const inboundSchema = OpenapiDiffBumpType$inboundSchema;
  /** @deprecated use `OpenapiDiffBumpType$outboundSchema` instead. */
  export const outboundSchema = OpenapiDiffBumpType$outboundSchema;
}

/** @internal */
export const CliEvent$inboundSchema: z.ZodType<
  CliEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  execution_id: z.string(),
  workspace_id: z.string(),
  speakeasy_api_key_name: z.string(),
  interaction_type: InteractionType$inboundSchema,
  local_started_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  local_completed_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  speakeasy_version: z.string(),
  success: z.boolean(),
  raw_command: z.string().optional(),
  duration_ms: z.number().int().optional(),
  continuous_integration_environment: z.string().optional(),
  gh_action_run_link: z.string().optional(),
  gh_action_version: z.string().optional(),
  gh_action_organization: z.string().optional(),
  gh_pull_request: z.string().optional(),
  gh_changes_committed: z.boolean().optional(),
  gh_action_ref: z.string().optional(),
  gh_action_repository: z.string().optional(),
  repo_label: z.string().optional(),
  commit_head: z.string().optional(),
  hostname: z.string().optional(),
  git_user_name: z.string().optional(),
  git_user_email: z.string().optional(),
  git_remote_default_owner: z.string().optional(),
  git_remote_default_repo: z.string().optional(),
  git_relative_cwd: z.string().optional(),
  generate_target: z.string().optional(),
  generate_target_name: z.string().optional(),
  generate_target_version: z.string().optional(),
  generate_gen_lock_id: z.string().optional(),
  management_doc_checksum: z.string().optional(),
  management_doc_version: z.string().optional(),
  generate_version: z.string().optional(),
  generate_output_tests: z.boolean().optional(),
  generate_config_pre_raw: z.string().optional(),
  generate_config_post_raw: z.string().optional(),
  generate_config_pre_version: z.string().optional(),
  generate_config_post_version: z.string().optional(),
  generate_config_pre_checksum: z.string().optional(),
  generate_config_post_checksum: z.string().optional(),
  generate_eligible_features: z.string().optional(),
  generate_gen_lock_pre_features: z.string().optional(),
  generate_gen_lock_post_features: z.string().optional(),
  generate_gen_lock_pre_doc_version: z.string().optional(),
  generate_gen_lock_pre_doc_checksum: z.string().optional(),
  generate_gen_lock_pre_version: z.string().optional(),
  generate_gen_lock_pre_revision_digest: z.string().optional(),
  generate_gen_lock_pre_blob_digest: z.string().optional(),
  generate_gen_lock_pre_namespace_name: z.string().optional(),
  generate_bump_type: GenerateBumpType$inboundSchema.optional(),
  generate_number_of_operations_ignored: z.number().int().optional(),
  generate_number_of_operations_used: z.number().int().optional(),
  generate_number_of_terraform_resources: z.number().int().optional(),
  generate_published: z.boolean().optional(),
  generate_repo_url: z.string().optional(),
  publish_package_url: z.string().optional(),
  publish_package_name: z.string().optional(),
  publish_package_version: z.string().optional(),
  publish_package_registry_name: z.string().optional(),
  source_revision_digest: z.string().optional(),
  source_blob_digest: z.string().optional(),
  source_namespace_name: z.string().optional(),
  lint_report_digest: z.string().optional(),
  lint_report_error_count: z.number().int().optional(),
  lint_report_warning_count: z.number().int().optional(),
  lint_report_info_count: z.number().int().optional(),
  openapi_diff_report_digest: z.string().optional(),
  openapi_diff_base_source_revision_digest: z.string().optional(),
  openapi_diff_base_source_blob_digest: z.string().optional(),
  openapi_diff_base_source_namespace_name: z.string().optional(),
  openapi_diff_breaking_changes_count: z.number().int().optional(),
  openapi_diff_bump_type: OpenapiDiffBumpType$inboundSchema.optional(),
  error: z.string().optional(),
  mermaid_diagram: z.string().optional(),
  last_step: z.string().optional(),
  test_report_raw: z.string().optional(),
  workflow_pre_raw: z.string().optional(),
  workflow_post_raw: z.string().optional(),
  workflow_lock_pre_raw: z.string().optional(),
  workflow_lock_post_raw: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "execution_id": "executionId",
    "workspace_id": "workspaceId",
    "speakeasy_api_key_name": "speakeasyApiKeyName",
    "interaction_type": "interactionType",
    "local_started_at": "localStartedAt",
    "local_completed_at": "localCompletedAt",
    "created_at": "createdAt",
    "speakeasy_version": "speakeasyVersion",
    "raw_command": "rawCommand",
    "duration_ms": "durationMs",
    "continuous_integration_environment": "continuousIntegrationEnvironment",
    "gh_action_run_link": "ghActionRunLink",
    "gh_action_version": "ghActionVersion",
    "gh_action_organization": "ghActionOrganization",
    "gh_pull_request": "ghPullRequest",
    "gh_changes_committed": "ghChangesCommitted",
    "gh_action_ref": "ghActionRef",
    "gh_action_repository": "ghActionRepository",
    "repo_label": "repoLabel",
    "commit_head": "commitHead",
    "git_user_name": "gitUserName",
    "git_user_email": "gitUserEmail",
    "git_remote_default_owner": "gitRemoteDefaultOwner",
    "git_remote_default_repo": "gitRemoteDefaultRepo",
    "git_relative_cwd": "gitRelativeCwd",
    "generate_target": "generateTarget",
    "generate_target_name": "generateTargetName",
    "generate_target_version": "generateTargetVersion",
    "generate_gen_lock_id": "generateGenLockId",
    "management_doc_checksum": "managementDocChecksum",
    "management_doc_version": "managementDocVersion",
    "generate_version": "generateVersion",
    "generate_output_tests": "generateOutputTests",
    "generate_config_pre_raw": "generateConfigPreRaw",
    "generate_config_post_raw": "generateConfigPostRaw",
    "generate_config_pre_version": "generateConfigPreVersion",
    "generate_config_post_version": "generateConfigPostVersion",
    "generate_config_pre_checksum": "generateConfigPreChecksum",
    "generate_config_post_checksum": "generateConfigPostChecksum",
    "generate_eligible_features": "generateEligibleFeatures",
    "generate_gen_lock_pre_features": "generateGenLockPreFeatures",
    "generate_gen_lock_post_features": "generateGenLockPostFeatures",
    "generate_gen_lock_pre_doc_version": "generateGenLockPreDocVersion",
    "generate_gen_lock_pre_doc_checksum": "generateGenLockPreDocChecksum",
    "generate_gen_lock_pre_version": "generateGenLockPreVersion",
    "generate_gen_lock_pre_revision_digest": "generateGenLockPreRevisionDigest",
    "generate_gen_lock_pre_blob_digest": "generateGenLockPreBlobDigest",
    "generate_gen_lock_pre_namespace_name": "generateGenLockPreNamespaceName",
    "generate_bump_type": "generateBumpType",
    "generate_number_of_operations_ignored":
      "generateNumberOfOperationsIgnored",
    "generate_number_of_operations_used": "generateNumberOfOperationsUsed",
    "generate_number_of_terraform_resources":
      "generateNumberOfTerraformResources",
    "generate_published": "generatePublished",
    "generate_repo_url": "generateRepoUrl",
    "publish_package_url": "publishPackageUrl",
    "publish_package_name": "publishPackageName",
    "publish_package_version": "publishPackageVersion",
    "publish_package_registry_name": "publishPackageRegistryName",
    "source_revision_digest": "sourceRevisionDigest",
    "source_blob_digest": "sourceBlobDigest",
    "source_namespace_name": "sourceNamespaceName",
    "lint_report_digest": "lintReportDigest",
    "lint_report_error_count": "lintReportErrorCount",
    "lint_report_warning_count": "lintReportWarningCount",
    "lint_report_info_count": "lintReportInfoCount",
    "openapi_diff_report_digest": "openapiDiffReportDigest",
    "openapi_diff_base_source_revision_digest":
      "openapiDiffBaseSourceRevisionDigest",
    "openapi_diff_base_source_blob_digest": "openapiDiffBaseSourceBlobDigest",
    "openapi_diff_base_source_namespace_name":
      "openapiDiffBaseSourceNamespaceName",
    "openapi_diff_breaking_changes_count": "openapiDiffBreakingChangesCount",
    "openapi_diff_bump_type": "openapiDiffBumpType",
    "mermaid_diagram": "mermaidDiagram",
    "last_step": "lastStep",
    "test_report_raw": "testReportRaw",
    "workflow_pre_raw": "workflowPreRaw",
    "workflow_post_raw": "workflowPostRaw",
    "workflow_lock_pre_raw": "workflowLockPreRaw",
    "workflow_lock_post_raw": "workflowLockPostRaw",
  });
});

/** @internal */
export type CliEvent$Outbound = {
  id: string;
  execution_id: string;
  workspace_id: string;
  speakeasy_api_key_name: string;
  interaction_type: string;
  local_started_at: string;
  local_completed_at?: string | undefined;
  created_at: string;
  speakeasy_version: string;
  success: boolean;
  raw_command?: string | undefined;
  duration_ms?: number | undefined;
  continuous_integration_environment?: string | undefined;
  gh_action_run_link?: string | undefined;
  gh_action_version?: string | undefined;
  gh_action_organization?: string | undefined;
  gh_pull_request?: string | undefined;
  gh_changes_committed?: boolean | undefined;
  gh_action_ref?: string | undefined;
  gh_action_repository?: string | undefined;
  repo_label?: string | undefined;
  commit_head?: string | undefined;
  hostname?: string | undefined;
  git_user_name?: string | undefined;
  git_user_email?: string | undefined;
  git_remote_default_owner?: string | undefined;
  git_remote_default_repo?: string | undefined;
  git_relative_cwd?: string | undefined;
  generate_target?: string | undefined;
  generate_target_name?: string | undefined;
  generate_target_version?: string | undefined;
  generate_gen_lock_id?: string | undefined;
  management_doc_checksum?: string | undefined;
  management_doc_version?: string | undefined;
  generate_version?: string | undefined;
  generate_output_tests?: boolean | undefined;
  generate_config_pre_raw?: string | undefined;
  generate_config_post_raw?: string | undefined;
  generate_config_pre_version?: string | undefined;
  generate_config_post_version?: string | undefined;
  generate_config_pre_checksum?: string | undefined;
  generate_config_post_checksum?: string | undefined;
  generate_eligible_features?: string | undefined;
  generate_gen_lock_pre_features?: string | undefined;
  generate_gen_lock_post_features?: string | undefined;
  generate_gen_lock_pre_doc_version?: string | undefined;
  generate_gen_lock_pre_doc_checksum?: string | undefined;
  generate_gen_lock_pre_version?: string | undefined;
  generate_gen_lock_pre_revision_digest?: string | undefined;
  generate_gen_lock_pre_blob_digest?: string | undefined;
  generate_gen_lock_pre_namespace_name?: string | undefined;
  generate_bump_type?: string | undefined;
  generate_number_of_operations_ignored?: number | undefined;
  generate_number_of_operations_used?: number | undefined;
  generate_number_of_terraform_resources?: number | undefined;
  generate_published?: boolean | undefined;
  generate_repo_url?: string | undefined;
  publish_package_url?: string | undefined;
  publish_package_name?: string | undefined;
  publish_package_version?: string | undefined;
  publish_package_registry_name?: string | undefined;
  source_revision_digest?: string | undefined;
  source_blob_digest?: string | undefined;
  source_namespace_name?: string | undefined;
  lint_report_digest?: string | undefined;
  lint_report_error_count?: number | undefined;
  lint_report_warning_count?: number | undefined;
  lint_report_info_count?: number | undefined;
  openapi_diff_report_digest?: string | undefined;
  openapi_diff_base_source_revision_digest?: string | undefined;
  openapi_diff_base_source_blob_digest?: string | undefined;
  openapi_diff_base_source_namespace_name?: string | undefined;
  openapi_diff_breaking_changes_count?: number | undefined;
  openapi_diff_bump_type?: string | undefined;
  error?: string | undefined;
  mermaid_diagram?: string | undefined;
  last_step?: string | undefined;
  test_report_raw?: string | undefined;
  workflow_pre_raw?: string | undefined;
  workflow_post_raw?: string | undefined;
  workflow_lock_pre_raw?: string | undefined;
  workflow_lock_post_raw?: string | undefined;
};

/** @internal */
export const CliEvent$outboundSchema: z.ZodType<
  CliEvent$Outbound,
  z.ZodTypeDef,
  CliEvent
> = z.object({
  id: z.string(),
  executionId: z.string(),
  workspaceId: z.string(),
  speakeasyApiKeyName: z.string(),
  interactionType: InteractionType$outboundSchema,
  localStartedAt: z.date().transform(v => v.toISOString()),
  localCompletedAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  speakeasyVersion: z.string(),
  success: z.boolean(),
  rawCommand: z.string().optional(),
  durationMs: z.number().int().optional(),
  continuousIntegrationEnvironment: z.string().optional(),
  ghActionRunLink: z.string().optional(),
  ghActionVersion: z.string().optional(),
  ghActionOrganization: z.string().optional(),
  ghPullRequest: z.string().optional(),
  ghChangesCommitted: z.boolean().optional(),
  ghActionRef: z.string().optional(),
  ghActionRepository: z.string().optional(),
  repoLabel: z.string().optional(),
  commitHead: z.string().optional(),
  hostname: z.string().optional(),
  gitUserName: z.string().optional(),
  gitUserEmail: z.string().optional(),
  gitRemoteDefaultOwner: z.string().optional(),
  gitRemoteDefaultRepo: z.string().optional(),
  gitRelativeCwd: z.string().optional(),
  generateTarget: z.string().optional(),
  generateTargetName: z.string().optional(),
  generateTargetVersion: z.string().optional(),
  generateGenLockId: z.string().optional(),
  managementDocChecksum: z.string().optional(),
  managementDocVersion: z.string().optional(),
  generateVersion: z.string().optional(),
  generateOutputTests: z.boolean().optional(),
  generateConfigPreRaw: z.string().optional(),
  generateConfigPostRaw: z.string().optional(),
  generateConfigPreVersion: z.string().optional(),
  generateConfigPostVersion: z.string().optional(),
  generateConfigPreChecksum: z.string().optional(),
  generateConfigPostChecksum: z.string().optional(),
  generateEligibleFeatures: z.string().optional(),
  generateGenLockPreFeatures: z.string().optional(),
  generateGenLockPostFeatures: z.string().optional(),
  generateGenLockPreDocVersion: z.string().optional(),
  generateGenLockPreDocChecksum: z.string().optional(),
  generateGenLockPreVersion: z.string().optional(),
  generateGenLockPreRevisionDigest: z.string().optional(),
  generateGenLockPreBlobDigest: z.string().optional(),
  generateGenLockPreNamespaceName: z.string().optional(),
  generateBumpType: GenerateBumpType$outboundSchema.optional(),
  generateNumberOfOperationsIgnored: z.number().int().optional(),
  generateNumberOfOperationsUsed: z.number().int().optional(),
  generateNumberOfTerraformResources: z.number().int().optional(),
  generatePublished: z.boolean().optional(),
  generateRepoUrl: z.string().optional(),
  publishPackageUrl: z.string().optional(),
  publishPackageName: z.string().optional(),
  publishPackageVersion: z.string().optional(),
  publishPackageRegistryName: z.string().optional(),
  sourceRevisionDigest: z.string().optional(),
  sourceBlobDigest: z.string().optional(),
  sourceNamespaceName: z.string().optional(),
  lintReportDigest: z.string().optional(),
  lintReportErrorCount: z.number().int().optional(),
  lintReportWarningCount: z.number().int().optional(),
  lintReportInfoCount: z.number().int().optional(),
  openapiDiffReportDigest: z.string().optional(),
  openapiDiffBaseSourceRevisionDigest: z.string().optional(),
  openapiDiffBaseSourceBlobDigest: z.string().optional(),
  openapiDiffBaseSourceNamespaceName: z.string().optional(),
  openapiDiffBreakingChangesCount: z.number().int().optional(),
  openapiDiffBumpType: OpenapiDiffBumpType$outboundSchema.optional(),
  error: z.string().optional(),
  mermaidDiagram: z.string().optional(),
  lastStep: z.string().optional(),
  testReportRaw: z.string().optional(),
  workflowPreRaw: z.string().optional(),
  workflowPostRaw: z.string().optional(),
  workflowLockPreRaw: z.string().optional(),
  workflowLockPostRaw: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    executionId: "execution_id",
    workspaceId: "workspace_id",
    speakeasyApiKeyName: "speakeasy_api_key_name",
    interactionType: "interaction_type",
    localStartedAt: "local_started_at",
    localCompletedAt: "local_completed_at",
    createdAt: "created_at",
    speakeasyVersion: "speakeasy_version",
    rawCommand: "raw_command",
    durationMs: "duration_ms",
    continuousIntegrationEnvironment: "continuous_integration_environment",
    ghActionRunLink: "gh_action_run_link",
    ghActionVersion: "gh_action_version",
    ghActionOrganization: "gh_action_organization",
    ghPullRequest: "gh_pull_request",
    ghChangesCommitted: "gh_changes_committed",
    ghActionRef: "gh_action_ref",
    ghActionRepository: "gh_action_repository",
    repoLabel: "repo_label",
    commitHead: "commit_head",
    gitUserName: "git_user_name",
    gitUserEmail: "git_user_email",
    gitRemoteDefaultOwner: "git_remote_default_owner",
    gitRemoteDefaultRepo: "git_remote_default_repo",
    gitRelativeCwd: "git_relative_cwd",
    generateTarget: "generate_target",
    generateTargetName: "generate_target_name",
    generateTargetVersion: "generate_target_version",
    generateGenLockId: "generate_gen_lock_id",
    managementDocChecksum: "management_doc_checksum",
    managementDocVersion: "management_doc_version",
    generateVersion: "generate_version",
    generateOutputTests: "generate_output_tests",
    generateConfigPreRaw: "generate_config_pre_raw",
    generateConfigPostRaw: "generate_config_post_raw",
    generateConfigPreVersion: "generate_config_pre_version",
    generateConfigPostVersion: "generate_config_post_version",
    generateConfigPreChecksum: "generate_config_pre_checksum",
    generateConfigPostChecksum: "generate_config_post_checksum",
    generateEligibleFeatures: "generate_eligible_features",
    generateGenLockPreFeatures: "generate_gen_lock_pre_features",
    generateGenLockPostFeatures: "generate_gen_lock_post_features",
    generateGenLockPreDocVersion: "generate_gen_lock_pre_doc_version",
    generateGenLockPreDocChecksum: "generate_gen_lock_pre_doc_checksum",
    generateGenLockPreVersion: "generate_gen_lock_pre_version",
    generateGenLockPreRevisionDigest: "generate_gen_lock_pre_revision_digest",
    generateGenLockPreBlobDigest: "generate_gen_lock_pre_blob_digest",
    generateGenLockPreNamespaceName: "generate_gen_lock_pre_namespace_name",
    generateBumpType: "generate_bump_type",
    generateNumberOfOperationsIgnored: "generate_number_of_operations_ignored",
    generateNumberOfOperationsUsed: "generate_number_of_operations_used",
    generateNumberOfTerraformResources:
      "generate_number_of_terraform_resources",
    generatePublished: "generate_published",
    generateRepoUrl: "generate_repo_url",
    publishPackageUrl: "publish_package_url",
    publishPackageName: "publish_package_name",
    publishPackageVersion: "publish_package_version",
    publishPackageRegistryName: "publish_package_registry_name",
    sourceRevisionDigest: "source_revision_digest",
    sourceBlobDigest: "source_blob_digest",
    sourceNamespaceName: "source_namespace_name",
    lintReportDigest: "lint_report_digest",
    lintReportErrorCount: "lint_report_error_count",
    lintReportWarningCount: "lint_report_warning_count",
    lintReportInfoCount: "lint_report_info_count",
    openapiDiffReportDigest: "openapi_diff_report_digest",
    openapiDiffBaseSourceRevisionDigest:
      "openapi_diff_base_source_revision_digest",
    openapiDiffBaseSourceBlobDigest: "openapi_diff_base_source_blob_digest",
    openapiDiffBaseSourceNamespaceName:
      "openapi_diff_base_source_namespace_name",
    openapiDiffBreakingChangesCount: "openapi_diff_breaking_changes_count",
    openapiDiffBumpType: "openapi_diff_bump_type",
    mermaidDiagram: "mermaid_diagram",
    lastStep: "last_step",
    testReportRaw: "test_report_raw",
    workflowPreRaw: "workflow_pre_raw",
    workflowPostRaw: "workflow_post_raw",
    workflowLockPreRaw: "workflow_lock_pre_raw",
    workflowLockPostRaw: "workflow_lock_post_raw",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CliEvent$ {
  /** @deprecated use `CliEvent$inboundSchema` instead. */
  export const inboundSchema = CliEvent$inboundSchema;
  /** @deprecated use `CliEvent$outboundSchema` instead. */
  export const outboundSchema = CliEvent$outboundSchema;
  /** @deprecated use `CliEvent$Outbound` instead. */
  export type Outbound = CliEvent$Outbound;
}

export function cliEventToJSON(cliEvent: CliEvent): string {
  return JSON.stringify(CliEvent$outboundSchema.parse(cliEvent));
}

export function cliEventFromJSON(
  jsonString: string,
): SafeParseResult<CliEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CliEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CliEvent' from JSON`,
  );
}
