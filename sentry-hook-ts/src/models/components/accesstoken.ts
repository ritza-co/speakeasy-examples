/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountType,
  AccountType$inboundSchema,
  AccountType$outboundSchema,
} from "./accounttype.js";
import {
  FeatureFlag,
  FeatureFlag$inboundSchema,
  FeatureFlag$Outbound,
  FeatureFlag$outboundSchema,
} from "./featureflag.js";

export type Claims = {};

export type AccessTokenUser = {
  email?: string | undefined;
  id?: string | undefined;
  displayName?: string | undefined;
  admin?: boolean | undefined;
  createdAt?: Date | undefined;
  emailVerified?: boolean | undefined;
};

export type Workspaces = {
  id?: string | undefined;
  name?: string | undefined;
  updatedAt?: Date | undefined;
  accountType?: AccountType | undefined;
};

/**
 * An AccessToken is a token that can be used to authenticate with the Speakeasy API.
 */
export type AccessToken = {
  accessToken: string;
  claims: Claims;
  user: AccessTokenUser;
  workspaces?: Array<Workspaces> | undefined;
  featureFlags?: Array<FeatureFlag> | undefined;
};

/** @internal */
export const Claims$inboundSchema: z.ZodType<Claims, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Claims$Outbound = {};

/** @internal */
export const Claims$outboundSchema: z.ZodType<
  Claims$Outbound,
  z.ZodTypeDef,
  Claims
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Claims$ {
  /** @deprecated use `Claims$inboundSchema` instead. */
  export const inboundSchema = Claims$inboundSchema;
  /** @deprecated use `Claims$outboundSchema` instead. */
  export const outboundSchema = Claims$outboundSchema;
  /** @deprecated use `Claims$Outbound` instead. */
  export type Outbound = Claims$Outbound;
}

export function claimsToJSON(claims: Claims): string {
  return JSON.stringify(Claims$outboundSchema.parse(claims));
}

export function claimsFromJSON(
  jsonString: string,
): SafeParseResult<Claims, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Claims$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Claims' from JSON`,
  );
}

/** @internal */
export const AccessTokenUser$inboundSchema: z.ZodType<
  AccessTokenUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  id: z.string().optional(),
  display_name: z.string().optional(),
  admin: z.boolean().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  email_verified: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "created_at": "createdAt",
    "email_verified": "emailVerified",
  });
});

/** @internal */
export type AccessTokenUser$Outbound = {
  email?: string | undefined;
  id?: string | undefined;
  display_name?: string | undefined;
  admin?: boolean | undefined;
  created_at?: string | undefined;
  email_verified?: boolean | undefined;
};

/** @internal */
export const AccessTokenUser$outboundSchema: z.ZodType<
  AccessTokenUser$Outbound,
  z.ZodTypeDef,
  AccessTokenUser
> = z.object({
  email: z.string().optional(),
  id: z.string().optional(),
  displayName: z.string().optional(),
  admin: z.boolean().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  emailVerified: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    createdAt: "created_at",
    emailVerified: "email_verified",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenUser$ {
  /** @deprecated use `AccessTokenUser$inboundSchema` instead. */
  export const inboundSchema = AccessTokenUser$inboundSchema;
  /** @deprecated use `AccessTokenUser$outboundSchema` instead. */
  export const outboundSchema = AccessTokenUser$outboundSchema;
  /** @deprecated use `AccessTokenUser$Outbound` instead. */
  export type Outbound = AccessTokenUser$Outbound;
}

export function accessTokenUserToJSON(
  accessTokenUser: AccessTokenUser,
): string {
  return JSON.stringify(AccessTokenUser$outboundSchema.parse(accessTokenUser));
}

export function accessTokenUserFromJSON(
  jsonString: string,
): SafeParseResult<AccessTokenUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessTokenUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessTokenUser' from JSON`,
  );
}

/** @internal */
export const Workspaces$inboundSchema: z.ZodType<
  Workspaces,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  account_type: AccountType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_at": "updatedAt",
    "account_type": "accountType",
  });
});

/** @internal */
export type Workspaces$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  updated_at?: string | undefined;
  account_type?: string | undefined;
};

/** @internal */
export const Workspaces$outboundSchema: z.ZodType<
  Workspaces$Outbound,
  z.ZodTypeDef,
  Workspaces
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  accountType: AccountType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    updatedAt: "updated_at",
    accountType: "account_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workspaces$ {
  /** @deprecated use `Workspaces$inboundSchema` instead. */
  export const inboundSchema = Workspaces$inboundSchema;
  /** @deprecated use `Workspaces$outboundSchema` instead. */
  export const outboundSchema = Workspaces$outboundSchema;
  /** @deprecated use `Workspaces$Outbound` instead. */
  export type Outbound = Workspaces$Outbound;
}

export function workspacesToJSON(workspaces: Workspaces): string {
  return JSON.stringify(Workspaces$outboundSchema.parse(workspaces));
}

export function workspacesFromJSON(
  jsonString: string,
): SafeParseResult<Workspaces, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Workspaces$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Workspaces' from JSON`,
  );
}

/** @internal */
export const AccessToken$inboundSchema: z.ZodType<
  AccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_token: z.string(),
  claims: z.lazy(() => Claims$inboundSchema),
  user: z.lazy(() => AccessTokenUser$inboundSchema),
  workspaces: z.array(z.lazy(() => Workspaces$inboundSchema)).optional(),
  feature_flags: z.array(FeatureFlag$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "access_token": "accessToken",
    "feature_flags": "featureFlags",
  });
});

/** @internal */
export type AccessToken$Outbound = {
  access_token: string;
  claims: Claims$Outbound;
  user: AccessTokenUser$Outbound;
  workspaces?: Array<Workspaces$Outbound> | undefined;
  feature_flags?: Array<FeatureFlag$Outbound> | undefined;
};

/** @internal */
export const AccessToken$outboundSchema: z.ZodType<
  AccessToken$Outbound,
  z.ZodTypeDef,
  AccessToken
> = z.object({
  accessToken: z.string(),
  claims: z.lazy(() => Claims$outboundSchema),
  user: z.lazy(() => AccessTokenUser$outboundSchema),
  workspaces: z.array(z.lazy(() => Workspaces$outboundSchema)).optional(),
  featureFlags: z.array(FeatureFlag$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    accessToken: "access_token",
    featureFlags: "feature_flags",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessToken$ {
  /** @deprecated use `AccessToken$inboundSchema` instead. */
  export const inboundSchema = AccessToken$inboundSchema;
  /** @deprecated use `AccessToken$outboundSchema` instead. */
  export const outboundSchema = AccessToken$outboundSchema;
  /** @deprecated use `AccessToken$Outbound` instead. */
  export type Outbound = AccessToken$Outbound;
}

export function accessTokenToJSON(accessToken: AccessToken): string {
  return JSON.stringify(AccessToken$outboundSchema.parse(accessToken));
}

export function accessTokenFromJSON(
  jsonString: string,
): SafeParseResult<AccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessToken' from JSON`,
  );
}
