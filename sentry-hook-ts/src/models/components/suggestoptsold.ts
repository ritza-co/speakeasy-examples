/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Diagnostic,
  Diagnostic$inboundSchema,
  Diagnostic$Outbound,
  Diagnostic$outboundSchema,
} from "./diagnostic.js";

export const SuggestOptsOldSuggestionType = {
  MethodNames: "method-names",
  DiagnosticsOnly: "diagnostics-only",
} as const;
export type SuggestOptsOldSuggestionType = ClosedEnum<
  typeof SuggestOptsOldSuggestionType
>;

export type SuggestOptsOld = {
  suggestionType: SuggestOptsOldSuggestionType;
  diagnostics?: Array<Diagnostic> | undefined;
};

/** @internal */
export const SuggestOptsOldSuggestionType$inboundSchema: z.ZodNativeEnum<
  typeof SuggestOptsOldSuggestionType
> = z.nativeEnum(SuggestOptsOldSuggestionType);

/** @internal */
export const SuggestOptsOldSuggestionType$outboundSchema: z.ZodNativeEnum<
  typeof SuggestOptsOldSuggestionType
> = SuggestOptsOldSuggestionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestOptsOldSuggestionType$ {
  /** @deprecated use `SuggestOptsOldSuggestionType$inboundSchema` instead. */
  export const inboundSchema = SuggestOptsOldSuggestionType$inboundSchema;
  /** @deprecated use `SuggestOptsOldSuggestionType$outboundSchema` instead. */
  export const outboundSchema = SuggestOptsOldSuggestionType$outboundSchema;
}

/** @internal */
export const SuggestOptsOld$inboundSchema: z.ZodType<
  SuggestOptsOld,
  z.ZodTypeDef,
  unknown
> = z.object({
  suggestion_type: SuggestOptsOldSuggestionType$inboundSchema,
  diagnostics: z.array(Diagnostic$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "suggestion_type": "suggestionType",
  });
});

/** @internal */
export type SuggestOptsOld$Outbound = {
  suggestion_type: string;
  diagnostics?: Array<Diagnostic$Outbound> | undefined;
};

/** @internal */
export const SuggestOptsOld$outboundSchema: z.ZodType<
  SuggestOptsOld$Outbound,
  z.ZodTypeDef,
  SuggestOptsOld
> = z.object({
  suggestionType: SuggestOptsOldSuggestionType$outboundSchema,
  diagnostics: z.array(Diagnostic$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    suggestionType: "suggestion_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestOptsOld$ {
  /** @deprecated use `SuggestOptsOld$inboundSchema` instead. */
  export const inboundSchema = SuggestOptsOld$inboundSchema;
  /** @deprecated use `SuggestOptsOld$outboundSchema` instead. */
  export const outboundSchema = SuggestOptsOld$outboundSchema;
  /** @deprecated use `SuggestOptsOld$Outbound` instead. */
  export type Outbound = SuggestOptsOld$Outbound;
}

export function suggestOptsOldToJSON(suggestOptsOld: SuggestOptsOld): string {
  return JSON.stringify(SuggestOptsOld$outboundSchema.parse(suggestOptsOld));
}

export function suggestOptsOldFromJSON(
  jsonString: string,
): SafeParseResult<SuggestOptsOld, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SuggestOptsOld$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SuggestOptsOld' from JSON`,
  );
}
