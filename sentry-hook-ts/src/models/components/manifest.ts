/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Annotations,
  Annotations$inboundSchema,
  Annotations$Outbound,
  Annotations$outboundSchema,
} from "./annotations.js";
import {
  V2Descriptor,
  V2Descriptor$inboundSchema,
  V2Descriptor$Outbound,
  V2Descriptor$outboundSchema,
} from "./v2descriptor.js";

/**
 * Returns the requested manifest file
 */
export type Manifest = {
  /**
   * Schema version
   */
  schemaVersion?: number | undefined;
  /**
   * Media type usually application/vnd.docker.distribution.manifest.v2+json if this is in the accept header
   */
  mediaType?: string | undefined;
  /**
   * Type of artifact
   */
  artifactType?: string | undefined;
  /**
   * Annotations
   */
  annotations?: Annotations | undefined;
  /**
   * List of V2 image layer information
   */
  layers?: Array<V2Descriptor> | undefined;
};

/** @internal */
export const Manifest$inboundSchema: z.ZodType<
  Manifest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schemaVersion: z.number().int().optional(),
  mediaType: z.string().optional(),
  artifactType: z.string().optional(),
  annotations: Annotations$inboundSchema.optional(),
  layers: z.array(V2Descriptor$inboundSchema).optional(),
});

/** @internal */
export type Manifest$Outbound = {
  schemaVersion?: number | undefined;
  mediaType?: string | undefined;
  artifactType?: string | undefined;
  annotations?: Annotations$Outbound | undefined;
  layers?: Array<V2Descriptor$Outbound> | undefined;
};

/** @internal */
export const Manifest$outboundSchema: z.ZodType<
  Manifest$Outbound,
  z.ZodTypeDef,
  Manifest
> = z.object({
  schemaVersion: z.number().int().optional(),
  mediaType: z.string().optional(),
  artifactType: z.string().optional(),
  annotations: Annotations$outboundSchema.optional(),
  layers: z.array(V2Descriptor$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Manifest$ {
  /** @deprecated use `Manifest$inboundSchema` instead. */
  export const inboundSchema = Manifest$inboundSchema;
  /** @deprecated use `Manifest$outboundSchema` instead. */
  export const outboundSchema = Manifest$outboundSchema;
  /** @deprecated use `Manifest$Outbound` instead. */
  export type Outbound = Manifest$Outbound;
}

export function manifestToJSON(manifest: Manifest): string {
  return JSON.stringify(Manifest$outboundSchema.parse(manifest));
}

export function manifestFromJSON(
  jsonString: string,
): SafeParseResult<Manifest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Manifest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Manifest' from JSON`,
  );
}
