/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileT = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/**
 * The report file to upload provided as a multipart/form-data file segment.
 */
export type UploadReportRequest = {
  data: components.Report;
  file: FileT | Blob;
};

/**
 * OK
 */
export type UploadedReport = {
  url: string;
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type FileT$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

export function fileToJSON(fileT: FileT): string {
  return JSON.stringify(FileT$outboundSchema.parse(fileT));
}

export function fileFromJSON(
  jsonString: string,
): SafeParseResult<FileT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileT' from JSON`,
  );
}

/** @internal */
export const UploadReportRequest$inboundSchema: z.ZodType<
  UploadReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Report$inboundSchema,
  file: z.lazy(() => FileT$inboundSchema),
});

/** @internal */
export type UploadReportRequest$Outbound = {
  data: components.Report$Outbound;
  file: FileT$Outbound | Blob;
};

/** @internal */
export const UploadReportRequest$outboundSchema: z.ZodType<
  UploadReportRequest$Outbound,
  z.ZodTypeDef,
  UploadReportRequest
> = z.object({
  data: components.Report$outboundSchema,
  file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadReportRequest$ {
  /** @deprecated use `UploadReportRequest$inboundSchema` instead. */
  export const inboundSchema = UploadReportRequest$inboundSchema;
  /** @deprecated use `UploadReportRequest$outboundSchema` instead. */
  export const outboundSchema = UploadReportRequest$outboundSchema;
  /** @deprecated use `UploadReportRequest$Outbound` instead. */
  export type Outbound = UploadReportRequest$Outbound;
}

export function uploadReportRequestToJSON(
  uploadReportRequest: UploadReportRequest,
): string {
  return JSON.stringify(
    UploadReportRequest$outboundSchema.parse(uploadReportRequest),
  );
}

export function uploadReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadReportRequest' from JSON`,
  );
}

/** @internal */
export const UploadedReport$inboundSchema: z.ZodType<
  UploadedReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type UploadedReport$Outbound = {
  url: string;
};

/** @internal */
export const UploadedReport$outboundSchema: z.ZodType<
  UploadedReport$Outbound,
  z.ZodTypeDef,
  UploadedReport
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadedReport$ {
  /** @deprecated use `UploadedReport$inboundSchema` instead. */
  export const inboundSchema = UploadedReport$inboundSchema;
  /** @deprecated use `UploadedReport$outboundSchema` instead. */
  export const outboundSchema = UploadedReport$outboundSchema;
  /** @deprecated use `UploadedReport$Outbound` instead. */
  export type Outbound = UploadedReport$Outbound;
}

export function uploadedReportToJSON(uploadedReport: UploadedReport): string {
  return JSON.stringify(UploadedReport$outboundSchema.parse(uploadedReport));
}

export function uploadedReportFromJSON(
  jsonString: string,
): SafeParseResult<UploadedReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadedReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadedReport' from JSON`,
  );
}
