/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { githubCheckAccess } from "../funcs/githubCheckAccess.js";
import { githubCheckPublishingPRs } from "../funcs/githubCheckPublishingPRs.js";
import { githubCheckPublishingSecrets } from "../funcs/githubCheckPublishingSecrets.js";
import { githubConfigureCodeSamples } from "../funcs/githubConfigureCodeSamples.js";
import { githubConfigureMintlifyRepo } from "../funcs/githubConfigureMintlifyRepo.js";
import { githubConfigureTarget } from "../funcs/githubConfigureTarget.js";
import { githubGetAction } from "../funcs/githubGetAction.js";
import { githubGetSetup } from "../funcs/githubGetSetup.js";
import { githubLinkGithub } from "../funcs/githubLinkGithub.js";
import { githubStorePublishingSecrets } from "../funcs/githubStorePublishingSecrets.js";
import { githubTriggerAction } from "../funcs/githubTriggerAction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Github extends ClientSDK {
  async getSetup(
    request: operations.GetGithubSetupStateRequest,
    options?: RequestOptions,
  ): Promise<components.GithubSetupStateResponse> {
    return unwrapAsync(githubGetSetup(
      this,
      request,
      options,
    ));
  }

  async checkAccess(
    request: operations.CheckGithubAccessRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(githubCheckAccess(
      this,
      request,
      options,
    ));
  }

  async linkGithub(
    request: operations.LinkGithubAccessRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(githubLinkGithub(
      this,
      request,
      options,
    ));
  }

  async checkPublishingPRs(
    request: operations.GithubCheckPublishingPRsRequest,
    options?: RequestOptions,
  ): Promise<components.GithubPublishingPRResponse> {
    return unwrapAsync(githubCheckPublishingPRs(
      this,
      request,
      options,
    ));
  }

  async checkPublishingSecrets(
    request: operations.GithubCheckPublishingSecretsRequest,
    options?: RequestOptions,
  ): Promise<components.GithubMissingPublishingSecretsResponse> {
    return unwrapAsync(githubCheckPublishingSecrets(
      this,
      request,
      options,
    ));
  }

  async storePublishingSecrets(
    request: components.GithubStorePublishingSecretsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(githubStorePublishingSecrets(
      this,
      request,
      options,
    ));
  }

  async configureCodeSamples(
    request: components.GithubConfigureCodeSamplesRequest,
    options?: RequestOptions,
  ): Promise<components.GithubConfigureCodeSamplesResponse> {
    return unwrapAsync(githubConfigureCodeSamples(
      this,
      request,
      options,
    ));
  }

  async configureMintlifyRepo(
    request: components.GithubConfigureMintlifyRepoRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(githubConfigureMintlifyRepo(
      this,
      request,
      options,
    ));
  }

  async configureTarget(
    request: components.GithubConfigureTargetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(githubConfigureTarget(
      this,
      request,
      options,
    ));
  }

  async triggerAction(
    request: components.GithubTriggerActionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(githubTriggerAction(
      this,
      request,
      options,
    ));
  }

  async getAction(
    request: operations.GetGitHubActionRequest,
    options?: RequestOptions,
  ): Promise<components.GithubGetActionResponse> {
    return unwrapAsync(githubGetAction(
      this,
      request,
      options,
    ));
  }
}
