/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authGetAccess } from "../funcs/authGetAccess.js";
import { authGetAccessToken } from "../funcs/authGetAccessToken.js";
import { authGetUser } from "../funcs/authGetUser.js";
import { authValidateApiKey } from "../funcs/authValidateApiKey.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Auth extends ClientSDK {
  /**
   * Validate the current api key.
   */
  async validateApiKey(
    options?: RequestOptions,
  ): Promise<components.ApiKeyDetails> {
    return unwrapAsync(authValidateApiKey(
      this,
      options,
    ));
  }

  /**
   * Get information about the current user.
   */
  async getUser(
    options?: RequestOptions,
  ): Promise<components.User> {
    return unwrapAsync(authGetUser(
      this,
      options,
    ));
  }

  /**
   * Get or refresh an access token for the current workspace.
   */
  async getAccessToken(
    request: operations.GetAccessTokenRequest,
    options?: RequestOptions,
  ): Promise<components.AccessToken> {
    return unwrapAsync(authGetAccessToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Get access allowances for a particular workspace
   *
   * @remarks
   * Checks if generation is permitted for a particular run of the CLI
   */
  async getAccess(
    request: operations.GetWorkspaceAccessRequest,
    options?: RequestOptions,
  ): Promise<components.AccessDetails> {
    return unwrapAsync(authGetAccess(
      this,
      request,
      options,
    ));
  }
}
