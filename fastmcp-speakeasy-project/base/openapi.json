{
  "openapi": "3.1.0",
  "info": {
    "title": "APItizing Burgers API",
    "summary": "A simple API to manage burgers and orders",
    "description": "This API is used to manage burgers and orders in a restaurant",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:8000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/burger/": {
      "get": {
        "tags": [
          "burger"
        ],
        "summary": "List Burgers",
        "description": "List all burgers",
        "operationId": "listBurgers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BurgerOutput"
                  },
                  "type": "array",
                  "title": "Response Listburgers"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-speakeasy-retries": {
          "strategy": "backoff",
          "backoff": {
            "initialInterval": 500,
            "maxInterval": 60000,
            "maxElapsedTime": 3600000,
            "exponent": 1.5
          },
          "statusCodes": [
            "5XX"
          ],
          "retryConnectionErrors": true
        }
      },
      "post": {
        "tags": [
          "burger"
        ],
        "summary": "Create Burger",
        "description": "Create a burger",
        "operationId": "createBurger",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BurgerCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BurgerOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/burger/{burger_id}": {
      "get": {
        "tags": [
          "burger"
        ],
        "summary": "Read Burger",
        "description": "Read a burger",
        "operationId": "readBurger",
        "parameters": [
          {
            "name": "burger_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Burger ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BurgerOutput"
                }
              }
            }
          },
          "404": {
            "description": "Burger not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "burger"
        ],
        "summary": "Update Burger",
        "description": "Update a burger",
        "operationId": "updateBurger",
        "parameters": [
          {
            "name": "burger_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Burger Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BurgerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BurgerOutput"
                }
              }
            }
          },
          "404": {
            "description": "Burger not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "burger"
        ],
        "summary": "Delete Burger",
        "description": "Delete a burger",
        "operationId": "deleteBurger",
        "parameters": [
          {
            "name": "burger_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Burger ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Burger deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "404": {
            "description": "Burger not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/order/": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "List Orders",
        "description": "List all orders",
        "operationId": "listOrders",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrderOutput"
                  },
                  "type": "array",
                  "title": "Response Listorders"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Create Order",
        "description": "Create an order",
        "operationId": "createOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/order/{order_id}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Read Order",
        "description": "Read an order",
        "operationId": "readOrder",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOutput"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Update Order",
        "description": "Update an order",
        "operationId": "updateOrder",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Order ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOutput"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "order-status-changed": {
      "post": {
        "summary": "Webhook Order Status Changed",
        "description": "When an order status is changed, this webhook will be triggered.\n\nThe server will send a `POST` request with the order details to the webhook URL.",
        "operationId": "webhookOrderStatusChanged",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderOutput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BurgerCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the burger",
            "examples": [
              "Cheeseburger",
              "Hamburger",
              "Veggie Burger"
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the burger",
            "default": "",
            "examples": [
              "A classic cheeseburger",
              "Veggie burger with avocado"
            ]
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "BurgerCreate",
        "description": "Fields to create a burger"
      },
      "BurgerOutput": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The id of the burger",
            "examples": [
              1,
              2,
              3
            ],
            "gte": 0
          },
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the burger",
            "examples": [
              "Cheeseburger",
              "Hamburger",
              "Veggie Burger"
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the burger",
            "default": "",
            "examples": [
              "A classic cheeseburger",
              "Veggie burger with avocado"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "BurgerOutput",
        "description": "A burger to be returned"
      },
      "BurgerUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the burger",
            "examples": [
              "Cheeseburger",
              "Hamburger",
              "Veggie Burger",
              null
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the burger",
            "examples": [
              "A classic cheeseburger",
              "Veggie burger with avocado",
              null
            ]
          }
        },
        "type": "object",
        "title": "BurgerUpdate",
        "description": "Fields to update a burger"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "OrderCreate": {
        "properties": {
          "burger_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 255,
            "minItems": 1,
            "title": "Burger Ids",
            "description": "List of burger ids in the order",
            "examples": [
              [
                1,
                2
              ],
              [
                3
              ],
              [
                1,
                3
              ]
            ]
          },
          "table": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Table",
            "description": "Table number for the order",
            "examples": [
              1,
              2,
              3
            ]
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Note for the order",
            "examples": [
              "No onions",
              "Extra ketchup"
            ]
          }
        },
        "type": "object",
        "required": [
          "burger_ids",
          "table"
        ],
        "title": "OrderCreate",
        "description": "Fields to create an order"
      },
      "OrderOutput": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "The id of the order",
            "examples": [
              1,
              2,
              3
            ],
            "gte": 0
          },
          "burger_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 255,
            "minItems": 1,
            "title": "Burger Ids",
            "description": "List of burger ids in the order",
            "examples": [
              [
                1,
                2
              ],
              [
                3
              ],
              [
                1,
                3
              ]
            ]
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "title": "Time",
            "description": "Time of the order",
            "examples": [
              "2021-01-01T12:00:00"
            ]
          },
          "table": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Table",
            "description": "Table number for the order",
            "examples": [
              1,
              2,
              3
            ]
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "examples": [
              "CREATED",
              "PREPARING",
              "READY",
              "DELIVERED",
              "CANCELLED"
            ]
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Note for the order",
            "examples": [
              "No onions",
              "Extra ketchup"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "burger_ids",
          "time",
          "table",
          "status"
        ],
        "title": "OrderOutput",
        "description": "An order to be returned"
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "CREATED",
          "PREPARING",
          "READY",
          "DELIVERED",
          "CANCELLED"
        ],
        "title": "OrderStatus",
        "description": "Status of the order"
      },
      "OrderUpdate": {
        "properties": {
          "burger_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "maxItems": 255,
            "minItems": 1,
            "title": "Burger Ids",
            "description": "List of burger ids in the order",
            "examples": [
              [
                1,
                2
              ],
              [
                3
              ],
              [
                1,
                3
              ]
            ]
          },
          "table": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Table",
            "description": "Table number for the order",
            "examples": [
              1,
              2,
              3
            ]
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "description": "Status of the order",
            "examples": [
              "CREATED",
              "PREPARING",
              "READY",
              "DELIVERED",
              "CANCELLED"
            ]
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Note for the order",
            "examples": [
              "No onions",
              "Extra ketchup"
            ]
          }
        },
        "type": "object",
        "title": "OrderUpdate",
        "description": "Fields to update an order"
      },
      "ResponseMessage": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The response message"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ResponseMessage",
        "description": "A response message"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "description": "API Key for the Burger listing API. API Key should be sent as a header, witht the value 'your-apitizing-api-key'",
        "in": "header",
        "name": "your-apitizing-api-key"
      }
    }
  },
  "tags": [
    {
      "name": "burger",
      "description": "Operations related to burgers",
      "externalDocs": {
        "description": "Burger external docs",
        "url": "https://en.wikipedia.org/wiki/Hamburger"
      }
    },
    {
      "name": "order",
      "description": "Operations related to orders"
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 500,
      "maxInterval": 60000,
      "maxElapsedTime": 3600000,
      "exponent": 1.5
    },
    "statusCodes": [
      "5XX"
    ],
    "retryConnectionErrors": true
  }
}