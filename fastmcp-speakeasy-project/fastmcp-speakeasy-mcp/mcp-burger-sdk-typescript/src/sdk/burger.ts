/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { burgerCreateBurger } from "../funcs/burgerCreateBurger.js";
import { burgerDeleteBurger } from "../funcs/burgerDeleteBurger.js";
import { burgerListBurgers } from "../funcs/burgerListBurgers.js";
import { burgerReadBurger } from "../funcs/burgerReadBurger.js";
import { burgerUpdateBurger } from "../funcs/burgerUpdateBurger.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Burger extends ClientSDK {
  /**
   * List Burgers
   *
   * @remarks
   * List all burgers
   */
  async listBurgers(
    options?: RequestOptions,
  ): Promise<Array<models.BurgerOutput>> {
    return unwrapAsync(burgerListBurgers(
      this,
      options,
    ));
  }

  /**
   * Create Burger
   *
   * @remarks
   * Create a burger
   */
  async createBurger(
    request: models.BurgerCreate,
    options?: RequestOptions,
  ): Promise<models.BurgerOutput> {
    return unwrapAsync(burgerCreateBurger(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Burger
   *
   * @remarks
   * Delete a burger
   */
  async deleteBurger(
    request: operations.DeleteBurgerRequest,
    options?: RequestOptions,
  ): Promise<models.ResponseMessage> {
    return unwrapAsync(burgerDeleteBurger(
      this,
      request,
      options,
    ));
  }

  /**
   * Read Burger
   *
   * @remarks
   * Read a burger
   */
  async readBurger(
    request: operations.ReadBurgerRequest,
    options?: RequestOptions,
  ): Promise<models.BurgerOutput> {
    return unwrapAsync(burgerReadBurger(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Burger
   *
   * @remarks
   * Update a burger
   */
  async updateBurger(
    request: operations.UpdateBurgerRequest,
    options?: RequestOptions,
  ): Promise<models.BurgerOutput> {
    return unwrapAsync(burgerUpdateBurger(
      this,
      request,
      options,
    ));
  }
}
