/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A burger to be returned
 */
export type BurgerOutput = {
  /**
   * The description of the burger
   */
  description?: string | undefined;
  /**
   * The id of the burger
   */
  id: number;
  /**
   * The name of the burger
   */
  name: string;
};

/** @internal */
export const BurgerOutput$inboundSchema: z.ZodType<
  BurgerOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().default(""),
  id: z.number().int(),
  name: z.string(),
});

/** @internal */
export type BurgerOutput$Outbound = {
  description: string;
  id: number;
  name: string;
};

/** @internal */
export const BurgerOutput$outboundSchema: z.ZodType<
  BurgerOutput$Outbound,
  z.ZodTypeDef,
  BurgerOutput
> = z.object({
  description: z.string().default(""),
  id: z.number().int(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BurgerOutput$ {
  /** @deprecated use `BurgerOutput$inboundSchema` instead. */
  export const inboundSchema = BurgerOutput$inboundSchema;
  /** @deprecated use `BurgerOutput$outboundSchema` instead. */
  export const outboundSchema = BurgerOutput$outboundSchema;
  /** @deprecated use `BurgerOutput$Outbound` instead. */
  export type Outbound = BurgerOutput$Outbound;
}

export function burgerOutputToJSON(burgerOutput: BurgerOutput): string {
  return JSON.stringify(BurgerOutput$outboundSchema.parse(burgerOutput));
}

export function burgerOutputFromJSON(
  jsonString: string,
): SafeParseResult<BurgerOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BurgerOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BurgerOutput' from JSON`,
  );
}
