/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReadBurgerRequest = {
  burgerId: number;
};

/** @internal */
export const ReadBurgerRequest$inboundSchema: z.ZodType<
  ReadBurgerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  burger_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "burger_id": "burgerId",
  });
});

/** @internal */
export type ReadBurgerRequest$Outbound = {
  burger_id: number;
};

/** @internal */
export const ReadBurgerRequest$outboundSchema: z.ZodType<
  ReadBurgerRequest$Outbound,
  z.ZodTypeDef,
  ReadBurgerRequest
> = z.object({
  burgerId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    burgerId: "burger_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadBurgerRequest$ {
  /** @deprecated use `ReadBurgerRequest$inboundSchema` instead. */
  export const inboundSchema = ReadBurgerRequest$inboundSchema;
  /** @deprecated use `ReadBurgerRequest$outboundSchema` instead. */
  export const outboundSchema = ReadBurgerRequest$outboundSchema;
  /** @deprecated use `ReadBurgerRequest$Outbound` instead. */
  export type Outbound = ReadBurgerRequest$Outbound;
}

export function readBurgerRequestToJSON(
  readBurgerRequest: ReadBurgerRequest,
): string {
  return JSON.stringify(
    ReadBurgerRequest$outboundSchema.parse(readBurgerRequest),
  );
}

export function readBurgerRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadBurgerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadBurgerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadBurgerRequest' from JSON`,
  );
}
