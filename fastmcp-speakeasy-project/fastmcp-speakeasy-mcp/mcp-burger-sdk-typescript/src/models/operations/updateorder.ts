/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateOrderRequest = {
  orderId: number;
  orderUpdate: models.OrderUpdate;
};

/** @internal */
export const UpdateOrderRequest$inboundSchema: z.ZodType<
  UpdateOrderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_id: z.number().int(),
  OrderUpdate: models.OrderUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
    "OrderUpdate": "orderUpdate",
  });
});

/** @internal */
export type UpdateOrderRequest$Outbound = {
  order_id: number;
  OrderUpdate: models.OrderUpdate$Outbound;
};

/** @internal */
export const UpdateOrderRequest$outboundSchema: z.ZodType<
  UpdateOrderRequest$Outbound,
  z.ZodTypeDef,
  UpdateOrderRequest
> = z.object({
  orderId: z.number().int(),
  orderUpdate: models.OrderUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
    orderUpdate: "OrderUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrderRequest$ {
  /** @deprecated use `UpdateOrderRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOrderRequest$inboundSchema;
  /** @deprecated use `UpdateOrderRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateOrderRequest$outboundSchema;
  /** @deprecated use `UpdateOrderRequest$Outbound` instead. */
  export type Outbound = UpdateOrderRequest$Outbound;
}

export function updateOrderRequestToJSON(
  updateOrderRequest: UpdateOrderRequest,
): string {
  return JSON.stringify(
    UpdateOrderRequest$outboundSchema.parse(updateOrderRequest),
  );
}

export function updateOrderRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOrderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrderRequest' from JSON`,
  );
}
