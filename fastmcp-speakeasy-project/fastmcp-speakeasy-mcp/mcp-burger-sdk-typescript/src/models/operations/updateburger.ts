/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateBurgerRequest = {
  burgerId: number;
  burgerUpdate: models.BurgerUpdate;
};

/** @internal */
export const UpdateBurgerRequest$inboundSchema: z.ZodType<
  UpdateBurgerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  burger_id: z.number().int(),
  BurgerUpdate: models.BurgerUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "burger_id": "burgerId",
    "BurgerUpdate": "burgerUpdate",
  });
});

/** @internal */
export type UpdateBurgerRequest$Outbound = {
  burger_id: number;
  BurgerUpdate: models.BurgerUpdate$Outbound;
};

/** @internal */
export const UpdateBurgerRequest$outboundSchema: z.ZodType<
  UpdateBurgerRequest$Outbound,
  z.ZodTypeDef,
  UpdateBurgerRequest
> = z.object({
  burgerId: z.number().int(),
  burgerUpdate: models.BurgerUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    burgerId: "burger_id",
    burgerUpdate: "BurgerUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBurgerRequest$ {
  /** @deprecated use `UpdateBurgerRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBurgerRequest$inboundSchema;
  /** @deprecated use `UpdateBurgerRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBurgerRequest$outboundSchema;
  /** @deprecated use `UpdateBurgerRequest$Outbound` instead. */
  export type Outbound = UpdateBurgerRequest$Outbound;
}

export function updateBurgerRequestToJSON(
  updateBurgerRequest: UpdateBurgerRequest,
): string {
  return JSON.stringify(
    UpdateBurgerRequest$outboundSchema.parse(updateBurgerRequest),
  );
}

export function updateBurgerRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBurgerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBurgerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBurgerRequest' from JSON`,
  );
}
