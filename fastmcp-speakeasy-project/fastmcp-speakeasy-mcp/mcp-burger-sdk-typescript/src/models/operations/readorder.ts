/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReadOrderRequest = {
  orderId: number;
};

/** @internal */
export const ReadOrderRequest$inboundSchema: z.ZodType<
  ReadOrderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
  });
});

/** @internal */
export type ReadOrderRequest$Outbound = {
  order_id: number;
};

/** @internal */
export const ReadOrderRequest$outboundSchema: z.ZodType<
  ReadOrderRequest$Outbound,
  z.ZodTypeDef,
  ReadOrderRequest
> = z.object({
  orderId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadOrderRequest$ {
  /** @deprecated use `ReadOrderRequest$inboundSchema` instead. */
  export const inboundSchema = ReadOrderRequest$inboundSchema;
  /** @deprecated use `ReadOrderRequest$outboundSchema` instead. */
  export const outboundSchema = ReadOrderRequest$outboundSchema;
  /** @deprecated use `ReadOrderRequest$Outbound` instead. */
  export type Outbound = ReadOrderRequest$Outbound;
}

export function readOrderRequestToJSON(
  readOrderRequest: ReadOrderRequest,
): string {
  return JSON.stringify(
    ReadOrderRequest$outboundSchema.parse(readOrderRequest),
  );
}

export function readOrderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadOrderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadOrderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadOrderRequest' from JSON`,
  );
}
