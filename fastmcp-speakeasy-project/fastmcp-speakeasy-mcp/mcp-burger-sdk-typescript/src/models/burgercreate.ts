/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Fields to create a burger
 */
export type BurgerCreate = {
  /**
   * The description of the burger
   */
  description?: string | undefined;
  /**
   * The name of the burger
   */
  name: string;
};

/** @internal */
export const BurgerCreate$inboundSchema: z.ZodType<
  BurgerCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().default(""),
  name: z.string(),
});

/** @internal */
export type BurgerCreate$Outbound = {
  description: string;
  name: string;
};

/** @internal */
export const BurgerCreate$outboundSchema: z.ZodType<
  BurgerCreate$Outbound,
  z.ZodTypeDef,
  BurgerCreate
> = z.object({
  description: z.string().default(""),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BurgerCreate$ {
  /** @deprecated use `BurgerCreate$inboundSchema` instead. */
  export const inboundSchema = BurgerCreate$inboundSchema;
  /** @deprecated use `BurgerCreate$outboundSchema` instead. */
  export const outboundSchema = BurgerCreate$outboundSchema;
  /** @deprecated use `BurgerCreate$Outbound` instead. */
  export type Outbound = BurgerCreate$Outbound;
}

export function burgerCreateToJSON(burgerCreate: BurgerCreate): string {
  return JSON.stringify(BurgerCreate$outboundSchema.parse(burgerCreate));
}

export function burgerCreateFromJSON(
  jsonString: string,
): SafeParseResult<BurgerCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BurgerCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BurgerCreate' from JSON`,
  );
}
