/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Fields to update a burger
 */
export type BurgerUpdate = {
  /**
   * The description of the burger
   */
  description?: string | undefined;
  /**
   * The name of the burger
   */
  name?: string | undefined;
};

/** @internal */
export const BurgerUpdate$inboundSchema: z.ZodType<
  BurgerUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type BurgerUpdate$Outbound = {
  description?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const BurgerUpdate$outboundSchema: z.ZodType<
  BurgerUpdate$Outbound,
  z.ZodTypeDef,
  BurgerUpdate
> = z.object({
  description: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BurgerUpdate$ {
  /** @deprecated use `BurgerUpdate$inboundSchema` instead. */
  export const inboundSchema = BurgerUpdate$inboundSchema;
  /** @deprecated use `BurgerUpdate$outboundSchema` instead. */
  export const outboundSchema = BurgerUpdate$outboundSchema;
  /** @deprecated use `BurgerUpdate$Outbound` instead. */
  export type Outbound = BurgerUpdate$Outbound;
}

export function burgerUpdateToJSON(burgerUpdate: BurgerUpdate): string {
  return JSON.stringify(BurgerUpdate$outboundSchema.parse(burgerUpdate));
}

export function burgerUpdateFromJSON(
  jsonString: string,
): SafeParseResult<BurgerUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BurgerUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BurgerUpdate' from JSON`,
  );
}
