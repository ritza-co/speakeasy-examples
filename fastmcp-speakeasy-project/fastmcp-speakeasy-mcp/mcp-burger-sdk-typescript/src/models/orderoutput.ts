/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OrderStatus,
  OrderStatus$inboundSchema,
  OrderStatus$outboundSchema,
} from "./orderstatus.js";

/**
 * An order to be returned
 */
export type OrderOutput = {
  /**
   * List of burger ids in the order
   */
  burgerIds: Array<number>;
  /**
   * The id of the order
   */
  id: number;
  /**
   * Note for the order
   */
  note?: string | undefined;
  /**
   * Status of the order
   */
  status: OrderStatus;
  /**
   * Table number for the order
   */
  table: number;
  /**
   * Time of the order
   */
  time: Date;
};

/** @internal */
export const OrderOutput$inboundSchema: z.ZodType<
  OrderOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  burger_ids: z.array(z.number().int()),
  id: z.number().int(),
  note: z.string().optional(),
  status: OrderStatus$inboundSchema,
  table: z.number().int(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "burger_ids": "burgerIds",
  });
});

/** @internal */
export type OrderOutput$Outbound = {
  burger_ids: Array<number>;
  id: number;
  note?: string | undefined;
  status: string;
  table: number;
  time: string;
};

/** @internal */
export const OrderOutput$outboundSchema: z.ZodType<
  OrderOutput$Outbound,
  z.ZodTypeDef,
  OrderOutput
> = z.object({
  burgerIds: z.array(z.number().int()),
  id: z.number().int(),
  note: z.string().optional(),
  status: OrderStatus$outboundSchema,
  table: z.number().int(),
  time: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    burgerIds: "burger_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderOutput$ {
  /** @deprecated use `OrderOutput$inboundSchema` instead. */
  export const inboundSchema = OrderOutput$inboundSchema;
  /** @deprecated use `OrderOutput$outboundSchema` instead. */
  export const outboundSchema = OrderOutput$outboundSchema;
  /** @deprecated use `OrderOutput$Outbound` instead. */
  export type Outbound = OrderOutput$Outbound;
}

export function orderOutputToJSON(orderOutput: OrderOutput): string {
  return JSON.stringify(OrderOutput$outboundSchema.parse(orderOutput));
}

export function orderOutputFromJSON(
  jsonString: string,
): SafeParseResult<OrderOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderOutput' from JSON`,
  );
}
