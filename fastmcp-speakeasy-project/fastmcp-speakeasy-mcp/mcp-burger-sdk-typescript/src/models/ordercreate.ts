/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Fields to create an order
 */
export type OrderCreate = {
  /**
   * List of burger ids in the order
   */
  burgerIds: Array<number>;
  /**
   * Note for the order
   */
  note?: string | undefined;
  /**
   * Table number for the order
   */
  table: number;
};

/** @internal */
export const OrderCreate$inboundSchema: z.ZodType<
  OrderCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  burger_ids: z.array(z.number().int()),
  note: z.string().optional(),
  table: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "burger_ids": "burgerIds",
  });
});

/** @internal */
export type OrderCreate$Outbound = {
  burger_ids: Array<number>;
  note?: string | undefined;
  table: number;
};

/** @internal */
export const OrderCreate$outboundSchema: z.ZodType<
  OrderCreate$Outbound,
  z.ZodTypeDef,
  OrderCreate
> = z.object({
  burgerIds: z.array(z.number().int()),
  note: z.string().optional(),
  table: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    burgerIds: "burger_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderCreate$ {
  /** @deprecated use `OrderCreate$inboundSchema` instead. */
  export const inboundSchema = OrderCreate$inboundSchema;
  /** @deprecated use `OrderCreate$outboundSchema` instead. */
  export const outboundSchema = OrderCreate$outboundSchema;
  /** @deprecated use `OrderCreate$Outbound` instead. */
  export type Outbound = OrderCreate$Outbound;
}

export function orderCreateToJSON(orderCreate: OrderCreate): string {
  return JSON.stringify(OrderCreate$outboundSchema.parse(orderCreate));
}

export function orderCreateFromJSON(
  jsonString: string,
): SafeParseResult<OrderCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderCreate' from JSON`,
  );
}
