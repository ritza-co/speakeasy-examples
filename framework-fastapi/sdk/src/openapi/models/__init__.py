"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .burgercreate import BurgerCreate, BurgerCreateTypedDict
    from .burgeroutput import BurgerOutput, BurgerOutputTypedDict
    from .burgerupdate import BurgerUpdate, BurgerUpdateTypedDict
    from .deleteburgerop import DeleteBurgerRequest, DeleteBurgerRequestTypedDict
    from .ordercreate import OrderCreate, OrderCreateTypedDict
    from .orderoutput import OrderOutput, OrderOutputTypedDict
    from .orderstatus import OrderStatus
    from .orderupdate import OrderUpdate, OrderUpdateTypedDict
    from .readburgerop import ReadBurgerRequest, ReadBurgerRequestTypedDict
    from .readorderop import ReadOrderRequest, ReadOrderRequestTypedDict
    from .responsemessage import ResponseMessage, ResponseMessageTypedDict
    from .security import Security, SecurityTypedDict
    from .updateburgerop import UpdateBurgerRequest, UpdateBurgerRequestTypedDict
    from .updateorderop import UpdateOrderRequest, UpdateOrderRequestTypedDict
    from .validationerror import (
        Loc,
        LocTypedDict,
        ValidationError,
        ValidationErrorTypedDict,
    )

__all__ = [
    "BurgerCreate",
    "BurgerCreateTypedDict",
    "BurgerOutput",
    "BurgerOutputTypedDict",
    "BurgerUpdate",
    "BurgerUpdateTypedDict",
    "DeleteBurgerRequest",
    "DeleteBurgerRequestTypedDict",
    "Loc",
    "LocTypedDict",
    "OrderCreate",
    "OrderCreateTypedDict",
    "OrderOutput",
    "OrderOutputTypedDict",
    "OrderStatus",
    "OrderUpdate",
    "OrderUpdateTypedDict",
    "ReadBurgerRequest",
    "ReadBurgerRequestTypedDict",
    "ReadOrderRequest",
    "ReadOrderRequestTypedDict",
    "ResponseMessage",
    "ResponseMessageTypedDict",
    "Security",
    "SecurityTypedDict",
    "UpdateBurgerRequest",
    "UpdateBurgerRequestTypedDict",
    "UpdateOrderRequest",
    "UpdateOrderRequestTypedDict",
    "ValidationError",
    "ValidationErrorTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "BurgerCreate": ".burgercreate",
    "BurgerCreateTypedDict": ".burgercreate",
    "BurgerOutput": ".burgeroutput",
    "BurgerOutputTypedDict": ".burgeroutput",
    "BurgerUpdate": ".burgerupdate",
    "BurgerUpdateTypedDict": ".burgerupdate",
    "DeleteBurgerRequest": ".deleteburgerop",
    "DeleteBurgerRequestTypedDict": ".deleteburgerop",
    "OrderCreate": ".ordercreate",
    "OrderCreateTypedDict": ".ordercreate",
    "OrderOutput": ".orderoutput",
    "OrderOutputTypedDict": ".orderoutput",
    "OrderStatus": ".orderstatus",
    "OrderUpdate": ".orderupdate",
    "OrderUpdateTypedDict": ".orderupdate",
    "ReadBurgerRequest": ".readburgerop",
    "ReadBurgerRequestTypedDict": ".readburgerop",
    "ReadOrderRequest": ".readorderop",
    "ReadOrderRequestTypedDict": ".readorderop",
    "ResponseMessage": ".responsemessage",
    "ResponseMessageTypedDict": ".responsemessage",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "UpdateBurgerRequest": ".updateburgerop",
    "UpdateBurgerRequestTypedDict": ".updateburgerop",
    "UpdateOrderRequest": ".updateorderop",
    "UpdateOrderRequestTypedDict": ".updateorderop",
    "Loc": ".validationerror",
    "LocTypedDict": ".validationerror",
    "ValidationError": ".validationerror",
    "ValidationErrorTypedDict": ".validationerror",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
