/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";

export type CreateErrorData = {
  success: boolean;
  error: models.ErrorT;
};

export class CreateError extends Error {
  success: boolean;
  error: models.ErrorT;

  /** The original data that was passed to this error instance. */
  data$: CreateErrorData;

  constructor(err: CreateErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.success = err.success;
    this.error = err.error;

    this.name = "CreateError";
  }
}

/** @internal */
export const CreateError$inboundSchema: z.ZodType<
  CreateError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.lazy(() => models.ErrorT$inboundSchema),
})
  .transform((v) => {
    return new CreateError(v);
  });

/** @internal */
export type CreateError$Outbound = {
  success: boolean;
  error: models.ErrorT$Outbound;
};

/** @internal */
export const CreateError$outboundSchema: z.ZodType<
  CreateError$Outbound,
  z.ZodTypeDef,
  CreateError
> = z.instanceof(CreateError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.lazy(() => models.ErrorT$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateError$ {
  /** @deprecated use `CreateError$inboundSchema` instead. */
  export const inboundSchema = CreateError$inboundSchema;
  /** @deprecated use `CreateError$outboundSchema` instead. */
  export const outboundSchema = CreateError$outboundSchema;
  /** @deprecated use `CreateError$Outbound` instead. */
  export type Outbound = CreateError$Outbound;
}
