/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Path = string | number;

export type Issue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export type ErrorT = {
  issues: Array<Issue>;
  name: string;
};

/** @internal */
export const Path$inboundSchema: z.ZodType<Path, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type Path$Outbound = string | number;

/** @internal */
export const Path$outboundSchema: z.ZodType<Path$Outbound, z.ZodTypeDef, Path> =
  z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Path$ {
  /** @deprecated use `Path$inboundSchema` instead. */
  export const inboundSchema = Path$inboundSchema;
  /** @deprecated use `Path$outboundSchema` instead. */
  export const outboundSchema = Path$outboundSchema;
  /** @deprecated use `Path$Outbound` instead. */
  export type Outbound = Path$Outbound;
}

export function pathToJSON(path: Path): string {
  return JSON.stringify(Path$outboundSchema.parse(path));
}

export function pathFromJSON(
  jsonString: string,
): SafeParseResult<Path, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Path$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Path' from JSON`,
  );
}

/** @internal */
export const Issue$inboundSchema: z.ZodType<Issue, z.ZodTypeDef, unknown> = z
  .object({
    code: z.string(),
    path: z.array(z.union([z.string(), z.number()])),
    message: z.string().optional(),
  });

/** @internal */
export type Issue$Outbound = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

/** @internal */
export const Issue$outboundSchema: z.ZodType<
  Issue$Outbound,
  z.ZodTypeDef,
  Issue
> = z.object({
  code: z.string(),
  path: z.array(z.union([z.string(), z.number()])),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issue$ {
  /** @deprecated use `Issue$inboundSchema` instead. */
  export const inboundSchema = Issue$inboundSchema;
  /** @deprecated use `Issue$outboundSchema` instead. */
  export const outboundSchema = Issue$outboundSchema;
  /** @deprecated use `Issue$Outbound` instead. */
  export type Outbound = Issue$Outbound;
}

export function issueToJSON(issue: Issue): string {
  return JSON.stringify(Issue$outboundSchema.parse(issue));
}

export function issueFromJSON(
  jsonString: string,
): SafeParseResult<Issue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Issue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Issue' from JSON`,
  );
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    issues: z.array(z.lazy(() => Issue$inboundSchema)),
    name: z.string(),
  });

/** @internal */
export type ErrorT$Outbound = {
  issues: Array<Issue$Outbound>;
  name: string;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  issues: z.array(z.lazy(() => Issue$outboundSchema)),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}
