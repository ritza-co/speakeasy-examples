/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UserSelect = {
  id: string;
  name: string;
  age: number;
};

/** @internal */
export const UserSelect$inboundSchema: z.ZodType<
  UserSelect,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  age: z.number(),
});

/** @internal */
export type UserSelect$Outbound = {
  id: string;
  name: string;
  age: number;
};

/** @internal */
export const UserSelect$outboundSchema: z.ZodType<
  UserSelect$Outbound,
  z.ZodTypeDef,
  UserSelect
> = z.object({
  id: z.string(),
  name: z.string(),
  age: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserSelect$ {
  /** @deprecated use `UserSelect$inboundSchema` instead. */
  export const inboundSchema = UserSelect$inboundSchema;
  /** @deprecated use `UserSelect$outboundSchema` instead. */
  export const outboundSchema = UserSelect$outboundSchema;
  /** @deprecated use `UserSelect$Outbound` instead. */
  export type Outbound = UserSelect$Outbound;
}

export function userSelectToJSON(userSelect: UserSelect): string {
  return JSON.stringify(UserSelect$outboundSchema.parse(userSelect));
}

export function userSelectFromJSON(
  jsonString: string,
): SafeParseResult<UserSelect, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserSelect$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserSelect' from JSON`,
  );
}
