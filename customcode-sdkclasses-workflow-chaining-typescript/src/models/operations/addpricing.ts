/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Pricing details for the product.
 */
export type AddPricingRequestBody = {
  /**
   * Price amount in smallest currency unit (e.g., cents).
   */
  amount: number;
  /**
   * Currency code (e.g., USD).
   */
  currency: string;
};

export type AddPricingRequest = {
  /**
   * ID of the product to add pricing to.
   */
  productId: string;
  /**
   * Pricing details for the product.
   */
  requestBody: AddPricingRequestBody;
};

export type Pricing = {
  amount?: number | undefined;
  currency?: string | undefined;
};

/**
 * Pricing added successfully.
 */
export type AddPricingResponse = {
  productId?: string | undefined;
  pricing?: Pricing | undefined;
};

/** @internal */
export const AddPricingRequestBody$inboundSchema: z.ZodType<
  AddPricingRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency: z.string(),
});

/** @internal */
export type AddPricingRequestBody$Outbound = {
  amount: number;
  currency: string;
};

/** @internal */
export const AddPricingRequestBody$outboundSchema: z.ZodType<
  AddPricingRequestBody$Outbound,
  z.ZodTypeDef,
  AddPricingRequestBody
> = z.object({
  amount: z.number(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddPricingRequestBody$ {
  /** @deprecated use `AddPricingRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddPricingRequestBody$inboundSchema;
  /** @deprecated use `AddPricingRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddPricingRequestBody$outboundSchema;
  /** @deprecated use `AddPricingRequestBody$Outbound` instead. */
  export type Outbound = AddPricingRequestBody$Outbound;
}

export function addPricingRequestBodyToJSON(
  addPricingRequestBody: AddPricingRequestBody,
): string {
  return JSON.stringify(
    AddPricingRequestBody$outboundSchema.parse(addPricingRequestBody),
  );
}

export function addPricingRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddPricingRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddPricingRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddPricingRequestBody' from JSON`,
  );
}

/** @internal */
export const AddPricingRequest$inboundSchema: z.ZodType<
  AddPricingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.string(),
  RequestBody: z.lazy(() => AddPricingRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddPricingRequest$Outbound = {
  productId: string;
  RequestBody: AddPricingRequestBody$Outbound;
};

/** @internal */
export const AddPricingRequest$outboundSchema: z.ZodType<
  AddPricingRequest$Outbound,
  z.ZodTypeDef,
  AddPricingRequest
> = z.object({
  productId: z.string(),
  requestBody: z.lazy(() => AddPricingRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddPricingRequest$ {
  /** @deprecated use `AddPricingRequest$inboundSchema` instead. */
  export const inboundSchema = AddPricingRequest$inboundSchema;
  /** @deprecated use `AddPricingRequest$outboundSchema` instead. */
  export const outboundSchema = AddPricingRequest$outboundSchema;
  /** @deprecated use `AddPricingRequest$Outbound` instead. */
  export type Outbound = AddPricingRequest$Outbound;
}

export function addPricingRequestToJSON(
  addPricingRequest: AddPricingRequest,
): string {
  return JSON.stringify(
    AddPricingRequest$outboundSchema.parse(addPricingRequest),
  );
}

export function addPricingRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddPricingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddPricingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddPricingRequest' from JSON`,
  );
}

/** @internal */
export const Pricing$inboundSchema: z.ZodType<Pricing, z.ZodTypeDef, unknown> =
  z.object({
    amount: z.number().optional(),
    currency: z.string().optional(),
  });

/** @internal */
export type Pricing$Outbound = {
  amount?: number | undefined;
  currency?: string | undefined;
};

/** @internal */
export const Pricing$outboundSchema: z.ZodType<
  Pricing$Outbound,
  z.ZodTypeDef,
  Pricing
> = z.object({
  amount: z.number().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pricing$ {
  /** @deprecated use `Pricing$inboundSchema` instead. */
  export const inboundSchema = Pricing$inboundSchema;
  /** @deprecated use `Pricing$outboundSchema` instead. */
  export const outboundSchema = Pricing$outboundSchema;
  /** @deprecated use `Pricing$Outbound` instead. */
  export type Outbound = Pricing$Outbound;
}

export function pricingToJSON(pricing: Pricing): string {
  return JSON.stringify(Pricing$outboundSchema.parse(pricing));
}

export function pricingFromJSON(
  jsonString: string,
): SafeParseResult<Pricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pricing' from JSON`,
  );
}

/** @internal */
export const AddPricingResponse$inboundSchema: z.ZodType<
  AddPricingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.string().optional(),
  pricing: z.lazy(() => Pricing$inboundSchema).optional(),
});

/** @internal */
export type AddPricingResponse$Outbound = {
  productId?: string | undefined;
  pricing?: Pricing$Outbound | undefined;
};

/** @internal */
export const AddPricingResponse$outboundSchema: z.ZodType<
  AddPricingResponse$Outbound,
  z.ZodTypeDef,
  AddPricingResponse
> = z.object({
  productId: z.string().optional(),
  pricing: z.lazy(() => Pricing$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddPricingResponse$ {
  /** @deprecated use `AddPricingResponse$inboundSchema` instead. */
  export const inboundSchema = AddPricingResponse$inboundSchema;
  /** @deprecated use `AddPricingResponse$outboundSchema` instead. */
  export const outboundSchema = AddPricingResponse$outboundSchema;
  /** @deprecated use `AddPricingResponse$Outbound` instead. */
  export type Outbound = AddPricingResponse$Outbound;
}

export function addPricingResponseToJSON(
  addPricingResponse: AddPricingResponse,
): string {
  return JSON.stringify(
    AddPricingResponse$outboundSchema.parse(addPricingResponse),
  );
}

export function addPricingResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddPricingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddPricingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddPricingResponse' from JSON`,
  );
}
