/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PublishProductRequest = {
  /**
   * ID of the product to publish.
   */
  productId: string;
};

/**
 * Product published successfully.
 */
export type PublishProductResponse = {
  productId?: string | undefined;
  /**
   * Publication status of the product.
   */
  status?: string | undefined;
};

/** @internal */
export const PublishProductRequest$inboundSchema: z.ZodType<
  PublishProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.string(),
});

/** @internal */
export type PublishProductRequest$Outbound = {
  productId: string;
};

/** @internal */
export const PublishProductRequest$outboundSchema: z.ZodType<
  PublishProductRequest$Outbound,
  z.ZodTypeDef,
  PublishProductRequest
> = z.object({
  productId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishProductRequest$ {
  /** @deprecated use `PublishProductRequest$inboundSchema` instead. */
  export const inboundSchema = PublishProductRequest$inboundSchema;
  /** @deprecated use `PublishProductRequest$outboundSchema` instead. */
  export const outboundSchema = PublishProductRequest$outboundSchema;
  /** @deprecated use `PublishProductRequest$Outbound` instead. */
  export type Outbound = PublishProductRequest$Outbound;
}

export function publishProductRequestToJSON(
  publishProductRequest: PublishProductRequest,
): string {
  return JSON.stringify(
    PublishProductRequest$outboundSchema.parse(publishProductRequest),
  );
}

export function publishProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<PublishProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishProductRequest' from JSON`,
  );
}

/** @internal */
export const PublishProductResponse$inboundSchema: z.ZodType<
  PublishProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type PublishProductResponse$Outbound = {
  productId?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const PublishProductResponse$outboundSchema: z.ZodType<
  PublishProductResponse$Outbound,
  z.ZodTypeDef,
  PublishProductResponse
> = z.object({
  productId: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishProductResponse$ {
  /** @deprecated use `PublishProductResponse$inboundSchema` instead. */
  export const inboundSchema = PublishProductResponse$inboundSchema;
  /** @deprecated use `PublishProductResponse$outboundSchema` instead. */
  export const outboundSchema = PublishProductResponse$outboundSchema;
  /** @deprecated use `PublishProductResponse$Outbound` instead. */
  export type Outbound = PublishProductResponse$Outbound;
}

export function publishProductResponseToJSON(
  publishProductResponse: PublishProductResponse,
): string {
  return JSON.stringify(
    PublishProductResponse$outboundSchema.parse(publishProductResponse),
  );
}

export function publishProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<PublishProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishProductResponse' from JSON`,
  );
}
