/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The product details to create.
 */
export type CreateProductRequest = {
  /**
   * The name of the product.
   */
  name: string;
  /**
   * A brief description of the product.
   */
  description?: string | undefined;
};

/**
 * Product created successfully.
 */
export type CreateProductResponse = {
  /**
   * Unique identifier for the product.
   */
  productId?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const CreateProductRequest$inboundSchema: z.ZodType<
  CreateProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type CreateProductRequest$Outbound = {
  name: string;
  description?: string | undefined;
};

/** @internal */
export const CreateProductRequest$outboundSchema: z.ZodType<
  CreateProductRequest$Outbound,
  z.ZodTypeDef,
  CreateProductRequest
> = z.object({
  name: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductRequest$ {
  /** @deprecated use `CreateProductRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProductRequest$inboundSchema;
  /** @deprecated use `CreateProductRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProductRequest$outboundSchema;
  /** @deprecated use `CreateProductRequest$Outbound` instead. */
  export type Outbound = CreateProductRequest$Outbound;
}

export function createProductRequestToJSON(
  createProductRequest: CreateProductRequest,
): string {
  return JSON.stringify(
    CreateProductRequest$outboundSchema.parse(createProductRequest),
  );
}

export function createProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductRequest' from JSON`,
  );
}

/** @internal */
export const CreateProductResponse$inboundSchema: z.ZodType<
  CreateProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type CreateProductResponse$Outbound = {
  productId?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const CreateProductResponse$outboundSchema: z.ZodType<
  CreateProductResponse$Outbound,
  z.ZodTypeDef,
  CreateProductResponse
> = z.object({
  productId: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductResponse$ {
  /** @deprecated use `CreateProductResponse$inboundSchema` instead. */
  export const inboundSchema = CreateProductResponse$inboundSchema;
  /** @deprecated use `CreateProductResponse$outboundSchema` instead. */
  export const outboundSchema = CreateProductResponse$outboundSchema;
  /** @deprecated use `CreateProductResponse$Outbound` instead. */
  export type Outbound = CreateProductResponse$Outbound;
}

export function createProductResponseToJSON(
  createProductResponse: CreateProductResponse,
): string {
  return JSON.stringify(
    CreateProductResponse$outboundSchema.parse(createProductResponse),
  );
}

export function createProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProductResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductResponse' from JSON`,
  );
}
