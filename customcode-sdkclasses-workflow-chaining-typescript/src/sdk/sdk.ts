/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { addPricing } from "../funcs/addPricing.js";
import { createProduct } from "../funcs/createProduct.js";
import { publishProduct } from "../funcs/publishProduct.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Store extends ClientSDK {
  // #region sdk-class-body
  //NOTE: this will still do type checking and validation on your code during generation 
  async createAndPublishProduct(): Promise<string> {
    const createProductResponse = await this.createProduct({
      name: "My Product",
      description: "A great product",
    });

    if (!createProductResponse.productId) {
      throw new Error("Product ID is undefined");
    }

    console.log(createProductResponse);

    const addPricingResponse = await this.addPricing({
      productId: createProductResponse.productId,
      requestBody: {
        amount: 100,
        currency: "USD",
      },
    });

    console.log(addPricingResponse);
    const publishProductResponse = await this.publishProduct({
      productId: createProductResponse.productId,
    });

    if (publishProductResponse.productId) {
      throw new Error("Product ID is undefined");
    }

    return publishProductResponse.productId as string;
  }
  // #endregion sdk-class-body

  /**
   * Create a new product
   */
  async createProduct(
    request: operations.CreateProductRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateProductResponse> {
    return unwrapAsync(createProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * Add pricing to a product
   */
  async addPricing(
    request: operations.AddPricingRequest,
    options?: RequestOptions,
  ): Promise<operations.AddPricingResponse> {
    return unwrapAsync(addPricing(
      this,
      request,
      options,
    ));
  }

  /**
   * Publish a product
   */
  async publishProduct(
    request: operations.PublishProductRequest,
    options?: RequestOptions,
  ): Promise<operations.PublishProductResponse> {
    return unwrapAsync(publishProduct(
      this,
      request,
      options,
    ));
  }
}
